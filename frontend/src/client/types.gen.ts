// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
	baseUrl: `${string}://${string}` | (string & {});
};

/**
 * BacktestConfig
 * 백테스트 설정 내장 모델
 */
export type BacktestConfig = {
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date: string;
	/**
	 * End Date
	 * 종료일
	 */
	end_date: string;
	/**
	 * Symbols
	 * 대상 심볼 목록
	 */
	symbols: Array<string>;
	/**
	 * Initial Cash
	 * 초기 자본금
	 */
	initial_cash?: number;
	/**
	 * Max Position Size
	 * 최대 포지션 크기 (비율)
	 */
	max_position_size?: number;
	/**
	 * Commission Rate
	 * 수수료율
	 */
	commission_rate?: number;
	/**
	 * Slippage Rate
	 * 슬리피지율
	 */
	slippage_rate?: number;
	/**
	 * Rebalance Frequency
	 * 리밸런싱 주기 (daily, weekly, monthly)
	 */
	rebalance_frequency?: string | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * BacktestCreateRequest
 * 백테스트 생성 요청
 */
export type BacktestCreateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * 백테스트 설정
	 */
	config: BacktestConfig;
};

/**
 * BacktestExecutionListResponse
 * 백테스트 실행 목록 응답
 */
export type BacktestExecutionListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Executions
	 * 실행 목록
	 */
	executions: Array<BacktestExecutionResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * BacktestExecutionRequest
 * 백테스트 실행 요청
 */
export type BacktestExecutionRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Signals
	 * 트레이딩 시그널 목록
	 */
	signals: Array<{
		[key: string]: unknown;
	}>;
};

/**
 * BacktestExecutionResponse
 * 백테스트 실행 응답
 */
export type BacktestExecutionResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 실행 ID
	 */
	id: string;
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id: string;
	/**
	 * Execution Id
	 * 실행 ID
	 */
	execution_id: string;
	/**
	 * Start Time
	 * 실행 시작 시간
	 */
	start_time: string;
	/**
	 * End Time
	 * 실행 종료 시간
	 */
	end_time?: string | null;
	/**
	 * 실행 상태
	 */
	status: BacktestStatus;
	/**
	 * Portfolio Values
	 * 포트폴리오 가치 히스토리
	 */
	portfolio_values: Array<number>;
	/**
	 * Trades
	 * 거래 내역
	 */
	trades: Array<Trade>;
	/**
	 * Positions
	 * 최종 포지션
	 */
	positions: {
		[key: string]: Position;
	};
	/**
	 * Error Message
	 * 오류 메시지
	 */
	error_message?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: string;
};

/**
 * BacktestListResponse
 * 백테스트 목록 응답
 */
export type BacktestListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Backtests
	 * 백테스트 목록
	 */
	backtests: Array<BacktestResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * BacktestResponse
 * 백테스트 응답
 */
export type BacktestResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 백테스트 ID
	 */
	id: string;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description: string;
	/**
	 * 백테스트 설정
	 */
	config: BacktestConfig;
	/**
	 * 실행 상태
	 */
	status: BacktestStatus;
	/**
	 * Start Time
	 * 실행 시작 시간
	 */
	start_time?: string | null;
	/**
	 * End Time
	 * 실행 종료 시간
	 */
	end_time?: string | null;
	/**
	 * Duration Seconds
	 * 실행 시간(초)
	 */
	duration_seconds?: number | null;
	/**
	 * 성과 지표
	 */
	performance?: PerformanceMetrics | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: string;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at?: string | null;
};

/**
 * BacktestStatus
 * 백테스트 상태
 */
export type BacktestStatus =
	| "pending"
	| "running"
	| "completed"
	| "failed"
	| "cancelled";

/**
 * BacktestUpdateRequest
 * 백테스트 수정 요청
 */
export type BacktestUpdateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string | null;
	/**
	 * 백테스트 설정
	 */
	config?: BacktestConfig | null;
};

/**
 * Body_Auth-login
 */
export type BodyAuthLogin = {
	/**
	 * Grant Type
	 */
	grant_type?: string | null;
	/**
	 * Username
	 */
	username: string;
	/**
	 * Password
	 */
	password: string;
	/**
	 * Scope
	 */
	scope?: string;
	/**
	 * Client Id
	 */
	client_id?: string | null;
	/**
	 * Client Secret
	 */
	client_secret?: string | null;
};

/**
 * Body_Auth-request_verify_token
 */
export type BodyAuthRequestVerifyToken = {
	/**
	 * Email
	 */
	email: string;
};

/**
 * Body_Auth-reset:forgot_password
 */
export type BodyAuthResetForgotPassword = {
	/**
	 * Email
	 */
	email: string;
};

/**
 * Body_Auth-reset:reset_password
 */
export type BodyAuthResetResetPassword = {
	/**
	 * Token
	 */
	token: string;
	/**
	 * Password
	 */
	password: string;
};

/**
 * Body_Auth-verify
 */
export type BodyAuthVerify = {
	/**
	 * Token
	 */
	token: string;
};

/**
 * BulkDataRequest
 * Request model for bulk data operations
 */
export type BulkDataRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbols
	 * List of symbols
	 */
	symbols: Array<string>;
	/**
	 * Start Date
	 * Start date
	 */
	start_date: string;
	/**
	 * End Date
	 * End date
	 */
	end_date: string;
	/**
	 * Interval
	 * Data interval
	 */
	interval?: string;
};

/**
 * DataQualityResponse
 * Response model for data quality metrics
 */
export type DataQualityResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Date Range Start
	 */
	date_range_start: string;
	/**
	 * Date Range End
	 */
	date_range_end: string;
	/**
	 * Total Records
	 */
	total_records: number;
	/**
	 * Missing Days
	 */
	missing_days: number;
	/**
	 * Duplicate Records
	 */
	duplicate_records: number;
	/**
	 * Price Anomalies
	 */
	price_anomalies: number;
	/**
	 * Quality Score
	 */
	quality_score: number;
	/**
	 * Analyzed At
	 */
	analyzed_at: string;
};

/**
 * DataRequestStatus
 * Response model for data request status
 */
export type DataRequestStatus = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 */
	id: string;
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Start Date
	 */
	start_date: string;
	/**
	 * End Date
	 */
	end_date: string;
	/**
	 * Status
	 */
	status: string;
	/**
	 * Error Message
	 */
	error_message?: string | null;
	/**
	 * Records Count
	 */
	records_count?: number | null;
	/**
	 * Requested At
	 */
	requested_at: string;
	/**
	 * Completed At
	 */
	completed_at?: string | null;
};

/**
 * ExecutionListResponse
 * Execution list response
 */
export type ExecutionListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Executions
	 * 실행 목록
	 */
	executions: Array<ExecutionResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * ExecutionResponse
 * Execution response
 */
export type ExecutionResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 실행 ID
	 */
	id: string;
	/**
	 * Strategy Id
	 * 전략 ID
	 */
	strategy_id: string;
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	signal_type: SignalType;
	/**
	 * Signal Strength
	 * 신호 강도
	 */
	signal_strength: number;
	/**
	 * Price
	 * 가격
	 */
	price: number;
	/**
	 * Timestamp
	 * 실행 시간
	 */
	timestamp: string;
	/**
	 * Metadata
	 * 메타데이터
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
	/**
	 * Detail
	 */
	detail?: Array<ValidationError>;
};

/**
 * HealthCheckResponse
 * Health check response model
 */
export type HealthCheckResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Status
	 */
	status: string;
	/**
	 * Timestamp
	 */
	timestamp: string;
	/**
	 * Database Connected
	 */
	database_connected: boolean;
	/**
	 * Alpha Vantage Available
	 */
	alpha_vantage_available: boolean;
	/**
	 * Total Symbols
	 */
	total_symbols: number;
	/**
	 * Last Update
	 */
	last_update?: string | null;
};

/**
 * HealthResponse
 * Health check response model.
 */
export type HealthResponse = {
	/**
	 * Status
	 */
	status: string;
	/**
	 * Timestamp
	 */
	timestamp: string;
	/**
	 * Service
	 */
	service: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Uptime
	 */
	uptime: number;
	/**
	 * Checks
	 */
	checks: {
		[key: string]: {
			[key: string]: unknown;
		};
	};
};

/**
 * IntegratedBacktestRequest
 * 통합 백테스트 요청
 */
export type IntegratedBacktestRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * Symbols
	 * 심볼 목록
	 */
	symbols: Array<string>;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date: string;
	/**
	 * End Date
	 * 종료일
	 */
	end_date: string;
	/**
	 * Strategy Type
	 * 전략 타입
	 */
	strategy_type: string;
	/**
	 * Strategy Params
	 * 전략 매개변수
	 */
	strategy_params?: {
		[key: string]: unknown;
	};
	/**
	 * Initial Capital
	 * 초기 자본
	 */
	initial_capital?: number;
};

/**
 * IntegratedBacktestResponse
 * 통합 백테스트 응답
 */
export type IntegratedBacktestResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id: string;
	/**
	 * Execution Id
	 * 실행 ID
	 */
	execution_id?: string | null;
	/**
	 * Result Id
	 * 결과 ID
	 */
	result_id?: string | null;
	/**
	 * 상태
	 */
	status: BacktestStatus;
	/**
	 * Message
	 * 메시지
	 */
	message: string;
	/**
	 * 성과 지표
	 */
	performance?: PerformanceMetrics | null;
	/**
	 * Start Time
	 * 시작 시간
	 */
	start_time?: string | null;
	/**
	 * End Time
	 * 종료 시간
	 */
	end_time?: string | null;
};

/**
 * LoginResponse
 */
export type LoginResponse = {
	/**
	 * Access Token
	 */
	access_token?: string | null;
	/**
	 * Refresh Token
	 */
	refresh_token?: string | null;
	/**
	 * Token Type
	 */
	token_type?: string | null;
	user_info: UserResponse;
};

/**
 * MarketDataResponse
 * Response model for market data
 */
export type MarketDataResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Date
	 */
	date: string;
	/**
	 * Open
	 */
	open: number;
	/**
	 * High
	 */
	high: number;
	/**
	 * Low
	 */
	low: number;
	/**
	 * Close
	 */
	close: number;
	/**
	 * Volume
	 */
	volume: number;
	/**
	 * Adjusted Close
	 */
	adjusted_close?: number | null;
	/**
	 * Dividend Amount
	 */
	dividend_amount?: number | null;
	/**
	 * Split Coefficient
	 */
	split_coefficient?: number | null;
};

/**
 * OAuth2AuthorizeResponse
 */
export type OAuth2AuthorizeResponse = {
	/**
	 * Authorization Url
	 */
	authorization_url: string;
};

/**
 * OAuthAccount
 * Base OAuth account model.
 */
export type OAuthAccount = {
	/**
	 * Oauth Name
	 */
	oauth_name: string;
	/**
	 * Access Token
	 */
	access_token: string;
	/**
	 * Expires At
	 */
	expires_at?: number | null;
	/**
	 * Refresh Token
	 */
	refresh_token?: string | null;
	/**
	 * Account Id
	 */
	account_id: string;
	/**
	 * Account Email
	 */
	account_email: string;
};

/**
 * OrderType
 * 주문 타입
 */
export type OrderType = "MARKET" | "LIMIT" | "STOP" | "STOP_LIMIT";

/**
 * PerformanceMetrics
 * 성과 지표 내장 모델
 */
export type PerformanceMetrics = {
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return: number;
	/**
	 * Annualized Return
	 * 연환산 수익률
	 */
	annualized_return: number;
	/**
	 * Volatility
	 * 변동성
	 */
	volatility: number;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio: number;
	/**
	 * Max Drawdown
	 * 최대 낙폭
	 */
	max_drawdown: number;
	/**
	 * Total Trades
	 * 총 거래 수
	 */
	total_trades: number;
	/**
	 * Winning Trades
	 * 승리 거래 수
	 */
	winning_trades: number;
	/**
	 * Losing Trades
	 * 패배 거래 수
	 */
	losing_trades: number;
	/**
	 * Win Rate
	 * 승률
	 */
	win_rate: number;
};

/**
 * PerformanceResponse
 * Performance response
 */
export type PerformanceResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 성과 ID
	 */
	id: string;
	/**
	 * Strategy Id
	 * 전략 ID
	 */
	strategy_id: string;
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Total Signals
	 * 총 신호 수
	 */
	total_signals: number;
	/**
	 * Buy Signals
	 * 매수 신호 수
	 */
	buy_signals: number;
	/**
	 * Sell Signals
	 * 매도 신호 수
	 */
	sell_signals: number;
	/**
	 * Hold Signals
	 * 보유 신호 수
	 */
	hold_signals: number;
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return?: number | null;
	/**
	 * Win Rate
	 * 승률
	 */
	win_rate?: number | null;
	/**
	 * Avg Return Per Trade
	 * 거래당 평균 수익률
	 */
	avg_return_per_trade?: number | null;
	/**
	 * Max Drawdown
	 * 최대 낙폭
	 */
	max_drawdown?: number | null;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio?: number | null;
	/**
	 * Calmar Ratio
	 * 칼마 비율
	 */
	calmar_ratio?: number | null;
	/**
	 * Volatility
	 * 변동성
	 */
	volatility?: number | null;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date?: string | null;
	/**
	 * End Date
	 * 종료일
	 */
	end_date?: string | null;
	/**
	 * Accuracy
	 * 정확도
	 */
	accuracy?: number | null;
	/**
	 * Avg Signal Strength
	 * 평균 신호 강도
	 */
	avg_signal_strength?: number | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: string;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: string;
};

/**
 * Position
 * 포지션 정보 내장 모델
 */
export type Position = {
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	/**
	 * Quantity
	 * 보유 수량
	 */
	quantity: number;
	/**
	 * Avg Price
	 * 평균 단가
	 */
	avg_price: number;
	/**
	 * Current Price
	 * 현재 가격
	 */
	current_price: number;
	/**
	 * Unrealized Pnl
	 * 미실현 손익
	 */
	unrealized_pnl: number;
	/**
	 * Realized Pnl
	 * 실현 손익
	 */
	realized_pnl?: number;
	/**
	 * First Buy Date
	 * 최초 매수일
	 */
	first_buy_date: string;
	/**
	 * Last Update
	 * 마지막 업데이트
	 */
	last_update?: string;
};

export type PydanticObjectId = string;

/**
 * SignalType
 * 신호 타입
 */
export type SignalType = "BUY" | "SELL" | "HOLD";

/**
 * StrategyCreateRequest
 * Strategy creation request
 */
export type StrategyCreateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Parameters
	 * 전략 파라미터
	 */
	parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * StrategyExecuteRequest
 * Strategy execution request
 */
export type StrategyExecuteRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbol
	 * 대상 심볼
	 */
	symbol: string;
	/**
	 * Market Data
	 * 시장 데이터
	 */
	market_data: {
		[key: string]: unknown;
	};
};

/**
 * StrategyFromTemplateRequest
 * Create strategy from template request
 */
export type StrategyFromTemplateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * Parameter Overrides
	 * 파라미터 오버라이드
	 */
	parameter_overrides?: {
		[key: string]: unknown | null;
	} | null;
};

/**
 * StrategyListResponse
 * Strategy list response
 */
export type StrategyListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Strategies
	 * 전략 목록
	 */
	strategies: Array<StrategyResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * StrategyResponse
 * Strategy response
 */
export type StrategyResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 전략 ID
	 */
	id: string;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Parameters
	 * 전략 파라미터
	 */
	parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Is Active
	 * 활성화 상태
	 */
	is_active: boolean;
	/**
	 * Is Template
	 * 템플릿 여부
	 */
	is_template: boolean;
	/**
	 * Created By
	 * 생성자
	 */
	created_by?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: string;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: string;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * StrategyType
 * 지원되는 전략 타입
 */
export type StrategyType =
	| "sma_crossover"
	| "rsi_mean_reversion"
	| "momentum"
	| "buy_and_hold";

/**
 * StrategyUpdateRequest
 * Strategy update request
 */
export type StrategyUpdateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Parameters
	 * 전략 파라미터
	 */
	parameters?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Is Active
	 * 활성화 상태
	 */
	is_active?: boolean | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string | null> | null;
};

/**
 * TemplateCreateRequest
 * Template creation request
 */
export type TemplateCreateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description: string;
	/**
	 * Default Parameters
	 * 기본 파라미터
	 */
	default_parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Parameter Schema
	 * 파라미터 스키마
	 */
	parameter_schema?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * TemplateListResponse
 * Template list response
 */
export type TemplateListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Templates
	 * 템플릿 목록
	 */
	templates: Array<TemplateResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * TemplateResponse
 * Template response
 */
export type TemplateResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 템플릿 ID
	 */
	id: string;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description: string;
	/**
	 * Default Parameters
	 * 기본 파라미터
	 */
	default_parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Parameter Schema
	 * 파라미터 스키마
	 */
	parameter_schema?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Usage Count
	 * 사용 횟수
	 */
	usage_count: number;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: string;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: string;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * TemplateUpdateRequest
 * Template update request
 */
export type TemplateUpdateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description?: string | null;
	/**
	 * Default Parameters
	 * 기본 파라미터
	 */
	default_parameters?: {
		[key: string]: unknown;
	} | null;
	/**
	 * Parameter Schema
	 * 파라미터 스키마
	 */
	parameter_schema?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string> | null;
};

/**
 * Trade
 * 거래 기록 내장 모델
 */
export type Trade = {
	/**
	 * Trade Id
	 * 거래 ID
	 */
	trade_id: string;
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	trade_type: TradeType;
	order_type?: OrderType;
	/**
	 * Quantity
	 * 수량
	 */
	quantity: number;
	/**
	 * Price
	 * 체결 가격
	 */
	price: number;
	/**
	 * Timestamp
	 * 거래 시간
	 */
	timestamp: string;
	/**
	 * Commission
	 * 수수료
	 */
	commission?: number;
	/**
	 * Slippage
	 * 슬리피지
	 */
	slippage?: number;
	/**
	 * Strategy Signal Id
	 * 전략 신호 ID
	 */
	strategy_signal_id?: string | null;
	/**
	 * Notes
	 * 메모
	 */
	notes?: string | null;
};

/**
 * TradeType
 * 거래 타입
 */
export type TradeType = "BUY" | "SELL";

/**
 * UpdateRequest
 * Update request model
 */
export type UpdateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbols
	 */
	symbols?: Array<string> | null;
	/**
	 * Start Date
	 */
	start_date?: string | null;
	/**
	 * End Date
	 */
	end_date?: string | null;
};

/**
 * UserCreate
 */
export type UserCreate = {
	/**
	 * Email
	 */
	email: string;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Password
	 */
	password: string;
	/**
	 * Is Active
	 */
	is_active?: boolean | null;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean | null;
	/**
	 * Is Verified
	 */
	is_verified?: boolean | null;
};

/**
 * UserResponse
 * Base User model.
 */
export type UserResponse = {
	/**
	 * Email
	 */
	email: string;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Is Active
	 */
	is_active?: boolean;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean;
	/**
	 * Is Verified
	 */
	is_verified?: boolean;
	/**
	 * Oauth Accounts
	 */
	oauth_accounts?: Array<OAuthAccount>;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
	/**
	 * Password
	 */
	password?: string | null;
	/**
	 * Email
	 */
	email?: string | null;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Is Active
	 */
	is_active?: boolean | null;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean | null;
	/**
	 * Is Verified
	 */
	is_verified?: boolean | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
	/**
	 * Location
	 */
	loc: Array<string | number>;
	/**
	 * Message
	 */
	msg: string;
	/**
	 * Error Type
	 */
	type: string;
};

/**
 * WatchlistCreate
 * Watchlist creation model
 */
export type WatchlistCreate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Description
	 */
	description?: string;
};

/**
 * WatchlistUpdate
 * Watchlist update model
 */
export type WatchlistUpdate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Name
	 */
	name?: string | null;
	/**
	 * Description
	 */
	description?: string | null;
};

export type HealthHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/";
};

export type HealthHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: HealthResponse;
};

export type HealthHealthCheckResponse =
	HealthHealthCheckResponses[keyof HealthHealthCheckResponses];

export type HealthLivenessProbeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/live";
};

export type HealthLivenessProbeResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type HealthReadinessProbeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/ready";
};

export type HealthReadinessProbeResponses = {
	/**
	 * Response Health-Readiness Probe
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type HealthReadinessProbeResponse =
	HealthReadinessProbeResponses[keyof HealthReadinessProbeResponses];

export type AuthLoginData = {
	body: BodyAuthLogin;
	path?: never;
	query?: never;
	url: "/api/v1/auth/login";
};

export type AuthLoginErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthLoginError = AuthLoginErrors[keyof AuthLoginErrors];

export type AuthLoginResponses = {
	/**
	 * Successful Response
	 */
	200: LoginResponse;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthLogoutData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/logout";
};

export type AuthLogoutResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type AuthLogoutResponse = AuthLogoutResponses[keyof AuthLogoutResponses];

export type AuthRefreshTokenData = {
	body?: never;
	headers?: {
		/**
		 * X-Refresh-Token
		 */
		"X-Refresh-Token"?: string | null;
	};
	path?: never;
	query?: never;
	url: "/api/v1/auth/refresh";
};

export type AuthRefreshTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRefreshTokenError =
	AuthRefreshTokenErrors[keyof AuthRefreshTokenErrors];

export type AuthRefreshTokenResponses = {
	/**
	 * Successful Response
	 */
	200: LoginResponse;
};

export type AuthRefreshTokenResponse =
	AuthRefreshTokenResponses[keyof AuthRefreshTokenResponses];

export type AuthVerifyTokenData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/token/verify";
};

export type AuthVerifyTokenResponses = {
	/**
	 * Response Auth-Verify Token
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type AuthVerifyTokenResponse =
	AuthVerifyTokenResponses[keyof AuthVerifyTokenResponses];

export type AuthRegisterData = {
	body: UserCreate;
	path?: never;
	query?: never;
	url: "/api/v1/auth/register";
};

export type AuthRegisterErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRegisterError = AuthRegisterErrors[keyof AuthRegisterErrors];

export type AuthRegisterResponses = {
	/**
	 * Successful Response
	 */
	201: UserResponse;
};

export type AuthRegisterResponse =
	AuthRegisterResponses[keyof AuthRegisterResponses];

export type AuthResetForgotPasswordData = {
	body: BodyAuthResetForgotPassword;
	path?: never;
	query?: never;
	url: "/api/v1/auth/forgot-password";
};

export type AuthResetForgotPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthResetForgotPasswordError =
	AuthResetForgotPasswordErrors[keyof AuthResetForgotPasswordErrors];

export type AuthResetForgotPasswordResponses = {
	/**
	 * Successful Response
	 */
	202: unknown;
};

export type AuthResetResetPasswordData = {
	body: BodyAuthResetResetPassword;
	path?: never;
	query?: never;
	url: "/api/v1/auth/reset-password";
};

export type AuthResetResetPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthResetResetPasswordError =
	AuthResetResetPasswordErrors[keyof AuthResetResetPasswordErrors];

export type AuthResetResetPasswordResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type AuthRequestVerifyTokenData = {
	body: BodyAuthRequestVerifyToken;
	path?: never;
	query?: never;
	url: "/api/v1/auth/request-verify-token";
};

export type AuthRequestVerifyTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRequestVerifyTokenError =
	AuthRequestVerifyTokenErrors[keyof AuthRequestVerifyTokenErrors];

export type AuthRequestVerifyTokenResponses = {
	/**
	 * Successful Response
	 */
	202: unknown;
};

export type AuthVerifyData = {
	body: BodyAuthVerify;
	path?: never;
	query?: never;
	url: "/api/v1/auth/verify";
};

export type AuthVerifyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthVerifyError = AuthVerifyErrors[keyof AuthVerifyErrors];

export type AuthVerifyResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type AuthVerifyResponse = AuthVerifyResponses[keyof AuthVerifyResponses];

export type AuthAuthorizeData = {
	body?: never;
	path: {
		/**
		 * Provider
		 */
		provider: string;
	};
	query?: {
		/**
		 * Redirect Url
		 */
		redirect_url?: string | null;
		/**
		 * State
		 */
		state?: string | null;
	};
	url: "/api/v1/auth/{provider}/authorize";
};

export type AuthAuthorizeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthAuthorizeError = AuthAuthorizeErrors[keyof AuthAuthorizeErrors];

export type AuthAuthorizeResponses = {
	/**
	 * Successful Response
	 */
	200: OAuth2AuthorizeResponse;
};

export type AuthAuthorizeResponse =
	AuthAuthorizeResponses[keyof AuthAuthorizeResponses];

export type AuthCallbackData = {
	body?: never;
	path: {
		/**
		 * Provider
		 */
		provider: string;
	};
	query?: never;
	url: "/api/v1/auth/{provider}/callback";
};

export type AuthCallbackErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthCallbackError = AuthCallbackErrors[keyof AuthCallbackErrors];

export type AuthCallbackResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type AuthCallbackResponse =
	AuthCallbackResponses[keyof AuthCallbackResponses];

export type UserGetUserMeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/users/me";
};

export type UserGetUserMeResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserGetUserMeResponse =
	UserGetUserMeResponses[keyof UserGetUserMeResponses];

export type UserUpdateUserMeData = {
	body: UserUpdate;
	path?: never;
	query?: never;
	url: "/api/v1/users/me";
};

export type UserUpdateUserMeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserUpdateUserMeError =
	UserUpdateUserMeErrors[keyof UserUpdateUserMeErrors];

export type UserUpdateUserMeResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserUpdateUserMeResponse =
	UserUpdateUserMeResponses[keyof UserUpdateUserMeResponses];

export type UserDeleteUserData = {
	body?: never;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserDeleteUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserDeleteUserError =
	UserDeleteUserErrors[keyof UserDeleteUserErrors];

export type UserDeleteUserResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type UserDeleteUserResponse =
	UserDeleteUserResponses[keyof UserDeleteUserResponses];

export type UserGetUserData = {
	body?: never;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserGetUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserError = UserGetUserErrors[keyof UserGetUserErrors];

export type UserGetUserResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserGetUserResponse =
	UserGetUserResponses[keyof UserGetUserResponses];

export type UserUpdateUserData = {
	body: UserUpdate;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserUpdateUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserUpdateUserError =
	UserUpdateUserErrors[keyof UserUpdateUserErrors];

export type UserUpdateUserResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserUpdateUserResponse =
	UserUpdateUserResponses[keyof UserUpdateUserResponses];

export type UserGetMyOauthAccountsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/users/me/oauth-accounts";
};

export type UserGetMyOauthAccountsResponses = {
	/**
	 * Response User-Get My Oauth Accounts
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type UserGetMyOauthAccountsResponse =
	UserGetMyOauthAccountsResponses[keyof UserGetMyOauthAccountsResponses];

export type UserRemoveOauthAccountData = {
	body?: never;
	path: {
		/**
		 * Oauth Name
		 */
		oauth_name: string;
		/**
		 * Account Id
		 */
		account_id: string;
	};
	query?: never;
	url: "/api/v1/users/me/oauth-accounts/{oauth_name}/{account_id}";
};

export type UserRemoveOauthAccountErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserRemoveOauthAccountError =
	UserRemoveOauthAccountErrors[keyof UserRemoveOauthAccountErrors];

export type UserRemoveOauthAccountResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type UserRemoveOauthAccountResponse =
	UserRemoveOauthAccountResponses[keyof UserRemoveOauthAccountResponses];

export type UserGetUserOauthAccountsData = {
	body?: never;
	path: {
		user_id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/users/{user_id}/oauth-accounts";
};

export type UserGetUserOauthAccountsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserOauthAccountsError =
	UserGetUserOauthAccountsErrors[keyof UserGetUserOauthAccountsErrors];

export type UserGetUserOauthAccountsResponses = {
	/**
	 * Response User-Get User Oauth Accounts
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type UserGetUserOauthAccountsResponse =
	UserGetUserOauthAccountsResponses[keyof UserGetUserOauthAccountsResponses];

export type MarketDataGetAvailableSymbolsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/symbols";
};

export type MarketDataGetAvailableSymbolsResponses = {
	/**
	 * Response Market Data-Get Available Symbols
	 * Successful Response
	 */
	200: Array<string>;
};

export type MarketDataGetAvailableSymbolsResponse =
	MarketDataGetAvailableSymbolsResponses[keyof MarketDataGetAvailableSymbolsResponses];

export type MarketDataGetMarketDataData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query: {
		/**
		 * Start Date
		 * Start date (YYYY-MM-DD)
		 */
		start_date: string;
		/**
		 * End Date
		 * End date (YYYY-MM-DD)
		 */
		end_date: string;
		/**
		 * Force Refresh
		 * Force refresh from external API
		 */
		force_refresh?: boolean;
	};
	url: "/api/v1/market-data/data/{symbol}";
};

export type MarketDataGetMarketDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetMarketDataError =
	MarketDataGetMarketDataErrors[keyof MarketDataGetMarketDataErrors];

export type MarketDataGetMarketDataResponses = {
	/**
	 * Response Market Data-Get Market Data
	 * Successful Response
	 */
	200: Array<MarketDataResponse>;
};

export type MarketDataGetMarketDataResponse =
	MarketDataGetMarketDataResponses[keyof MarketDataGetMarketDataResponses];

export type MarketDataRequestBulkDataData = {
	body: BulkDataRequest;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/data/bulk";
};

export type MarketDataRequestBulkDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataRequestBulkDataError =
	MarketDataRequestBulkDataErrors[keyof MarketDataRequestBulkDataErrors];

export type MarketDataRequestBulkDataResponses = {
	/**
	 * Response Market Data-Request Bulk Data
	 * Successful Response
	 */
	200: Array<DataRequestStatus>;
};

export type MarketDataRequestBulkDataResponse =
	MarketDataRequestBulkDataResponses[keyof MarketDataRequestBulkDataResponses];

export type MarketDataGetDataCoverageData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/coverage/{symbol}";
};

export type MarketDataGetDataCoverageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetDataCoverageError =
	MarketDataGetDataCoverageErrors[keyof MarketDataGetDataCoverageErrors];

export type MarketDataGetDataCoverageResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataAnalyzeDataQualityData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query: {
		/**
		 * Start Date
		 * Start date (YYYY-MM-DD)
		 */
		start_date: string;
		/**
		 * End Date
		 * End date (YYYY-MM-DD)
		 */
		end_date: string;
	};
	url: "/api/v1/market-data/quality/{symbol}";
};

export type MarketDataAnalyzeDataQualityErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataAnalyzeDataQualityError =
	MarketDataAnalyzeDataQualityErrors[keyof MarketDataAnalyzeDataQualityErrors];

export type MarketDataAnalyzeDataQualityResponses = {
	/**
	 * Successful Response
	 */
	200: DataQualityResponse;
};

export type MarketDataAnalyzeDataQualityResponse =
	MarketDataAnalyzeDataQualityResponses[keyof MarketDataAnalyzeDataQualityResponses];

export type MarketDataGetCachePerformanceStatsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/analytics/cache-performance";
};

export type MarketDataGetCachePerformanceStatsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataGetSymbolsCoverageAnalyticsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/analytics/symbol-coverage";
};

export type MarketDataGetSymbolsCoverageAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataServiceHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/health/";
};

export type MarketDataServiceHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: HealthCheckResponse;
};

export type MarketDataServiceHealthCheckResponse =
	MarketDataServiceHealthCheckResponses[keyof MarketDataServiceHealthCheckResponses];

export type PipelineUpdateWatchlistData = {
	body: WatchlistUpdate;
	path?: never;
	query?: never;
	url: "/api/v1/pipeline/watchlists/watchlist";
};

export type PipelineUpdateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineUpdateWatchlistError =
	PipelineUpdateWatchlistErrors[keyof PipelineUpdateWatchlistErrors];

export type PipelineUpdateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineListWatchlistsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/pipeline/watchlists/watchlists";
};

export type PipelineListWatchlistsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineCreateWatchlistData = {
	body: WatchlistCreate;
	path?: never;
	query?: never;
	url: "/api/v1/pipeline/watchlists/watchlists";
};

export type PipelineCreateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineCreateWatchlistError =
	PipelineCreateWatchlistErrors[keyof PipelineCreateWatchlistErrors];

export type PipelineCreateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineDeleteWatchlistData = {
	body?: never;
	path: {
		/**
		 * Name
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/pipeline/watchlists/{name}";
};

export type PipelineDeleteWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineDeleteWatchlistError =
	PipelineDeleteWatchlistErrors[keyof PipelineDeleteWatchlistErrors];

export type PipelineDeleteWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineGetWatchlistData = {
	body?: never;
	path: {
		/**
		 * Name
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/pipeline/watchlists/{name}";
};

export type PipelineGetWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineGetWatchlistError =
	PipelineGetWatchlistErrors[keyof PipelineGetWatchlistErrors];

export type PipelineGetWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineUpdateWatchlistByNameData = {
	body: WatchlistUpdate;
	path: {
		/**
		 * Name
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/pipeline/watchlists/{name}";
};

export type PipelineUpdateWatchlistByNameErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineUpdateWatchlistByNameError =
	PipelineUpdateWatchlistByNameErrors[keyof PipelineUpdateWatchlistByNameErrors];

export type PipelineUpdateWatchlistByNameResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineCollectStockInfoData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/pipeline/companies/collect-info/{symbol}";
};

export type PipelineCollectStockInfoErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineCollectStockInfoError =
	PipelineCollectStockInfoErrors[keyof PipelineCollectStockInfoErrors];

export type PipelineCollectStockInfoResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineCollectDailyDataData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Start Date
		 */
		start_date?: string | null;
		/**
		 * End Date
		 */
		end_date?: string | null;
	};
	url: "/api/v1/pipeline/companies/collect-data/{symbol}";
};

export type PipelineCollectDailyDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineCollectDailyDataError =
	PipelineCollectDailyDataErrors[keyof PipelineCollectDailyDataErrors];

export type PipelineCollectDailyDataResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineGetSymbolCoverageData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/pipeline/companies/coverage/{symbol}";
};

export type PipelineGetSymbolCoverageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineGetSymbolCoverageError =
	PipelineGetSymbolCoverageErrors[keyof PipelineGetSymbolCoverageErrors];

export type PipelineGetSymbolCoverageResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineGetCompanyInfoData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/pipeline/companies/company/{symbol}";
};

export type PipelineGetCompanyInfoErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineGetCompanyInfoError =
	PipelineGetCompanyInfoErrors[keyof PipelineGetCompanyInfoErrors];

export type PipelineGetCompanyInfoResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineListCompaniesData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/pipeline/companies/";
};

export type PipelineListCompaniesResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineGetPipelineStatusData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/pipeline/status/";
};

export type PipelineGetPipelineStatusResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineSetupDefaultSymbolsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/pipeline/status/setup-defaults";
};

export type PipelineSetupDefaultSymbolsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type PipelineRunPipelineUpdateData = {
	body: UpdateRequest;
	path?: never;
	query?: never;
	url: "/api/v1/pipeline/status/update";
};

export type PipelineRunPipelineUpdateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PipelineRunPipelineUpdateError =
	PipelineRunPipelineUpdateErrors[keyof PipelineRunPipelineUpdateErrors];

export type PipelineRunPipelineUpdateResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetStrategiesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Strategy Type
		 * 전략 타입 필터
		 */
		strategy_type?: StrategyType | null;
		/**
		 * Is Active
		 * 활성화 상태 필터
		 */
		is_active?: boolean | null;
		/**
		 * Is Template
		 * 템플릿 여부 필터
		 */
		is_template?: boolean | null;
		/**
		 * Limit
		 * 결과 수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/strategies/";
};

export type StrategyGetStrategiesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategiesError =
	StrategyGetStrategiesErrors[keyof StrategyGetStrategiesErrors];

export type StrategyGetStrategiesResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyListResponse;
};

export type StrategyGetStrategiesResponse =
	StrategyGetStrategiesResponses[keyof StrategyGetStrategiesResponses];

export type StrategyCreateStrategyData = {
	body: StrategyCreateRequest;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/";
};

export type StrategyCreateStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateStrategyError =
	StrategyCreateStrategyErrors[keyof StrategyCreateStrategyErrors];

export type StrategyCreateStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyCreateStrategyResponse =
	StrategyCreateStrategyResponses[keyof StrategyCreateStrategyResponses];

export type StrategyDeleteStrategyData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyDeleteStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyDeleteStrategyError =
	StrategyDeleteStrategyErrors[keyof StrategyDeleteStrategyErrors];

export type StrategyDeleteStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetStrategyData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyGetStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyError =
	StrategyGetStrategyErrors[keyof StrategyGetStrategyErrors];

export type StrategyGetStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyGetStrategyResponse =
	StrategyGetStrategyResponses[keyof StrategyGetStrategyResponses];

export type StrategyUpdateStrategyData = {
	body: StrategyUpdateRequest;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyUpdateStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyUpdateStrategyError =
	StrategyUpdateStrategyErrors[keyof StrategyUpdateStrategyErrors];

export type StrategyUpdateStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyUpdateStrategyResponse =
	StrategyUpdateStrategyResponses[keyof StrategyUpdateStrategyResponses];

export type StrategyExecuteStrategyData = {
	body: StrategyExecuteRequest;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}/execute";
};

export type StrategyExecuteStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyExecuteStrategyError =
	StrategyExecuteStrategyErrors[keyof StrategyExecuteStrategyErrors];

export type StrategyExecuteStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: ExecutionResponse;
};

export type StrategyExecuteStrategyResponse =
	StrategyExecuteStrategyResponses[keyof StrategyExecuteStrategyResponses];

export type StrategyGetStrategyExecutionsData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: {
		/**
		 * Limit
		 * 결과 수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/strategies/{strategy_id}/executions";
};

export type StrategyGetStrategyExecutionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyExecutionsError =
	StrategyGetStrategyExecutionsErrors[keyof StrategyGetStrategyExecutionsErrors];

export type StrategyGetStrategyExecutionsResponses = {
	/**
	 * Successful Response
	 */
	200: ExecutionListResponse;
};

export type StrategyGetStrategyExecutionsResponse =
	StrategyGetStrategyExecutionsResponses[keyof StrategyGetStrategyExecutionsResponses];

export type StrategyGetStrategyPerformanceData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}/performance";
};

export type StrategyGetStrategyPerformanceErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyPerformanceError =
	StrategyGetStrategyPerformanceErrors[keyof StrategyGetStrategyPerformanceErrors];

export type StrategyGetStrategyPerformanceResponses = {
	/**
	 * Successful Response
	 */
	200: PerformanceResponse;
};

export type StrategyGetStrategyPerformanceResponse =
	StrategyGetStrategyPerformanceResponses[keyof StrategyGetStrategyPerformanceResponses];

export type StrategyGetTemplatesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Strategy Type
		 * 전략 타입 필터
		 */
		strategy_type?: StrategyType | null;
	};
	url: "/api/v1/strategies/templates/";
};

export type StrategyGetTemplatesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplatesError =
	StrategyGetTemplatesErrors[keyof StrategyGetTemplatesErrors];

export type StrategyGetTemplatesResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateListResponse;
};

export type StrategyGetTemplatesResponse =
	StrategyGetTemplatesResponses[keyof StrategyGetTemplatesResponses];

export type StrategyCreateTemplateData = {
	body: TemplateCreateRequest;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/templates/";
};

export type StrategyCreateTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateTemplateError =
	StrategyCreateTemplateErrors[keyof StrategyCreateTemplateErrors];

export type StrategyCreateTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyCreateTemplateResponse =
	StrategyCreateTemplateResponses[keyof StrategyCreateTemplateResponses];

export type StrategyDeleteTemplateData = {
	body?: never;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyDeleteTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyDeleteTemplateError =
	StrategyDeleteTemplateErrors[keyof StrategyDeleteTemplateErrors];

export type StrategyDeleteTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetTemplateData = {
	body?: never;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyGetTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplateError =
	StrategyGetTemplateErrors[keyof StrategyGetTemplateErrors];

export type StrategyGetTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyGetTemplateResponse =
	StrategyGetTemplateResponses[keyof StrategyGetTemplateResponses];

export type StrategyUpdateTemplateData = {
	body: TemplateUpdateRequest;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyUpdateTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyUpdateTemplateError =
	StrategyUpdateTemplateErrors[keyof StrategyUpdateTemplateErrors];

export type StrategyUpdateTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyUpdateTemplateResponse =
	StrategyUpdateTemplateResponses[keyof StrategyUpdateTemplateResponses];

export type StrategyCreateStrategyFromTemplateData = {
	body: StrategyFromTemplateRequest;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}/create-strategy";
};

export type StrategyCreateStrategyFromTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateStrategyFromTemplateError =
	StrategyCreateStrategyFromTemplateErrors[keyof StrategyCreateStrategyFromTemplateErrors];

export type StrategyCreateStrategyFromTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyCreateStrategyFromTemplateResponse =
	StrategyCreateStrategyFromTemplateResponses[keyof StrategyCreateStrategyFromTemplateResponses];

export type StrategyGetTemplateUsageStatsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/templates/analytics/usage-stats";
};

export type StrategyGetTemplateUsageStatsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetBacktestsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Status
		 * 실행 상태 필터
		 */
		status?: BacktestStatus | null;
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/";
};

export type BacktestsGetBacktestsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestsError =
	BacktestsGetBacktestsErrors[keyof BacktestsGetBacktestsErrors];

export type BacktestsGetBacktestsResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestListResponse;
};

export type BacktestsGetBacktestsResponse =
	BacktestsGetBacktestsResponses[keyof BacktestsGetBacktestsResponses];

export type BacktestsCreateBacktestData = {
	body: BacktestCreateRequest;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/";
};

export type BacktestsCreateBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsCreateBacktestError =
	BacktestsCreateBacktestErrors[keyof BacktestsCreateBacktestErrors];

export type BacktestsCreateBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestsCreateBacktestResponse =
	BacktestsCreateBacktestResponses[keyof BacktestsCreateBacktestResponses];

export type BacktestsDeleteBacktestData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsDeleteBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsDeleteBacktestError =
	BacktestsDeleteBacktestErrors[keyof BacktestsDeleteBacktestErrors];

export type BacktestsDeleteBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetBacktestData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsGetBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestError =
	BacktestsGetBacktestErrors[keyof BacktestsGetBacktestErrors];

export type BacktestsGetBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestsGetBacktestResponse =
	BacktestsGetBacktestResponses[keyof BacktestsGetBacktestResponses];

export type BacktestsUpdateBacktestData = {
	body: BacktestUpdateRequest;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsUpdateBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsUpdateBacktestError =
	BacktestsUpdateBacktestErrors[keyof BacktestsUpdateBacktestErrors];

export type BacktestsUpdateBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestsUpdateBacktestResponse =
	BacktestsUpdateBacktestResponses[keyof BacktestsUpdateBacktestResponses];

export type BacktestsExecuteBacktestData = {
	body: BacktestExecutionRequest;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}/execute";
};

export type BacktestsExecuteBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsExecuteBacktestError =
	BacktestsExecuteBacktestErrors[keyof BacktestsExecuteBacktestErrors];

export type BacktestsExecuteBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestExecutionResponse;
};

export type BacktestsExecuteBacktestResponse =
	BacktestsExecuteBacktestResponses[keyof BacktestsExecuteBacktestResponses];

export type BacktestsGetBacktestExecutionsData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: {
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/{backtest_id}/executions";
};

export type BacktestsGetBacktestExecutionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestExecutionsError =
	BacktestsGetBacktestExecutionsErrors[keyof BacktestsGetBacktestExecutionsErrors];

export type BacktestsGetBacktestExecutionsResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestExecutionListResponse;
};

export type BacktestsGetBacktestExecutionsResponse =
	BacktestsGetBacktestExecutionsResponses[keyof BacktestsGetBacktestExecutionsResponses];

export type BacktestsGetBacktestResultsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Backtest Id
		 * 백테스트 ID 필터
		 */
		backtest_id?: string | null;
		/**
		 * Execution Id
		 * 실행 ID 필터
		 */
		execution_id?: string | null;
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/results/";
};

export type BacktestsGetBacktestResultsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestResultsError =
	BacktestsGetBacktestResultsErrors[keyof BacktestsGetBacktestResultsErrors];

export type BacktestsGetBacktestResultsResponses = {
	/**
	 * Response Backtests-Get Backtest Results
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type BacktestsGetBacktestResultsResponse =
	BacktestsGetBacktestResultsResponses[keyof BacktestsGetBacktestResultsResponses];

export type BacktestsCreateAndRunIntegratedBacktestData = {
	body: IntegratedBacktestRequest;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/integrated";
};

export type BacktestsCreateAndRunIntegratedBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsCreateAndRunIntegratedBacktestError =
	BacktestsCreateAndRunIntegratedBacktestErrors[keyof BacktestsCreateAndRunIntegratedBacktestErrors];

export type BacktestsCreateAndRunIntegratedBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: IntegratedBacktestResponse;
};

export type BacktestsCreateAndRunIntegratedBacktestResponse =
	BacktestsCreateAndRunIntegratedBacktestResponses[keyof BacktestsCreateAndRunIntegratedBacktestResponses];

export type BacktestsHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/health";
};

export type BacktestsHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetPerformanceAnalyticsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/analytics/performance-stats";
};

export type BacktestsGetPerformanceAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetTradesAnalyticsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Execution Id
		 * 특정 실행 ID 필터
		 */
		execution_id?: string | null;
		/**
		 * Symbol
		 * 심볼 필터
		 */
		symbol?: string | null;
	};
	url: "/api/v1/backtests/analytics/trades";
};

export type BacktestsGetTradesAnalyticsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetTradesAnalyticsError =
	BacktestsGetTradesAnalyticsErrors[keyof BacktestsGetTradesAnalyticsErrors];

export type BacktestsGetTradesAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetBacktestSummaryAnalyticsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/analytics/summary";
};

export type BacktestsGetBacktestSummaryAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};
