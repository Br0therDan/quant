// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};

/**
 * BacktestConfig
 * 백테스트 설정 내장 모델
 */
export type BacktestConfig = {
  /**
   * Name
   * 백테스트 이름
   */
  name: string;
  /**
   * Description
   * 백테스트 설명
   */
  description?: string;
  /**
   * Start Date
   * 시작일
   */
  start_date: Date;
  /**
   * End Date
   * 종료일
   */
  end_date: Date;
  /**
   * Symbols
   * 대상 심볼 목록
   */
  symbols: Array<string>;
  /**
   * Initial Cash
   * 초기 자본금
   */
  initial_cash?: number;
  /**
   * Max Position Size
   * 최대 포지션 크기 (비율)
   */
  max_position_size?: number;
  /**
   * Commission Rate
   * 수수료율
   */
  commission_rate?: number;
  /**
   * Slippage Rate
   * 슬리피지율
   */
  slippage_rate?: number;
  /**
   * Rebalance Frequency
   * 리밸런싱 주기 (daily, weekly, monthly)
   */
  rebalance_frequency?: string | null;
  /**
   * Tags
   * 태그
   */
  tags?: Array<string>;
};

/**
 * BacktestCreateRequest
 * 백테스트 생성 요청
 */
export type BacktestCreateRequest = {
  /**
   * Name
   * 백테스트 이름
   */
  name: string;
  /**
   * Description
   * 백테스트 설명
   */
  description?: string;
  /**
   * 백테스트 설정
   */
  config: BacktestConfig;
};

/**
 * BacktestExecutionListResponse
 * 백테스트 실행 목록 응답
 */
export type BacktestExecutionListResponse = {
  /**
   * Executions
   * 실행 목록
   */
  executions: Array<BacktestExecutionResponse>;
  /**
   * Total
   * 총 개수
   */
  total: number;
};

/**
 * BacktestExecutionRequest
 * 백테스트 실행 요청
 */
export type BacktestExecutionRequest = {
  /**
   * Signals
   * 트레이딩 시그널 목록
   */
  signals: Array<{
    [key: string]: unknown;
  }>;
};

/**
 * BacktestExecutionResponse
 * 백테스트 실행 응답
 */
export type BacktestExecutionResponse = {
  /**
   * Id
   * 실행 ID
   */
  id: string;
  /**
   * Backtest Id
   * 백테스트 ID
   */
  backtest_id: string;
  /**
   * Execution Id
   * 실행 ID
   */
  execution_id: string;
  /**
   * Start Time
   * 실행 시작 시간
   */
  start_time: Date;
  /**
   * End Time
   * 실행 종료 시간
   */
  end_time?: Date | null;
  /**
   * 실행 상태
   */
  status: BacktestStatus;
  /**
   * Portfolio Values
   * 포트폴리오 가치 히스토리
   */
  portfolio_values: Array<number>;
  /**
   * Trades
   * 거래 내역
   */
  trades: Array<Trade>;
  /**
   * Positions
   * 최종 포지션
   */
  positions: {
    [key: string]: Position;
  };
  /**
   * Error Message
   * 오류 메시지
   */
  error_message?: string | null;
  /**
   * Created At
   * 생성 시간
   */
  created_at: Date;
};

/**
 * BacktestListResponse
 * 백테스트 목록 응답
 */
export type BacktestListResponse = {
  /**
   * Backtests
   * 백테스트 목록
   */
  backtests: Array<BacktestResponse>;
  /**
   * Total
   * 총 개수
   */
  total: number;
};

/**
 * BacktestResponse
 * 백테스트 응답
 */
export type BacktestResponse = {
  /**
   * Id
   * 백테스트 ID
   */
  id: string;
  /**
   * Name
   * 백테스트 이름
   */
  name: string;
  /**
   * Description
   * 백테스트 설명
   */
  description: string;
  /**
   * 백테스트 설정
   */
  config: BacktestConfig;
  /**
   * 실행 상태
   */
  status: BacktestStatus;
  /**
   * Start Time
   * 실행 시작 시간
   */
  start_time?: Date | null;
  /**
   * End Time
   * 실행 종료 시간
   */
  end_time?: Date | null;
  /**
   * Duration Seconds
   * 실행 시간(초)
   */
  duration_seconds?: number | null;
  /**
   * 성과 지표
   */
  performance?: PerformanceMetrics | null;
  /**
   * Created At
   * 생성 시간
   */
  created_at: Date;
  /**
   * Updated At
   * 수정 시간
   */
  updated_at?: Date | null;
};

/**
 * BacktestResultListResponse
 * 백테스트 결과 목록 응답
 */
export type BacktestResultListResponse = {
  /**
   * Results
   * 결과 목록
   */
  results: Array<BacktestResultResponse>;
  /**
   * Total
   * 총 개수
   */
  total: number;
};

/**
 * BacktestResultResponse
 * 백테스트 결과 응답
 */
export type BacktestResultResponse = {
  /**
   * Id
   * 결과 ID
   */
  id: string;
  /**
   * Backtest Id
   * 백테스트 ID
   */
  backtest_id: string;
  /**
   * Execution Id
   * 실행 ID
   */
  execution_id: string;
  /**
   * Total Return
   * 총 수익률
   */
  total_return: number;
  /**
   * Annualized Return
   * 연환산 수익률
   */
  annualized_return: number;
  /**
   * Volatility
   * 변동성
   */
  volatility: number;
  /**
   * Sharpe Ratio
   * 샤프 비율
   */
  sharpe_ratio: number;
  /**
   * Max Drawdown
   * 최대 낙폭
   */
  max_drawdown: number;
  /**
   * Calmar Ratio
   * 칼마 비율
   */
  calmar_ratio?: number | null;
  /**
   * Sortino Ratio
   * 소르티노 비율
   */
  sortino_ratio?: number | null;
  /**
   * Benchmark Return
   * 벤치마크 수익률
   */
  benchmark_return?: number | null;
  /**
   * Alpha
   * 알파
   */
  alpha?: number | null;
  /**
   * Beta
   * 베타
   */
  beta?: number | null;
  /**
   * Total Trades
   * 총 거래 수
   */
  total_trades: number;
  /**
   * Winning Trades
   * 승리 거래 수
   */
  winning_trades: number;
  /**
   * Losing Trades
   * 패배 거래 수
   */
  losing_trades: number;
  /**
   * Win Rate
   * 승률
   */
  win_rate: number;
  /**
   * Portfolio History Path
   * 포트폴리오 히스토리 파일 경로
   */
  portfolio_history_path?: string | null;
  /**
   * Trades History Path
   * 거래 히스토리 파일 경로
   */
  trades_history_path?: string | null;
  /**
   * Created At
   * 생성 시간
   */
  created_at: Date;
};

/**
 * BacktestStatus
 * 백테스트 상태
 */
export type BacktestStatus =
  | "pending"
  | "running"
  | "completed"
  | "failed"
  | "cancelled";

/**
 * BacktestUpdateRequest
 * 백테스트 수정 요청
 */
export type BacktestUpdateRequest = {
  /**
   * Name
   * 백테스트 이름
   */
  name?: string | null;
  /**
   * Description
   * 백테스트 설명
   */
  description?: string | null;
  /**
   * 백테스트 설정
   */
  config?: BacktestConfig | null;
};

/**
 * BulkDataRequest
 * Request model for bulk data operations
 */
export type BulkDataRequest = {
  /**
   * Symbols
   * List of symbols
   */
  symbols: Array<string>;
  /**
   * Start Date
   * Start date
   */
  start_date: Date;
  /**
   * End Date
   * End date
   */
  end_date: Date;
  /**
   * Interval
   * Data interval
   */
  interval?: string;
};

/**
 * DataQualityResponse
 * Response model for data quality metrics
 */
export type DataQualityResponse = {
  /**
   * Symbol
   */
  symbol: string;
  /**
   * Date Range Start
   */
  date_range_start: Date;
  /**
   * Date Range End
   */
  date_range_end: Date;
  /**
   * Total Records
   */
  total_records: number;
  /**
   * Missing Days
   */
  missing_days: number;
  /**
   * Duplicate Records
   */
  duplicate_records: number;
  /**
   * Price Anomalies
   */
  price_anomalies: number;
  /**
   * Quality Score
   */
  quality_score: number;
  /**
   * Analyzed At
   */
  analyzed_at: Date;
};

/**
 * DataRequestStatus
 * Response model for data request status
 */
export type DataRequestStatus = {
  /**
   * Id
   */
  id: string;
  /**
   * Symbol
   */
  symbol: string;
  /**
   * Start Date
   */
  start_date: Date;
  /**
   * End Date
   */
  end_date: Date;
  /**
   * Status
   */
  status: string;
  /**
   * Error Message
   */
  error_message?: string | null;
  /**
   * Records Count
   */
  records_count?: number | null;
  /**
   * Requested At
   */
  requested_at: Date;
  /**
   * Completed At
   */
  completed_at?: Date | null;
};

/**
 * ExecutionListResponse
 * Execution list response
 */
export type ExecutionListResponse = {
  /**
   * Executions
   * 실행 목록
   */
  executions: Array<ExecutionResponse>;
  /**
   * Total
   * 총 개수
   */
  total: number;
};

/**
 * ExecutionResponse
 * Execution response
 */
export type ExecutionResponse = {
  /**
   * Id
   * 실행 ID
   */
  id: string;
  /**
   * Strategy Id
   * 전략 ID
   */
  strategy_id: string;
  /**
   * Strategy Name
   * 전략 이름
   */
  strategy_name: string;
  /**
   * Symbol
   * 심볼
   */
  symbol: string;
  signal_type: SignalType;
  /**
   * Signal Strength
   * 신호 강도
   */
  signal_strength: number;
  /**
   * Price
   * 가격
   */
  price: number;
  /**
   * Timestamp
   * 실행 시간
   */
  timestamp: Date;
  /**
   * Metadata
   * 메타데이터
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * Backtest Id
   * 백테스트 ID
   */
  backtest_id?: string | null;
  /**
   * Created At
   * 생성 시간
   */
  created_at: Date;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * HealthCheckResponse
 * Health check response model
 */
export type HealthCheckResponse = {
  /**
   * Status
   */
  status: string;
  /**
   * Timestamp
   */
  timestamp: Date;
  /**
   * Database Connected
   */
  database_connected: boolean;
  /**
   * Alpha Vantage Available
   */
  alpha_vantage_available: boolean;
  /**
   * Total Symbols
   */
  total_symbols: number;
  /**
   * Last Update
   */
  last_update?: Date | null;
};

/**
 * HealthResponse
 * Health check response model.
 */
export type HealthResponse = {
  /**
   * Status
   */
  status: string;
  /**
   * Timestamp
   */
  timestamp: Date;
  /**
   * Service
   */
  service: string;
  /**
   * Version
   */
  version: string;
  /**
   * Uptime
   */
  uptime: number;
  /**
   * Checks
   */
  checks: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
};

/**
 * IntegratedBacktestRequest
 * 통합 백테스트 요청
 */
export type IntegratedBacktestRequest = {
  /**
   * Name
   * 백테스트 이름
   */
  name: string;
  /**
   * Description
   * 백테스트 설명
   */
  description?: string;
  /**
   * Symbols
   * 심볼 목록
   */
  symbols: Array<string>;
  /**
   * Start Date
   * 시작일
   */
  start_date: Date;
  /**
   * End Date
   * 종료일
   */
  end_date: Date;
  /**
   * Strategy Type
   * 전략 타입
   */
  strategy_type: string;
  /**
   * Strategy Params
   * 전략 매개변수
   */
  strategy_params?: {
    [key: string]: unknown;
  };
  /**
   * Initial Capital
   * 초기 자본
   */
  initial_capital?: number;
};

/**
 * IntegratedBacktestResponse
 * 통합 백테스트 응답
 */
export type IntegratedBacktestResponse = {
  /**
   * Backtest Id
   * 백테스트 ID
   */
  backtest_id: string;
  /**
   * Execution Id
   * 실행 ID
   */
  execution_id?: string | null;
  /**
   * Result Id
   * 결과 ID
   */
  result_id?: string | null;
  /**
   * 상태
   */
  status: BacktestStatus;
  /**
   * Message
   * 메시지
   */
  message: string;
  /**
   * 성과 지표
   */
  performance?: PerformanceMetrics | null;
  /**
   * Start Time
   * 시작 시간
   */
  start_time?: Date | null;
  /**
   * End Time
   * 종료 시간
   */
  end_time?: Date | null;
};

/**
 * MarketDataResponse
 * Response model for market data
 */
export type MarketDataResponse = {
  /**
   * Symbol
   */
  symbol: string;
  /**
   * Date
   */
  date: Date;
  /**
   * Open
   */
  open: number;
  /**
   * High
   */
  high: number;
  /**
   * Low
   */
  low: number;
  /**
   * Close
   */
  close: number;
  /**
   * Volume
   */
  volume: number;
  /**
   * Adjusted Close
   */
  adjusted_close?: number | null;
  /**
   * Dividend Amount
   */
  dividend_amount?: number | null;
  /**
   * Split Coefficient
   */
  split_coefficient?: number | null;
};

/**
 * OrderType
 * 주문 타입
 */
export type OrderType = "MARKET" | "LIMIT" | "STOP" | "STOP_LIMIT";

/**
 * PerformanceMetrics
 * 성과 지표 내장 모델
 */
export type PerformanceMetrics = {
  /**
   * Total Return
   * 총 수익률
   */
  total_return: number;
  /**
   * Annualized Return
   * 연환산 수익률
   */
  annualized_return: number;
  /**
   * Volatility
   * 변동성
   */
  volatility: number;
  /**
   * Sharpe Ratio
   * 샤프 비율
   */
  sharpe_ratio: number;
  /**
   * Max Drawdown
   * 최대 낙폭
   */
  max_drawdown: number;
  /**
   * Total Trades
   * 총 거래 수
   */
  total_trades: number;
  /**
   * Winning Trades
   * 승리 거래 수
   */
  winning_trades: number;
  /**
   * Losing Trades
   * 패배 거래 수
   */
  losing_trades: number;
  /**
   * Win Rate
   * 승률
   */
  win_rate: number;
};

/**
 * PerformanceResponse
 * Performance response
 */
export type PerformanceResponse = {
  /**
   * Id
   * 성과 ID
   */
  id: string;
  /**
   * Strategy Id
   * 전략 ID
   */
  strategy_id: string;
  /**
   * Strategy Name
   * 전략 이름
   */
  strategy_name: string;
  /**
   * Total Signals
   * 총 신호 수
   */
  total_signals: number;
  /**
   * Buy Signals
   * 매수 신호 수
   */
  buy_signals: number;
  /**
   * Sell Signals
   * 매도 신호 수
   */
  sell_signals: number;
  /**
   * Hold Signals
   * 보유 신호 수
   */
  hold_signals: number;
  /**
   * Total Return
   * 총 수익률
   */
  total_return?: number | null;
  /**
   * Win Rate
   * 승률
   */
  win_rate?: number | null;
  /**
   * Avg Return Per Trade
   * 거래당 평균 수익률
   */
  avg_return_per_trade?: number | null;
  /**
   * Max Drawdown
   * 최대 낙폭
   */
  max_drawdown?: number | null;
  /**
   * Sharpe Ratio
   * 샤프 비율
   */
  sharpe_ratio?: number | null;
  /**
   * Calmar Ratio
   * 칼마 비율
   */
  calmar_ratio?: number | null;
  /**
   * Volatility
   * 변동성
   */
  volatility?: number | null;
  /**
   * Start Date
   * 시작일
   */
  start_date?: Date | null;
  /**
   * End Date
   * 종료일
   */
  end_date?: Date | null;
  /**
   * Accuracy
   * 정확도
   */
  accuracy?: number | null;
  /**
   * Avg Signal Strength
   * 평균 신호 강도
   */
  avg_signal_strength?: number | null;
  /**
   * Created At
   * 생성 시간
   */
  created_at: Date;
  /**
   * Updated At
   * 수정 시간
   */
  updated_at: Date;
};

/**
 * Position
 * 포지션 정보 내장 모델
 */
export type Position = {
  /**
   * Symbol
   * 심볼
   */
  symbol: string;
  /**
   * Quantity
   * 보유 수량
   */
  quantity: number;
  /**
   * Avg Price
   * 평균 단가
   */
  avg_price: number;
  /**
   * Current Price
   * 현재 가격
   */
  current_price: number;
  /**
   * Unrealized Pnl
   * 미실현 손익
   */
  unrealized_pnl: number;
  /**
   * Realized Pnl
   * 실현 손익
   */
  realized_pnl?: number;
  /**
   * First Buy Date
   * 최초 매수일
   */
  first_buy_date: Date;
  /**
   * Last Update
   * 마지막 업데이트
   */
  last_update?: Date;
};

/**
 * SignalType
 * 신호 타입
 */
export type SignalType = "BUY" | "SELL" | "HOLD";

/**
 * StrategyCreateRequest
 * Strategy creation request
 */
export type StrategyCreateRequest = {
  /**
   * Name
   * 전략 이름
   */
  name: string;
  /**
   * 전략 타입
   */
  strategy_type: StrategyType;
  /**
   * Description
   * 전략 설명
   */
  description?: string | null;
  /**
   * Parameters
   * 전략 파라미터
   */
  parameters?: {
    [key: string]: unknown;
  };
  /**
   * Tags
   * 태그
   */
  tags?: Array<string>;
};

/**
 * StrategyExecuteRequest
 * Strategy execution request
 */
export type StrategyExecuteRequest = {
  /**
   * Symbol
   * 대상 심볼
   */
  symbol: string;
  /**
   * Market Data
   * 시장 데이터
   */
  market_data: {
    [key: string]: unknown;
  };
};

/**
 * StrategyFromTemplateRequest
 * Create strategy from template request
 */
export type StrategyFromTemplateRequest = {
  /**
   * Name
   * 전략 이름
   */
  name: string;
  /**
   * Parameter Overrides
   * 파라미터 오버라이드
   */
  parameter_overrides?: {
    [key: string]: unknown | null;
  };
};

/**
 * StrategyListResponse
 * Strategy list response
 */
export type StrategyListResponse = {
  /**
   * Strategies
   * 전략 목록
   */
  strategies: Array<StrategyResponse>;
  /**
   * Total
   * 총 개수
   */
  total: number;
};

/**
 * StrategyResponse
 * Strategy response
 */
export type StrategyResponse = {
  /**
   * Id
   * 전략 ID
   */
  id: string;
  /**
   * Name
   * 전략 이름
   */
  name: string;
  /**
   * 전략 타입
   */
  strategy_type: StrategyType;
  /**
   * Description
   * 전략 설명
   */
  description?: string | null;
  /**
   * Parameters
   * 전략 파라미터
   */
  parameters?: {
    [key: string]: unknown;
  };
  /**
   * Is Active
   * 활성화 상태
   */
  is_active: boolean;
  /**
   * Is Template
   * 템플릿 여부
   */
  is_template: boolean;
  /**
   * Created By
   * 생성자
   */
  created_by?: string | null;
  /**
   * Created At
   * 생성 시간
   */
  created_at: Date;
  /**
   * Updated At
   * 수정 시간
   */
  updated_at: Date;
  /**
   * Tags
   * 태그
   */
  tags?: Array<string>;
};

/**
 * StrategyType
 * 지원되는 전략 타입
 */
export type StrategyType =
  | "sma_crossover"
  | "rsi_mean_reversion"
  | "momentum"
  | "buy_and_hold";

/**
 * StrategyUpdateRequest
 * Strategy update request
 */
export type StrategyUpdateRequest = {
  /**
   * Name
   * 전략 이름
   */
  name?: string | null;
  /**
   * Description
   * 전략 설명
   */
  description?: string | null;
  /**
   * Parameters
   * 전략 파라미터
   */
  parameters?: {
    [key: string]: unknown | null;
  };
  /**
   * Is Active
   * 활성화 상태
   */
  is_active?: boolean | null;
  /**
   * Tags
   * 태그
   */
  tags?: Array<string | null>;
};

/**
 * TemplateCreateRequest
 * Template creation request
 */
export type TemplateCreateRequest = {
  /**
   * Name
   * 템플릿 이름
   */
  name: string;
  /**
   * 전략 타입
   */
  strategy_type: StrategyType;
  /**
   * Description
   * 템플릿 설명
   */
  description: string;
  /**
   * Default Parameters
   * 기본 파라미터
   */
  default_parameters?: {
    [key: string]: unknown;
  };
  /**
   * Parameter Schema
   * 파라미터 스키마
   */
  parameter_schema?: {
    [key: string]: unknown | null;
  };
  /**
   * Tags
   * 태그
   */
  tags?: Array<string>;
};

/**
 * TemplateListResponse
 * Template list response
 */
export type TemplateListResponse = {
  /**
   * Templates
   * 템플릿 목록
   */
  templates: Array<TemplateResponse>;
  /**
   * Total
   * 총 개수
   */
  total: number;
};

/**
 * TemplateResponse
 * Template response
 */
export type TemplateResponse = {
  /**
   * Id
   * 템플릿 ID
   */
  id: string;
  /**
   * Name
   * 템플릿 이름
   */
  name: string;
  /**
   * 전략 타입
   */
  strategy_type: StrategyType;
  /**
   * Description
   * 템플릿 설명
   */
  description: string;
  /**
   * Default Parameters
   * 기본 파라미터
   */
  default_parameters?: {
    [key: string]: unknown;
  };
  /**
   * Parameter Schema
   * 파라미터 스키마
   */
  parameter_schema?: {
    [key: string]: unknown | null;
  };
  /**
   * Usage Count
   * 사용 횟수
   */
  usage_count: number;
  /**
   * Created At
   * 생성 시간
   */
  created_at: Date;
  /**
   * Updated At
   * 수정 시간
   */
  updated_at: Date;
  /**
   * Tags
   * 태그
   */
  tags?: Array<string>;
};

/**
 * Trade
 * 거래 기록 내장 모델
 */
export type Trade = {
  /**
   * Trade Id
   * 거래 ID
   */
  trade_id: string;
  /**
   * Symbol
   * 심볼
   */
  symbol: string;
  trade_type: TradeType;
  order_type?: OrderType;
  /**
   * Quantity
   * 수량
   */
  quantity: number;
  /**
   * Price
   * 체결 가격
   */
  price: number;
  /**
   * Timestamp
   * 거래 시간
   */
  timestamp: Date;
  /**
   * Commission
   * 수수료
   */
  commission?: number;
  /**
   * Slippage
   * 슬리피지
   */
  slippage?: number;
  /**
   * Strategy Signal Id
   * 전략 신호 ID
   */
  strategy_signal_id?: string | null;
  /**
   * Notes
   * 메모
   */
  notes?: string | null;
};

/**
 * TradeType
 * 거래 타입
 */
export type TradeType = "BUY" | "SELL";

/**
 * UpdateRequest
 * Update request model
 */
export type UpdateRequest = {
  /**
   * Symbols
   */
  symbols?: Array<string> | null;
  /**
   * Start Date
   */
  start_date?: Date | null;
  /**
   * End Date
   */
  end_date?: Date | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

/**
 * WatchlistCreate
 * Watchlist creation model
 */
export type WatchlistCreate = {
  /**
   * Name
   */
  name: string;
  /**
   * Symbols
   */
  symbols: Array<string>;
  /**
   * Description
   */
  description?: string;
};

/**
 * WatchlistUpdate
 * Watchlist update model
 */
export type WatchlistUpdate = {
  /**
   * Symbols
   */
  symbols: Array<string>;
  /**
   * Name
   */
  name?: string | null;
  /**
   * Description
   */
  description?: string | null;
};

export type HealthHealthCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health/";
};

export type HealthHealthCheckResponses = {
  /**
   * Successful Response
   */
  200: HealthResponse;
};

export type HealthHealthCheckResponse =
  HealthHealthCheckResponses[keyof HealthHealthCheckResponses];

export type HealthLivenessProbeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health/live";
};

export type HealthLivenessProbeResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type HealthReadinessProbeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health/ready";
};

export type HealthReadinessProbeResponses = {
  /**
   * Response Health-Readiness Probe
   * Successful Response
   */
  200: {
    [key: string]: unknown;
  };
};

export type HealthReadinessProbeResponse =
  HealthReadinessProbeResponses[keyof HealthReadinessProbeResponses];

export type MarketDataGetAvailableSymbolsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/market-data/symbols";
};

export type MarketDataGetAvailableSymbolsResponses = {
  /**
   * Response Market Data-Get Available Symbols
   * Successful Response
   */
  200: Array<string>;
};

export type MarketDataGetAvailableSymbolsResponse =
  MarketDataGetAvailableSymbolsResponses[keyof MarketDataGetAvailableSymbolsResponses];

export type MarketDataGetMarketDataData = {
  body?: never;
  path: {
    /**
     * Symbol
     */
    symbol: string;
  };
  query: {
    /**
     * Start Date
     * Start date (YYYY-MM-DD)
     */
    start_date: Date;
    /**
     * End Date
     * End date (YYYY-MM-DD)
     */
    end_date: Date;
    /**
     * Force Refresh
     * Force refresh from external API
     */
    force_refresh?: boolean;
  };
  url: "/api/v1/market-data/data/{symbol}";
};

export type MarketDataGetMarketDataErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MarketDataGetMarketDataError =
  MarketDataGetMarketDataErrors[keyof MarketDataGetMarketDataErrors];

export type MarketDataGetMarketDataResponses = {
  /**
   * Response Market Data-Get Market Data
   * Successful Response
   */
  200: Array<MarketDataResponse>;
};

export type MarketDataGetMarketDataResponse =
  MarketDataGetMarketDataResponses[keyof MarketDataGetMarketDataResponses];

export type MarketDataRequestBulkDataData = {
  body: BulkDataRequest;
  path?: never;
  query?: never;
  url: "/api/v1/market-data/data/bulk";
};

export type MarketDataRequestBulkDataErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MarketDataRequestBulkDataError =
  MarketDataRequestBulkDataErrors[keyof MarketDataRequestBulkDataErrors];

export type MarketDataRequestBulkDataResponses = {
  /**
   * Response Market Data-Request Bulk Data
   * Successful Response
   */
  200: Array<DataRequestStatus>;
};

export type MarketDataRequestBulkDataResponse =
  MarketDataRequestBulkDataResponses[keyof MarketDataRequestBulkDataResponses];

export type MarketDataGetDataCoverageData = {
  body?: never;
  path: {
    /**
     * Symbol
     */
    symbol: string;
  };
  query?: never;
  url: "/api/v1/market-data/coverage/{symbol}";
};

export type MarketDataGetDataCoverageErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MarketDataGetDataCoverageError =
  MarketDataGetDataCoverageErrors[keyof MarketDataGetDataCoverageErrors];

export type MarketDataGetDataCoverageResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type MarketDataAnalyzeDataQualityData = {
  body?: never;
  path: {
    /**
     * Symbol
     */
    symbol: string;
  };
  query: {
    /**
     * Start Date
     * Start date (YYYY-MM-DD)
     */
    start_date: Date;
    /**
     * End Date
     * End date (YYYY-MM-DD)
     */
    end_date: Date;
  };
  url: "/api/v1/market-data/quality/{symbol}";
};

export type MarketDataAnalyzeDataQualityErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MarketDataAnalyzeDataQualityError =
  MarketDataAnalyzeDataQualityErrors[keyof MarketDataAnalyzeDataQualityErrors];

export type MarketDataAnalyzeDataQualityResponses = {
  /**
   * Successful Response
   */
  200: DataQualityResponse;
};

export type MarketDataAnalyzeDataQualityResponse =
  MarketDataAnalyzeDataQualityResponses[keyof MarketDataAnalyzeDataQualityResponses];

export type PipelineStatusGetPipelineStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/pipeline/status";
};

export type PipelineStatusGetPipelineStatusResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type PipelineStatusSetupDefaultSymbolsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/pipeline/setup-defaults";
};

export type PipelineStatusSetupDefaultSymbolsResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type PipelineStatusRunPipelineUpdateData = {
  body: UpdateRequest;
  path?: never;
  query?: never;
  url: "/api/v1/pipeline/update";
};

export type PipelineStatusRunPipelineUpdateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PipelineStatusRunPipelineUpdateError =
  PipelineStatusRunPipelineUpdateErrors[keyof PipelineStatusRunPipelineUpdateErrors];

export type PipelineStatusRunPipelineUpdateResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type CompanyDataCollectStockInfoData = {
  body?: never;
  path: {
    /**
     * Symbol
     */
    symbol: string;
  };
  query?: never;
  url: "/api/v1/pipeline/collect-info/{symbol}";
};

export type CompanyDataCollectStockInfoErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CompanyDataCollectStockInfoError =
  CompanyDataCollectStockInfoErrors[keyof CompanyDataCollectStockInfoErrors];

export type CompanyDataCollectStockInfoResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type CompanyDataCollectDailyDataData = {
  body?: never;
  path: {
    /**
     * Symbol
     */
    symbol: string;
  };
  query?: {
    /**
     * Start Date
     */
    start_date?: Date | null;
    /**
     * End Date
     */
    end_date?: Date | null;
  };
  url: "/api/v1/pipeline/collect-data/{symbol}";
};

export type CompanyDataCollectDailyDataErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CompanyDataCollectDailyDataError =
  CompanyDataCollectDailyDataErrors[keyof CompanyDataCollectDailyDataErrors];

export type CompanyDataCollectDailyDataResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type CompanyDataGetSymbolCoverageData = {
  body?: never;
  path: {
    /**
     * Symbol
     */
    symbol: string;
  };
  query?: never;
  url: "/api/v1/pipeline/coverage/{symbol}";
};

export type CompanyDataGetSymbolCoverageErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CompanyDataGetSymbolCoverageError =
  CompanyDataGetSymbolCoverageErrors[keyof CompanyDataGetSymbolCoverageErrors];

export type CompanyDataGetSymbolCoverageResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type CompanyDataGetCompanyInfoData = {
  body?: never;
  path: {
    /**
     * Symbol
     */
    symbol: string;
  };
  query?: never;
  url: "/api/v1/pipeline/company/{symbol}";
};

export type CompanyDataGetCompanyInfoErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CompanyDataGetCompanyInfoError =
  CompanyDataGetCompanyInfoErrors[keyof CompanyDataGetCompanyInfoErrors];

export type CompanyDataGetCompanyInfoResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type CompanyDataGetAllCompaniesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/pipeline/companies";
};

export type CompanyDataGetAllCompaniesResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type WatchlistManagementUpdateWatchlistData = {
  body: WatchlistUpdate;
  path?: never;
  query?: never;
  url: "/api/v1/pipeline/watchlist";
};

export type WatchlistManagementUpdateWatchlistErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type WatchlistManagementUpdateWatchlistError =
  WatchlistManagementUpdateWatchlistErrors[keyof WatchlistManagementUpdateWatchlistErrors];

export type WatchlistManagementUpdateWatchlistResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type WatchlistManagementListWatchlistsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/pipeline/watchlists";
};

export type WatchlistManagementListWatchlistsResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type WatchlistManagementCreateWatchlistData = {
  body: WatchlistCreate;
  path?: never;
  query?: never;
  url: "/api/v1/pipeline/watchlists";
};

export type WatchlistManagementCreateWatchlistErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type WatchlistManagementCreateWatchlistError =
  WatchlistManagementCreateWatchlistErrors[keyof WatchlistManagementCreateWatchlistErrors];

export type WatchlistManagementCreateWatchlistResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type WatchlistManagementDeleteWatchlistData = {
  body?: never;
  path: {
    /**
     * Name
     */
    name: string;
  };
  query?: never;
  url: "/api/v1/pipeline/watchlists/{name}";
};

export type WatchlistManagementDeleteWatchlistErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type WatchlistManagementDeleteWatchlistError =
  WatchlistManagementDeleteWatchlistErrors[keyof WatchlistManagementDeleteWatchlistErrors];

export type WatchlistManagementDeleteWatchlistResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type WatchlistManagementGetWatchlistData = {
  body?: never;
  path: {
    /**
     * Name
     */
    name: string;
  };
  query?: never;
  url: "/api/v1/pipeline/watchlists/{name}";
};

export type WatchlistManagementGetWatchlistErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type WatchlistManagementGetWatchlistError =
  WatchlistManagementGetWatchlistErrors[keyof WatchlistManagementGetWatchlistErrors];

export type WatchlistManagementGetWatchlistResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type WatchlistManagementUpdateWatchlistByNameData = {
  body: WatchlistUpdate;
  path: {
    /**
     * Name
     */
    name: string;
  };
  query?: never;
  url: "/api/v1/pipeline/watchlists/{name}";
};

export type WatchlistManagementUpdateWatchlistByNameErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type WatchlistManagementUpdateWatchlistByNameError =
  WatchlistManagementUpdateWatchlistByNameErrors[keyof WatchlistManagementUpdateWatchlistByNameErrors];

export type WatchlistManagementUpdateWatchlistByNameResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type HealthHealthCheck2Data = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/health/";
};

export type HealthHealthCheck2Responses = {
  /**
   * Successful Response
   */
  200: HealthCheckResponse;
};

export type HealthHealthCheck2Response =
  HealthHealthCheck2Responses[keyof HealthHealthCheck2Responses];

export type BacktestsGetBacktestsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Status
     * 실행 상태 필터
     */
    status?: BacktestStatus | null;
    /**
     * Skip
     * 건너뛸 개수
     */
    skip?: number;
    /**
     * Limit
     * 조회할 개수
     */
    limit?: number;
  };
  url: "/api/v1/backtests/";
};

export type BacktestsGetBacktestsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsGetBacktestsError =
  BacktestsGetBacktestsErrors[keyof BacktestsGetBacktestsErrors];

export type BacktestsGetBacktestsResponses = {
  /**
   * Successful Response
   */
  200: BacktestListResponse;
};

export type BacktestsGetBacktestsResponse =
  BacktestsGetBacktestsResponses[keyof BacktestsGetBacktestsResponses];

export type BacktestsCreateBacktestData = {
  body: BacktestCreateRequest;
  path?: never;
  query?: never;
  url: "/api/v1/backtests/";
};

export type BacktestsCreateBacktestErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsCreateBacktestError =
  BacktestsCreateBacktestErrors[keyof BacktestsCreateBacktestErrors];

export type BacktestsCreateBacktestResponses = {
  /**
   * Successful Response
   */
  200: BacktestResponse;
};

export type BacktestsCreateBacktestResponse =
  BacktestsCreateBacktestResponses[keyof BacktestsCreateBacktestResponses];

export type BacktestsDeleteBacktestData = {
  body?: never;
  path: {
    /**
     * Backtest Id
     */
    backtest_id: string;
  };
  query?: never;
  url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsDeleteBacktestErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsDeleteBacktestError =
  BacktestsDeleteBacktestErrors[keyof BacktestsDeleteBacktestErrors];

export type BacktestsDeleteBacktestResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type BacktestsGetBacktestData = {
  body?: never;
  path: {
    /**
     * Backtest Id
     */
    backtest_id: string;
  };
  query?: never;
  url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsGetBacktestErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsGetBacktestError =
  BacktestsGetBacktestErrors[keyof BacktestsGetBacktestErrors];

export type BacktestsGetBacktestResponses = {
  /**
   * Successful Response
   */
  200: BacktestResponse;
};

export type BacktestsGetBacktestResponse =
  BacktestsGetBacktestResponses[keyof BacktestsGetBacktestResponses];

export type BacktestsUpdateBacktestData = {
  body: BacktestUpdateRequest;
  path: {
    /**
     * Backtest Id
     */
    backtest_id: string;
  };
  query?: never;
  url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsUpdateBacktestErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsUpdateBacktestError =
  BacktestsUpdateBacktestErrors[keyof BacktestsUpdateBacktestErrors];

export type BacktestsUpdateBacktestResponses = {
  /**
   * Successful Response
   */
  200: BacktestResponse;
};

export type BacktestsUpdateBacktestResponse =
  BacktestsUpdateBacktestResponses[keyof BacktestsUpdateBacktestResponses];

export type BacktestsExecuteBacktestData = {
  body: BacktestExecutionRequest;
  path: {
    /**
     * Backtest Id
     */
    backtest_id: string;
  };
  query?: never;
  url: "/api/v1/backtests/{backtest_id}/execute";
};

export type BacktestsExecuteBacktestErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsExecuteBacktestError =
  BacktestsExecuteBacktestErrors[keyof BacktestsExecuteBacktestErrors];

export type BacktestsExecuteBacktestResponses = {
  /**
   * Successful Response
   */
  200: BacktestExecutionResponse;
};

export type BacktestsExecuteBacktestResponse =
  BacktestsExecuteBacktestResponses[keyof BacktestsExecuteBacktestResponses];

export type BacktestsGetBacktestExecutionsData = {
  body?: never;
  path: {
    /**
     * Backtest Id
     */
    backtest_id: string;
  };
  query?: {
    /**
     * Skip
     * 건너뛸 개수
     */
    skip?: number;
    /**
     * Limit
     * 조회할 개수
     */
    limit?: number;
  };
  url: "/api/v1/backtests/{backtest_id}/executions";
};

export type BacktestsGetBacktestExecutionsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsGetBacktestExecutionsError =
  BacktestsGetBacktestExecutionsErrors[keyof BacktestsGetBacktestExecutionsErrors];

export type BacktestsGetBacktestExecutionsResponses = {
  /**
   * Successful Response
   */
  200: BacktestExecutionListResponse;
};

export type BacktestsGetBacktestExecutionsResponse =
  BacktestsGetBacktestExecutionsResponses[keyof BacktestsGetBacktestExecutionsResponses];

export type BacktestsGetBacktestResultsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Backtest Id
     * 백테스트 ID 필터
     */
    backtest_id?: string | null;
    /**
     * Execution Id
     * 실행 ID 필터
     */
    execution_id?: string | null;
    /**
     * Skip
     * 건너뛸 개수
     */
    skip?: number;
    /**
     * Limit
     * 조회할 개수
     */
    limit?: number;
  };
  url: "/api/v1/backtests/results/";
};

export type BacktestsGetBacktestResultsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsGetBacktestResultsError =
  BacktestsGetBacktestResultsErrors[keyof BacktestsGetBacktestResultsErrors];

export type BacktestsGetBacktestResultsResponses = {
  /**
   * Successful Response
   */
  200: BacktestResultListResponse;
};

export type BacktestsGetBacktestResultsResponse =
  BacktestsGetBacktestResultsResponses[keyof BacktestsGetBacktestResultsResponses];

export type BacktestsCreateAndRunIntegratedBacktestData = {
  body: IntegratedBacktestRequest;
  path?: never;
  query?: never;
  url: "/api/v1/backtests/integrated";
};

export type BacktestsCreateAndRunIntegratedBacktestErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BacktestsCreateAndRunIntegratedBacktestError =
  BacktestsCreateAndRunIntegratedBacktestErrors[keyof BacktestsCreateAndRunIntegratedBacktestErrors];

export type BacktestsCreateAndRunIntegratedBacktestResponses = {
  /**
   * Successful Response
   */
  200: IntegratedBacktestResponse;
};

export type BacktestsCreateAndRunIntegratedBacktestResponse =
  BacktestsCreateAndRunIntegratedBacktestResponses[keyof BacktestsCreateAndRunIntegratedBacktestResponses];

export type BacktestsTestServiceIntegrationData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/backtests/test-services";
};

export type BacktestsTestServiceIntegrationResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type StrategiesGetStrategiesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Strategy Type
     * 전략 타입 필터
     */
    strategy_type?: StrategyType | null;
    /**
     * Is Active
     * 활성화 상태 필터
     */
    is_active?: boolean | null;
    /**
     * Is Template
     * 템플릿 여부 필터
     */
    is_template?: boolean | null;
    /**
     * Limit
     * 결과 수 제한
     */
    limit?: number;
  };
  url: "/api/v1/strategies/";
};

export type StrategiesGetStrategiesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesGetStrategiesError =
  StrategiesGetStrategiesErrors[keyof StrategiesGetStrategiesErrors];

export type StrategiesGetStrategiesResponses = {
  /**
   * Successful Response
   */
  200: StrategyListResponse;
};

export type StrategiesGetStrategiesResponse =
  StrategiesGetStrategiesResponses[keyof StrategiesGetStrategiesResponses];

export type StrategiesCreateStrategyData = {
  body: StrategyCreateRequest;
  path?: never;
  query?: never;
  url: "/api/v1/strategies/";
};

export type StrategiesCreateStrategyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesCreateStrategyError =
  StrategiesCreateStrategyErrors[keyof StrategiesCreateStrategyErrors];

export type StrategiesCreateStrategyResponses = {
  /**
   * Successful Response
   */
  200: StrategyResponse;
};

export type StrategiesCreateStrategyResponse =
  StrategiesCreateStrategyResponses[keyof StrategiesCreateStrategyResponses];

export type StrategiesDeleteStrategyData = {
  body?: never;
  path: {
    /**
     * Strategy Id
     */
    strategy_id: string;
  };
  query?: never;
  url: "/api/v1/strategies/{strategy_id}";
};

export type StrategiesDeleteStrategyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesDeleteStrategyError =
  StrategiesDeleteStrategyErrors[keyof StrategiesDeleteStrategyErrors];

export type StrategiesDeleteStrategyResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type StrategiesGetStrategyData = {
  body?: never;
  path: {
    /**
     * Strategy Id
     */
    strategy_id: string;
  };
  query?: never;
  url: "/api/v1/strategies/{strategy_id}";
};

export type StrategiesGetStrategyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesGetStrategyError =
  StrategiesGetStrategyErrors[keyof StrategiesGetStrategyErrors];

export type StrategiesGetStrategyResponses = {
  /**
   * Successful Response
   */
  200: StrategyResponse;
};

export type StrategiesGetStrategyResponse =
  StrategiesGetStrategyResponses[keyof StrategiesGetStrategyResponses];

export type StrategiesUpdateStrategyData = {
  body: StrategyUpdateRequest;
  path: {
    /**
     * Strategy Id
     */
    strategy_id: string;
  };
  query?: never;
  url: "/api/v1/strategies/{strategy_id}";
};

export type StrategiesUpdateStrategyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesUpdateStrategyError =
  StrategiesUpdateStrategyErrors[keyof StrategiesUpdateStrategyErrors];

export type StrategiesUpdateStrategyResponses = {
  /**
   * Successful Response
   */
  200: StrategyResponse;
};

export type StrategiesUpdateStrategyResponse =
  StrategiesUpdateStrategyResponses[keyof StrategiesUpdateStrategyResponses];

export type StrategiesExecuteStrategyData = {
  body: StrategyExecuteRequest;
  path: {
    /**
     * Strategy Id
     */
    strategy_id: string;
  };
  query?: never;
  url: "/api/v1/strategies/{strategy_id}/execute";
};

export type StrategiesExecuteStrategyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesExecuteStrategyError =
  StrategiesExecuteStrategyErrors[keyof StrategiesExecuteStrategyErrors];

export type StrategiesExecuteStrategyResponses = {
  /**
   * Successful Response
   */
  200: ExecutionResponse;
};

export type StrategiesExecuteStrategyResponse =
  StrategiesExecuteStrategyResponses[keyof StrategiesExecuteStrategyResponses];

export type StrategiesGetStrategyExecutionsData = {
  body?: never;
  path: {
    /**
     * Strategy Id
     */
    strategy_id: string;
  };
  query?: {
    /**
     * Limit
     * 결과 수 제한
     */
    limit?: number;
  };
  url: "/api/v1/strategies/{strategy_id}/executions";
};

export type StrategiesGetStrategyExecutionsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesGetStrategyExecutionsError =
  StrategiesGetStrategyExecutionsErrors[keyof StrategiesGetStrategyExecutionsErrors];

export type StrategiesGetStrategyExecutionsResponses = {
  /**
   * Successful Response
   */
  200: ExecutionListResponse;
};

export type StrategiesGetStrategyExecutionsResponse =
  StrategiesGetStrategyExecutionsResponses[keyof StrategiesGetStrategyExecutionsResponses];

export type StrategiesGetStrategyPerformanceData = {
  body?: never;
  path: {
    /**
     * Strategy Id
     */
    strategy_id: string;
  };
  query?: never;
  url: "/api/v1/strategies/{strategy_id}/performance";
};

export type StrategiesGetStrategyPerformanceErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type StrategiesGetStrategyPerformanceError =
  StrategiesGetStrategyPerformanceErrors[keyof StrategiesGetStrategyPerformanceErrors];

export type StrategiesGetStrategyPerformanceResponses = {
  /**
   * Successful Response
   */
  200: PerformanceResponse;
};

export type StrategiesGetStrategyPerformanceResponse =
  StrategiesGetStrategyPerformanceResponses[keyof StrategiesGetStrategyPerformanceResponses];

export type TemplatesGetTemplatesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Strategy Type
     * 전략 타입 필터
     */
    strategy_type?: StrategyType | null;
  };
  url: "/api/v1/templates/";
};

export type TemplatesGetTemplatesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TemplatesGetTemplatesError =
  TemplatesGetTemplatesErrors[keyof TemplatesGetTemplatesErrors];

export type TemplatesGetTemplatesResponses = {
  /**
   * Successful Response
   */
  200: TemplateListResponse;
};

export type TemplatesGetTemplatesResponse =
  TemplatesGetTemplatesResponses[keyof TemplatesGetTemplatesResponses];

export type TemplatesCreateTemplateData = {
  body: TemplateCreateRequest;
  path?: never;
  query?: never;
  url: "/api/v1/templates/";
};

export type TemplatesCreateTemplateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TemplatesCreateTemplateError =
  TemplatesCreateTemplateErrors[keyof TemplatesCreateTemplateErrors];

export type TemplatesCreateTemplateResponses = {
  /**
   * Successful Response
   */
  200: TemplateResponse;
};

export type TemplatesCreateTemplateResponse =
  TemplatesCreateTemplateResponses[keyof TemplatesCreateTemplateResponses];

export type TemplatesCreateStrategyFromTemplateData = {
  body: StrategyFromTemplateRequest;
  path: {
    /**
     * Template Id
     */
    template_id: string;
  };
  query?: never;
  url: "/api/v1/templates/{template_id}/create-strategy";
};

export type TemplatesCreateStrategyFromTemplateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TemplatesCreateStrategyFromTemplateError =
  TemplatesCreateStrategyFromTemplateErrors[keyof TemplatesCreateStrategyFromTemplateErrors];

export type TemplatesCreateStrategyFromTemplateResponses = {
  /**
   * Successful Response
   */
  200: StrategyResponse;
};

export type TemplatesCreateStrategyFromTemplateResponse =
  TemplatesCreateStrategyFromTemplateResponses[keyof TemplatesCreateStrategyFromTemplateResponses];
