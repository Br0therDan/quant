// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
	baseUrl: `${string}://${string}` | (string & {});
};

/**
 * ABTestCreate
 * A/B 테스트 생성
 */
export type AbTestCreate = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Model A Id
	 */
	model_a_id: string;
	/**
	 * Model B Id
	 */
	model_b_id: string;
	/**
	 * Traffic Split A
	 */
	traffic_split_a?: number;
	/**
	 * Sample Size
	 */
	sample_size?: number;
	/**
	 * Confidence Level
	 */
	confidence_level?: number;
};

/**
 * ABTestResponse
 * A/B 테스트 응답
 */
export type AbTestResponse = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Model A Id
	 */
	model_a_id: string;
	/**
	 * Model B Id
	 */
	model_b_id: string;
	/**
	 * Traffic Split A
	 */
	traffic_split_a: number;
	/**
	 * Sample Size
	 */
	sample_size: number;
	/**
	 * Confidence Level
	 */
	confidence_level: number;
	/**
	 * Status
	 */
	status: string;
	/**
	 * Results
	 */
	results: {
		[key: string]: unknown;
	} | null;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Completed At
	 */
	completed_at: Date | null;
};

/**
 * ArtifactReference
 * Reference to persisted artifacts (MLflow/W&B).
 */
export type ArtifactReference = {
	/**
	 * Name
	 * 아티팩트 이름
	 */
	name: string;
	/**
	 * Uri
	 * 저장 위치 URI
	 */
	uri: string;
	/**
	 * Artifact Type
	 * 아티팩트 타입 (model, report 등)
	 */
	artifact_type: string;
};

/**
 * AutoBacktestRequest
 * 자동 백테스트 트리거 요청
 */
export type AutoBacktestRequest = {
	/**
	 * Strategy Config
	 * 전략 설정 (JSON)
	 */
	strategy_config: {
		[key: string]: unknown;
	};
	/**
	 * Trigger Reason
	 * 트리거 사유 (예: 'strategy_builder', 'optimization')
	 */
	trigger_reason: string;
	/**
	 * Generate Report
	 * 내러티브 리포트 자동 생성
	 */
	generate_report?: boolean;
	/**
	 * Notify On Completion
	 * 완료 시 알림
	 */
	notify_on_completion?: boolean;
};

/**
 * AutoBacktestResponse
 * 자동 백테스트 응답
 */
export type AutoBacktestResponse = {
	/**
	 * Backtest Id
	 * 생성된 백테스트 ID
	 */
	backtest_id: string;
	/**
	 * Status
	 * 상태 (pending, running, completed)
	 */
	status: string;
	/**
	 * Estimated Duration Seconds
	 * 예상 소요 시간 (초)
	 */
	estimated_duration_seconds: number;
	/**
	 * Report Url
	 * 리포트 URL (완료 후)
	 */
	report_url?: string | null;
};

/**
 * BacktestConfig
 * 백테스트 설정 내장 모델
 */
export type BacktestConfig = {
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date: Date;
	/**
	 * End Date
	 * 종료일
	 */
	end_date: Date;
	/**
	 * Symbols
	 * 대상 심볼 목록
	 */
	symbols: Array<string>;
	/**
	 * Initial Cash
	 * 초기 자본금
	 */
	initial_cash?: number;
	/**
	 * Max Position Size
	 * 최대 포지션 크기 (비율)
	 */
	max_position_size?: number;
	/**
	 * Commission Rate
	 * 수수료율
	 */
	commission_rate?: number;
	/**
	 * Slippage Rate
	 * 슬리피지율
	 */
	slippage_rate?: number;
	/**
	 * Rebalance Frequency
	 * 리밸런싱 주기 (daily, weekly, monthly)
	 */
	rebalance_frequency?: string | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * BacktestCreate
 * 백테스트 생성 요청
 */
export type BacktestCreate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * 백테스트 설정
	 */
	config: BacktestConfig;
};

/**
 * BacktestExecutionListResponse
 * 백테스트 실행 목록 응답
 */
export type BacktestExecutionListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Executions
	 * 실행 목록
	 */
	executions: Array<BacktestExecutionResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * BacktestExecutionRequest
 * 백테스트 실행 요청
 */
export type BacktestExecutionRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Signals
	 * 트레이딩 시그널 목록
	 */
	signals: Array<{
		[key: string]: unknown;
	}>;
};

/**
 * BacktestExecutionResponse
 * 백테스트 실행 응답
 */
export type BacktestExecutionResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 실행 ID
	 */
	id: string;
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id: string;
	/**
	 * Execution Id
	 * 실행 ID
	 */
	execution_id: string;
	/**
	 * Start Time
	 * 실행 시작 시간
	 */
	start_time: Date;
	/**
	 * End Time
	 * 실행 종료 시간
	 */
	end_time?: Date | null;
	/**
	 * 실행 상태
	 */
	status: BacktestStatus;
	/**
	 * Portfolio Values
	 * 포트폴리오 가치 히스토리
	 */
	portfolio_values: Array<number>;
	/**
	 * Trades
	 * 거래 내역
	 */
	trades: Array<Trade>;
	/**
	 * Positions
	 * 최종 포지션
	 */
	positions: {
		[key: string]: Position;
	};
	/**
	 * Error Message
	 * 오류 메시지
	 */
	error_message?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
};

/**
 * BacktestListResponse
 * 백테스트 목록 응답
 */
export type BacktestListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Backtests
	 * 백테스트 목록
	 */
	backtests: Array<BacktestResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * BacktestNarrativeReport
 * 백테스트 내러티브 리포트 (전체)
 */
export type BacktestNarrativeReport = {
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id: string;
	/**
	 * Generated At
	 * 리포트 생성 시간
	 */
	generated_at: Date;
	/**
	 * Llm Model
	 * 사용된 LLM 모델
	 */
	llm_model: string;
	/**
	 * Llm Version
	 * LLM 버전
	 */
	llm_version?: string | null;
	executive_summary: ExecutiveSummary;
	performance_analysis: PerformanceAnalysis;
	strategy_insights: StrategyInsights;
	risk_assessment: RiskAssessment;
	/**
	 * 시장 맥락
	 */
	market_context: MarketContext;
	recommendations: Recommendations;
	/**
	 * Fact Check Passed
	 * 사실 확인 통과 여부
	 */
	fact_check_passed: boolean;
	/**
	 * Validation Errors
	 * 검증 오류 (있는 경우)
	 */
	validation_errors?: Array<string>;
};

/**
 * BacktestResponse
 * 백테스트 응답
 */
export type BacktestResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 백테스트 ID
	 */
	id: string;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description: string;
	/**
	 * 백테스트 설정
	 */
	config: BacktestConfig;
	/**
	 * 실행 상태
	 */
	status: BacktestStatus;
	/**
	 * Start Time
	 * 실행 시작 시간
	 */
	start_time?: Date | null;
	/**
	 * End Time
	 * 실행 종료 시간
	 */
	end_time?: Date | null;
	/**
	 * Duration Seconds
	 * 실행 시간(초)
	 */
	duration_seconds?: number | null;
	/**
	 * 성과 지표
	 */
	performance?: PerformanceMetrics | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at?: Date | null;
};

/**
 * BacktestStatus
 * 백테스트 상태
 */
export type BacktestStatus =
	| "pending"
	| "running"
	| "completed"
	| "failed"
	| "cancelled";

/**
 * BacktestUpdate
 * 백테스트 수정 요청
 */
export type BacktestUpdate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string | null;
	/**
	 * 백테스트 설정
	 */
	config?: BacktestConfig | null;
};

/**
 * BalanceSheetData
 * 재무상태표 응답 모델
 */
export type BalanceSheetData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Currency
	 * 보고 통화
	 */
	reported_currency?: string;
	/**
	 * Total Assets
	 * 총자산
	 */
	total_assets?: string | null;
	/**
	 * Total Current Assets
	 * 총 유동자산
	 */
	total_current_assets?: string | null;
	/**
	 * Cash And Cash Equivalents
	 * 현금 및 현금성자산
	 */
	cash_and_cash_equivalents?: string | null;
	/**
	 * Inventory
	 * 재고자산
	 */
	inventory?: string | null;
	/**
	 * Current Net Receivables
	 * 유동 순매출채권
	 */
	current_net_receivables?: string | null;
	/**
	 * Property Plant Equipment
	 * 유형자산
	 */
	property_plant_equipment?: string | null;
	/**
	 * Goodwill
	 * 영업권
	 */
	goodwill?: string | null;
	/**
	 * Intangible Assets
	 * 무형자산
	 */
	intangible_assets?: string | null;
	/**
	 * Total Liabilities
	 * 총부채
	 */
	total_liabilities?: string | null;
	/**
	 * Total Current Liabilities
	 * 총 유동부채
	 */
	total_current_liabilities?: string | null;
	/**
	 * Current Accounts Payable
	 * 유동 매입채무
	 */
	current_accounts_payable?: string | null;
	/**
	 * Current Debt
	 * 유동부채
	 */
	current_debt?: string | null;
	/**
	 * Long Term Debt
	 * 장기부채
	 */
	long_term_debt?: string | null;
	/**
	 * Total Shareholder Equity
	 * 총 자기자본
	 */
	total_shareholder_equity?: string | null;
	/**
	 * Retained Earnings
	 * 이익잉여금
	 */
	retained_earnings?: string | null;
	/**
	 * Common Stock
	 * 보통주
	 */
	common_stock?: string | null;
	/**
	 * Treasury Stock
	 * 자기주식
	 */
	treasury_stock?: string | null;
	/**
	 * Common Stock Shares Outstanding
	 * 보통주 발행주식수
	 */
	common_stock_shares_outstanding?: number | null;
};

/**
 * BalanceSheetResponse
 * 재무상태표 조회 응답 스키마
 */
export type BalanceSheetResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<BalanceSheetData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * BenchmarkCreate
 * 벤치마크 스위트 생성
 */
export type BenchmarkCreate = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Test Cases
	 */
	test_cases?: Array<TestCaseCreate>;
};

/**
 * BenchmarkMetric
 * Benchmark metric definition used by evaluation scenarios.
 */
export type BenchmarkMetric = {
	/**
	 * Name
	 * 메트릭 이름
	 */
	name: string;
	/**
	 * Threshold
	 * 임계값
	 */
	threshold?: number | null;
	/**
	 * Higher Is Better
	 * 높을수록 좋은 메트릭 여부
	 */
	higher_is_better?: boolean;
};

/**
 * BenchmarkResponse
 * 벤치마크 스위트 응답
 */
export type BenchmarkResponse = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Test Cases
	 */
	test_cases: Array<{
		[key: string]: unknown;
	}>;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Updated At
	 */
	updated_at: Date;
};

/**
 * BenchmarkRunRequest
 * 벤치마크 실행 요청
 */
export type BenchmarkRunRequest = {
	/**
	 * Benchmark Name
	 */
	benchmark_name: string;
	/**
	 * Model Id
	 */
	model_id: string;
	/**
	 * Model Version
	 */
	model_version?: string | null;
};

/**
 * BenchmarkRunResponse
 * 벤치마크 실행 결과
 */
export type BenchmarkRunResponse = {
	/**
	 * Benchmark Name
	 */
	benchmark_name: string;
	/**
	 * Model Id
	 */
	model_id: string;
	/**
	 * Model Version
	 */
	model_version: string | null;
	/**
	 * Results
	 */
	results: {
		[key: string]: unknown;
	};
	/**
	 * Passed
	 */
	passed: boolean;
	/**
	 * Started At
	 */
	started_at: Date;
	/**
	 * Completed At
	 */
	completed_at: Date | null;
};

/**
 * Body_Auth-forgot_password
 */
export type BodyAuthForgotPassword = {
	/**
	 * Email
	 */
	email: string;
};

/**
 * Body_Auth-login
 */
export type BodyAuthLogin = {
	/**
	 * Grant Type
	 */
	grant_type?: string | null;
	/**
	 * Username
	 */
	username: string;
	/**
	 * Password
	 */
	password: string;
	/**
	 * Scope
	 */
	scope?: string;
	/**
	 * Client Id
	 */
	client_id?: string | null;
	/**
	 * Client Secret
	 */
	client_secret?: string | null;
};

/**
 * Body_Auth-request_verify_token
 */
export type BodyAuthRequestVerifyToken = {
	/**
	 * Email
	 */
	email: string;
};

/**
 * Body_Auth-reset_password
 */
export type BodyAuthResetPassword = {
	/**
	 * Token
	 */
	token: string;
	/**
	 * Password
	 */
	password: string;
};

/**
 * Body_Auth-verify
 */
export type BodyAuthVerify = {
	/**
	 * Token
	 */
	token: string;
};

/**
 * BuyAndHoldConfig
 * 바이앤홀드 전략 설정
 */
export type BuyAndHoldConfig = {
	/**
	 * Config Type
	 * 설정 타입
	 */
	config_type?: "buy_and_hold";
	/**
	 * Lookback Period
	 * 조회 기간 (일)
	 */
	lookback_period?: number;
	/**
	 * Min Data Points
	 * 최소 데이터 포인트
	 */
	min_data_points?: number;
	/**
	 * Max Position Size
	 * 최대 포지션 크기
	 */
	max_position_size?: number;
	/**
	 * Stop Loss Pct
	 * 손절 비율
	 */
	stop_loss_pct?: number | null;
	/**
	 * Take Profit Pct
	 * 익절 비율
	 */
	take_profit_pct?: number | null;
	/**
	 * Allocation
	 * 종목별 할당 비율
	 */
	allocation?: {
		[key: string]: number;
	};
};

/**
 * CacheInfo
 * 캐시 정보
 */
export type CacheInfo = {
	/**
	 * Cached
	 * 캐시된 데이터 여부
	 */
	cached: boolean;
	/**
	 * Cache Hit
	 * 캐시 히트 여부
	 */
	cache_hit: boolean;
	/**
	 * Cache Timestamp
	 * 캐시 생성 시간
	 */
	cache_timestamp?: Date | null;
	/**
	 * Cache Ttl
	 * 캐시 TTL (초)
	 */
	cache_ttl?: number | null;
};

/**
 * CacheStatusSnapshot
 * Current cache backend health snapshot.
 */
export type CacheStatusSnapshot = {
	/**
	 * Duckdb Status
	 * DuckDB 연결 상태
	 */
	duckdb_status: string;
	/**
	 * Duckdb Row Count
	 * DuckDB 일별 시계열 행 수
	 */
	duckdb_row_count?: number | null;
	/**
	 * Duckdb Last Updated
	 * DuckDB 최신 시계열 업데이트 시간
	 */
	duckdb_last_updated?: Date | null;
	/**
	 * Mongodb Status
	 * MongoDB 연결 상태
	 */
	mongodb_status: string;
	/**
	 * Mongodb Last Event At
	 * MongoDB에서 관측된 최신 데이터 품질 이벤트 시간
	 */
	mongodb_last_event_at?: Date | null;
	/**
	 * Notes
	 * 추가 관찰 사항 또는 경고
	 */
	notes?: Array<string>;
};

/**
 * CashFlowData
 * 현금흐름표 응답 모델
 */
export type CashFlowData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Currency
	 * 보고 통화
	 */
	reported_currency?: string;
	/**
	 * Operating Cashflow
	 * 영업활동 현금흐름
	 */
	operating_cashflow?: string | null;
	/**
	 * Payments For Operating Activities
	 * 영업활동 현금지출
	 */
	payments_for_operating_activities?: string | null;
	/**
	 * Proceeds From Operating Activities
	 * 영업활동 현금수입
	 */
	proceeds_from_operating_activities?: string | null;
	/**
	 * Capital Expenditures
	 * 자본적지출
	 */
	capital_expenditures?: string | null;
	/**
	 * Cashflow From Investment
	 * 투자활동 현금흐름
	 */
	cashflow_from_investment?: string | null;
	/**
	 * Cashflow From Financing
	 * 재무활동 현금흐름
	 */
	cashflow_from_financing?: string | null;
	/**
	 * Dividend Payments
	 * 배당금 지급
	 */
	dividend_payments?: string | null;
	/**
	 * Payments For Repurchase Of Common Stock
	 * 자기주식 취득지출
	 */
	payments_for_repurchase_of_common_stock?: string | null;
	/**
	 * Change In Cash And Cash Equivalents
	 * 현금 및 현금성자산 변동
	 */
	change_in_cash_and_cash_equivalents?: string | null;
};

/**
 * CashFlowResponse
 * 현금흐름표 조회 응답 스키마
 */
export type CashFlowResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<CashFlowData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * ChatOpsRequest
 * Request payload for ChatOps interactions.
 */
export type ChatOpsRequest = {
	/**
	 * Question
	 * 사용자 질문 또는 명령
	 */
	question: string;
	/**
	 * User Roles
	 * 요청을 수행하는 사용자의 역할 목록
	 */
	user_roles?: Array<string>;
	/**
	 * Channel
	 * 질문이 발생한 채널(Slack, Console 등)
	 */
	channel?: string | null;
	/**
	 * Session Id
	 * 세션 ID (멀티턴 대화)
	 */
	session_id?: string | null;
	/**
	 * Include History
	 * 대화 히스토리 포함 여부
	 */
	include_history?: boolean;
};

/**
 * ChatOpsResponse
 * Response payload returned by the ChatOps agent.
 */
export type ChatOpsResponse = {
	/**
	 * Answer
	 * 사용자에게 제공되는 요약 응답
	 */
	answer: string;
	/**
	 * Used Tools
	 * 실행된 ChatOps 툴 목록
	 */
	used_tools?: Array<string>;
	/**
	 * Denied Tools
	 * 권한 부족으로 실행되지 않은 툴 목록
	 */
	denied_tools?: Array<string>;
	/**
	 * 캐시 및 저장소 상태 스냅샷
	 */
	cache_status?: CacheStatusSnapshot | null;
	/**
	 * 데이터 품질 센티널 요약
	 */
	data_quality?: DataQualitySummary | null;
	/**
	 * Recent Failures
	 * 최근 운영 실패 목록
	 */
	recent_failures?: Array<FailureInsight>;
	/**
	 * External Services
	 * 외부 서비스 상태
	 */
	external_services?: {
		[key: string]: unknown;
	};
};

/**
 * ChecklistStatus
 * 체크리스트 상태
 */
export type ChecklistStatus = "pending" | "passed" | "failed";

/**
 * ChecklistUpdateRequest
 */
export type ChecklistUpdateRequest = {
	stage?: ModelStage | null;
	/**
	 * Checklist
	 */
	checklist: Array<DeploymentChecklistItem>;
	/**
	 * Approved By
	 */
	approved_by?: string | null;
	/**
	 * Approval Notes
	 */
	approval_notes?: string | null;
};

/**
 * CompanyOverviewData
 * 기업 개요 응답 모델
 */
export type CompanyOverviewData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Name
	 * 회사명
	 */
	name: string;
	/**
	 * Exchange
	 * 거래소
	 */
	exchange: string;
	/**
	 * Sector
	 * 섹터
	 */
	sector?: string | null;
	/**
	 * Industry
	 * 산업
	 */
	industry?: string | null;
	/**
	 * Description
	 * 회사 설명
	 */
	description?: string | null;
	/**
	 * Currency
	 * 통화
	 */
	currency?: string;
	/**
	 * Country
	 * 국가
	 */
	country?: string | null;
	/**
	 * Fiscal Year End
	 * 회계연도 종료월
	 */
	fiscal_year_end?: string | null;
	/**
	 * Latest Quarter
	 * 최근 분기
	 */
	latest_quarter?: Date | null;
	/**
	 * Market Capitalization
	 * 시가총액
	 */
	market_capitalization?: string | null;
	/**
	 * Ebitda
	 * EBITDA
	 */
	ebitda?: string | null;
	/**
	 * Pe Ratio
	 * PER
	 */
	pe_ratio?: string | null;
	/**
	 * Peg Ratio
	 * PEG 비율
	 */
	peg_ratio?: string | null;
	/**
	 * Book Value
	 * 장부가치
	 */
	book_value?: string | null;
	/**
	 * Dividend Per Share
	 * 주당 배당금
	 */
	dividend_per_share?: string | null;
	/**
	 * Dividend Yield
	 * 배당 수익률 (%)
	 */
	dividend_yield?: string | null;
	/**
	 * Eps
	 * 주당 순이익
	 */
	eps?: string | null;
	/**
	 * Revenue Per Share Ttm
	 * 주당 매출(TTM)
	 */
	revenue_per_share_ttm?: string | null;
	/**
	 * Profit Margin
	 * 순이익률 (%)
	 */
	profit_margin?: string | null;
	/**
	 * Operating Margin Ttm
	 * 영업이익률(TTM) (%)
	 */
	operating_margin_ttm?: string | null;
	/**
	 * Return On Assets Ttm
	 * 총자산수익률(TTM) (%)
	 */
	return_on_assets_ttm?: string | null;
	/**
	 * Return On Equity Ttm
	 * 자기자본수익률(TTM) (%)
	 */
	return_on_equity_ttm?: string | null;
	/**
	 * Revenue Ttm
	 * 매출(TTM)
	 */
	revenue_ttm?: string | null;
	/**
	 * Gross Profit Ttm
	 * 매출총이익(TTM)
	 */
	gross_profit_ttm?: string | null;
	/**
	 * Fifty Two Week High
	 * 52주 최고가
	 */
	fifty_two_week_high?: string | null;
	/**
	 * Fifty Two Week Low
	 * 52주 최저가
	 */
	fifty_two_week_low?: string | null;
	/**
	 * Fifty Day Moving Average
	 * 50일 이동평균
	 */
	fifty_day_moving_average?: string | null;
	/**
	 * Two Hundred Day Moving Average
	 * 200일 이동평균
	 */
	two_hundred_day_moving_average?: string | null;
	/**
	 * Shares Outstanding
	 * 발행주식수
	 */
	shares_outstanding?: number | null;
	/**
	 * Beta
	 * 베타
	 */
	beta?: string | null;
	/**
	 * Analyst Target Price
	 * 목표 주가
	 */
	analyst_target_price?: string | null;
};

/**
 * CompanyOverviewResponse
 * 기업 개요 조회 응답 스키마
 */
export type CompanyOverviewResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * 데이터
	 */
	data: CompanyOverviewData;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
};

/**
 * ComplianceStatus
 * 컴플라이언스 상태
 */
export type ComplianceStatus = "passed" | "warning" | "failed";

/**
 * ConfidenceLevel
 * 신뢰도 수준
 */
export type ConfidenceLevel = "high" | "medium" | "low";

/**
 * CryptoHistoricalDataResponse
 */
export type CryptoHistoricalDataResponse = {
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Market
	 */
	market: string;
	/**
	 * Data
	 */
	data: Array<{
		[key: string]: unknown;
	}>;
	/**
	 * Count
	 */
	count: number;
	/**
	 * Start Date
	 */
	start_date?: Date | null;
	/**
	 * End Date
	 */
	end_date?: Date | null;
	/**
	 * Frequency
	 */
	frequency: string;
};

/**
 * DashboardSummary
 * 대시보드 요약 데이터.
 */
export type DashboardSummary = {
	/**
	 * User Id
	 * 사용자 ID
	 */
	user_id: string;
	/**
	 * 포트폴리오 정보
	 */
	portfolio: PortfolioSummary;
	/**
	 * 전략 정보
	 */
	strategies: StrategySummary;
	/**
	 * 최근 활동
	 */
	recent_activity: RecentActivity;
	/**
	 * 데이터 품질 센티널 요약
	 */
	data_quality?: DataQualitySummary | null;
};

/**
 * DashboardSummaryResponse
 * 대시보드 요약 응답.
 */
export type DashboardSummaryResponse = {
	/**
	 * 대시보드 데이터
	 */
	data: DashboardSummary;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string;
};

/**
 * DataQualityAlert
 * 데이터 품질 이상 알림.
 */
export type DataQualityAlert = {
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	/**
	 * Data Type
	 * 데이터 타입
	 */
	data_type: string;
	/**
	 * Occurred At
	 * 이상 발생 시각
	 */
	occurred_at: Date;
	/**
	 * 심각도
	 */
	severity: DataQualitySeverity;
	/**
	 * Iso Score
	 * Isolation Forest 점수
	 */
	iso_score: number;
	/**
	 * Prophet Score
	 * Prophet 기반 잔차 점수
	 */
	prophet_score?: number | null;
	/**
	 * Price Change Pct
	 * 전일 대비 변동률
	 */
	price_change_pct: number;
	/**
	 * Volume Z Score
	 * 거래량 Z-Score
	 */
	volume_z_score: number;
	/**
	 * Message
	 * 알림 메시지
	 */
	message: string;
};

/**
 * DataQualityInfo
 * 데이터 품질 정보
 */
export type DataQualityInfo = {
	/**
	 * Quality Score
	 * 품질 점수 (0-100)
	 */
	quality_score: string;
	/**
	 * Last Updated
	 * 마지막 업데이트 시간
	 */
	last_updated: Date;
	/**
	 * Data Source
	 * 데이터 출처
	 */
	data_source: string;
	/**
	 * Confidence Level
	 * 신뢰도 수준
	 */
	confidence_level?: string | null;
};

/**
 * DataQualitySeverity
 * 데이터 품질 이상 심각도.
 */
export type DataQualitySeverity =
	| "normal"
	| "low"
	| "medium"
	| "high"
	| "critical";

/**
 * DataQualitySummary
 * 데이터 품질 센티널 요약.
 */
export type DataQualitySummary = {
	/**
	 * Total Alerts
	 * 총 이상 건수
	 */
	total_alerts: number;
	/**
	 * Severity Breakdown
	 * 심각도별 건수
	 */
	severity_breakdown: {
		[key in DataQualitySeverity]?: number;
	};
	/**
	 * Last Updated
	 * 마지막 업데이트 시각
	 */
	last_updated: Date;
	/**
	 * Recent Alerts
	 * 최근 이상 목록
	 */
	recent_alerts?: Array<DataQualityAlert>;
};

/**
 * DataType
 * 데이터 타입
 */
export type DataType = "float" | "integer" | "string" | "boolean" | "timestamp";

/**
 * DeploymentChecklistItem
 * Individual checklist item used during approvals.
 */
export type DeploymentChecklistItem = {
	/**
	 * Name
	 * Checklist 항목 이름
	 */
	name: string;
	/**
	 * 체크 상태
	 */
	status?: ChecklistStatus;
	/**
	 * Note
	 * 검토 메모
	 */
	note?: string | null;
	/**
	 * Completed At
	 * 완료 시간
	 */
	completed_at?: Date | null;
};

/**
 * DeploymentCreate
 * Create a new model deployment.
 */
export type DeploymentCreate = {
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Model Version
	 */
	model_version: string;
	/**
	 * Experiment Name
	 */
	experiment_name: string;
	environment: DeploymentEnvironment;
	/**
	 * Endpoint
	 * Deployment endpoint URL
	 */
	endpoint: string;
	endpoint_config?: EndpointConfig | null;
	/**
	 * Created By
	 */
	created_by: string;
	/**
	 * Deployment Notes
	 */
	deployment_notes?: string | null;
};

/**
 * DeploymentEnvironment
 * 배포 환경
 */
export type DeploymentEnvironment = "development" | "staging" | "production";

/**
 * DeploymentMetrics
 * Deployment monitoring metrics.
 */
export type DeploymentMetrics = {
	/**
	 * Request Count
	 * 총 요청 수
	 */
	request_count?: number;
	/**
	 * Error Count
	 * 에러 수
	 */
	error_count?: number;
	/**
	 * Avg Latency Ms
	 * 평균 응답 시간 (ms)
	 */
	avg_latency_ms?: number | null;
	/**
	 * P95 Latency Ms
	 * P95 응답 시간 (ms)
	 */
	p95_latency_ms?: number | null;
	/**
	 * P99 Latency Ms
	 * P99 응답 시간 (ms)
	 */
	p99_latency_ms?: number | null;
	/**
	 * Last Updated
	 * 마지막 업데이트 시간
	 */
	last_updated?: Date;
};

/**
 * DeploymentResponse
 * Deployment response schema.
 */
export type DeploymentResponse = {
	/**
	 * Id
	 */
	_id: string;
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Model Version
	 */
	model_version: string;
	/**
	 * Experiment Name
	 */
	experiment_name: string;
	status: DeploymentStatus;
	environment: DeploymentEnvironment;
	/**
	 * Endpoint
	 */
	endpoint: string;
	endpoint_config: EndpointConfig | null;
	/**
	 * Health Status
	 */
	health_status: string | null;
	metrics: DeploymentMetrics | null;
	/**
	 * Created By
	 */
	created_by: string;
	/**
	 * Deployed At
	 */
	deployed_at: Date;
	/**
	 * Terminated At
	 */
	terminated_at: Date | null;
	/**
	 * Rollback From
	 */
	rollback_from: string | null;
	/**
	 * Deployment Notes
	 */
	deployment_notes: string | null;
	/**
	 * Error Message
	 */
	error_message: string | null;
};

/**
 * DeploymentStatus
 * 모델 배포 상태
 */
export type DeploymentStatus =
	| "pending"
	| "validating"
	| "deploying"
	| "active"
	| "failed"
	| "rollback"
	| "terminated";

/**
 * DeploymentUpdate
 * Update deployment status and metrics.
 */
export type DeploymentUpdate = {
	status?: DeploymentStatus | null;
	/**
	 * Health Status
	 * Health check status (healthy, degraded, unhealthy)
	 */
	health_status?: string | null;
	metrics?: DeploymentMetrics | null;
	/**
	 * Endpoint
	 */
	endpoint?: string | null;
	/**
	 * Error Message
	 */
	error_message?: string | null;
};

/**
 * DetailedMetrics
 * Detailed evaluation metrics for single job.
 */
export type DetailedMetrics = {
	/**
	 * Confusion Matrix
	 * 혼동 행렬
	 */
	confusion_matrix?: Array<Array<number>>;
	/**
	 * Class Labels
	 * 클래스 라벨
	 */
	class_labels?: Array<string>;
	/**
	 * Roc Curve
	 * ROC 커브 (fpr, tpr, thresholds)
	 */
	roc_curve?: {
		[key: string]: Array<number>;
	} | null;
	/**
	 * Precision Recall Curve
	 * PR 커브 (precision, recall, thresholds)
	 */
	precision_recall_curve?: {
		[key: string]: Array<number>;
	} | null;
	/**
	 * Accuracy
	 * 정확도
	 */
	accuracy?: number | null;
	/**
	 * Precision
	 * 정밀도
	 */
	precision?: number | null;
	/**
	 * Recall
	 * 재현율
	 */
	recall?: number | null;
	/**
	 * F1 Score
	 * F1 점수
	 */
	f1_score?: number | null;
	/**
	 * Auc Roc
	 * AUC-ROC
	 */
	auc_roc?: number | null;
};

/**
 * DriftEventCreate
 */
export type DriftEventCreate = {
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Version
	 */
	version: string;
	severity: DriftSeverity;
	/**
	 * Metric Name
	 */
	metric_name: string;
	/**
	 * Metric Value
	 */
	metric_value: number;
	/**
	 * Threshold
	 */
	threshold?: number | null;
	/**
	 * Message
	 */
	message?: string | null;
	/**
	 * Remediation Action
	 */
	remediation_action?: string | null;
};

/**
 * DriftEventResponse
 */
export type DriftEventResponse = {
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Detected At
	 */
	detected_at: Date;
	severity: DriftSeverity;
	/**
	 * Metric Name
	 */
	metric_name: string;
	/**
	 * Metric Value
	 */
	metric_value: number;
	/**
	 * Threshold
	 */
	threshold: number | null;
	/**
	 * Message
	 */
	message: string | null;
	/**
	 * Remediation Action
	 */
	remediation_action: string | null;
};

/**
 * DriftSeverity
 * 드리프트 심각도
 */
export type DriftSeverity = "low" | "medium" | "high" | "critical";

/**
 * EarningsData
 * 실적 발표 응답 모델
 */
export type EarningsData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Date
	 * 발표일
	 */
	reported_date: Date;
	/**
	 * Reported Eps
	 * 발표 EPS
	 */
	reported_eps?: string | null;
	/**
	 * Estimated Eps
	 * 예상 EPS
	 */
	estimated_eps?: string | null;
	/**
	 * Surprise
	 * 서프라이즈
	 */
	surprise?: string | null;
	/**
	 * Surprise Percentage
	 * 서프라이즈 비율 (%)
	 */
	surprise_percentage?: string | null;
};

/**
 * EarningsResponse
 * 실적 데이터 조회 응답 스키마
 */
export type EarningsResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<EarningsData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * EconomicCalendar
 * 경제 캘린더.
 */
export type EconomicCalendar = {
	/**
	 * Events
	 * 이벤트 목록
	 */
	events: Array<EconomicEvent>;
};

/**
 * EconomicCalendarResponse
 * 경제 캘린더 응답.
 */
export type EconomicCalendarResponse = {
	/**
	 * 경제 캘린더
	 */
	data: EconomicCalendar;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string;
};

/**
 * EconomicEvent
 * 경제 이벤트.
 */
export type EconomicEvent = {
	/**
	 * Event Name
	 * 이벤트명
	 */
	event_name: string;
	/**
	 * Country
	 * 국가
	 */
	country: string;
	/**
	 * 중요도
	 */
	importance: ImportanceLevel;
	/**
	 * Actual
	 * 실제값
	 */
	actual?: number | null;
	/**
	 * Forecast
	 * 예상값
	 */
	forecast?: number | null;
	/**
	 * Previous
	 * 이전값
	 */
	previous?: number | null;
	/**
	 * Release Time
	 * 발표 시간
	 */
	release_time: Date;
	/**
	 * Currency
	 * 통화
	 */
	currency: string;
};

/**
 * EndpointConfig
 * Deployment endpoint configuration.
 */
export type EndpointConfig = {
	/**
	 * Instances
	 * 인스턴스 수
	 */
	instances?: number;
	/**
	 * Instance Type
	 * 인스턴스 타입
	 */
	instance_type?: string;
	/**
	 * Auto Scaling
	 * 자동 스케일링 여부
	 */
	auto_scaling?: boolean;
	/**
	 * Min Instances
	 * 최소 인스턴스 수
	 */
	min_instances?: number | null;
	/**
	 * Max Instances
	 * 최대 인스턴스 수
	 */
	max_instances?: number | null;
};

/**
 * EvaluationReport
 */
export type EvaluationReport = {
	/**
	 * Scenario Name
	 */
	scenario_name: string;
	/**
	 * Candidate Model Name
	 */
	candidate_model_name: string;
	/**
	 * Candidate Model Version
	 */
	candidate_model_version: string | null;
	compliance: ComplianceStatus;
	/**
	 * Metrics
	 */
	metrics: Array<AppModelsMlPlatformEvaluationMetricComparison>;
	/**
	 * Notes
	 */
	notes?: string | null;
};

/**
 * EvaluationRequest
 */
export type EvaluationRequest = {
	/**
	 * Scenario Name
	 */
	scenario_name: string;
	/**
	 * Candidate Backtest Id
	 */
	candidate_backtest_id: string;
	/**
	 * Candidate Model Name
	 */
	candidate_model_name: string;
	/**
	 * Candidate Model Version
	 */
	candidate_model_version?: string | null;
	/**
	 * Candidate Metrics
	 */
	candidate_metrics?: {
		[key: string]: number;
	};
	/**
	 * Explainability
	 */
	explainability?: Array<ExplainabilityArtifact>;
	/**
	 * Compliance Inputs
	 */
	compliance_inputs?: {
		[key: string]: unknown;
	};
};

/**
 * EvaluationRunResponse
 */
export type EvaluationRunResponse = {
	/**
	 * Scenario Name
	 */
	scenario_name: string;
	/**
	 * Candidate Backtest Id
	 */
	candidate_backtest_id: string;
	/**
	 * Candidate Model Name
	 */
	candidate_model_name: string;
	/**
	 * Candidate Model Version
	 */
	candidate_model_version: string | null;
	status: EvaluationStatus;
	/**
	 * Started At
	 */
	started_at: Date;
	/**
	 * Completed At
	 */
	completed_at: Date | null;
	summary: EvaluationSummary | null;
	/**
	 * Explainability
	 */
	explainability: Array<ExplainabilityArtifact>;
	/**
	 * Compliance Checks
	 */
	compliance_checks: {
		[key: string]: unknown;
	};
};

/**
 * EvaluationStatus
 * 평가 상태
 */
export type EvaluationStatus = "pending" | "running" | "completed" | "failed";

/**
 * EvaluationSummary
 * Summary of evaluation outputs.
 */
export type EvaluationSummary = {
	/**
	 * Metrics
	 * 메트릭 비교
	 */
	metrics?: Array<AppModelsMlPlatformEvaluationMetricComparison>;
	/**
	 * 컴플라이언스 결과
	 */
	compliance?: ComplianceStatus;
	/**
	 * Notes
	 * 메모
	 */
	notes?: string | null;
	/**
	 * 상세 평가 메트릭
	 */
	detailed_metrics?: DetailedMetrics | null;
};

/**
 * ExecutionListResponse
 * Execution list response
 */
export type ExecutionListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Executions
	 * 실행 목록
	 */
	executions: Array<ExecutionResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * ExecutionResponse
 * Execution response
 */
export type ExecutionResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 실행 ID
	 */
	id: string;
	/**
	 * Strategy Id
	 * 전략 ID
	 */
	strategy_id: string;
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	/**
	 * 신호 타입
	 */
	signal_type: SignalType;
	/**
	 * Signal Strength
	 * 신호 강도
	 */
	signal_strength: number;
	/**
	 * Price
	 * 가격
	 */
	price: number;
	/**
	 * Timestamp
	 * 실행 시간
	 */
	timestamp: Date;
	/**
	 * Metadata
	 * 메타데이터
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
};

/**
 * ExecutiveSummary
 * 임원용 요약
 */
export type ExecutiveSummary = {
	/**
	 * Title
	 * 리포트 제목
	 */
	title: string;
	/**
	 * Overview
	 * 백테스트 개요 (2-3 문장)
	 */
	overview: string;
	/**
	 * Key Findings
	 * 핵심 발견사항 (3-5개)
	 */
	key_findings: Array<string>;
	/**
	 * 최종 추천 액션
	 */
	recommendation: ReportRecommendation;
	/**
	 * Confidence Level
	 * 추천 신뢰도 (0-1)
	 */
	confidence_level: number;
};

/**
 * ExperimentCreate
 */
export type ExperimentCreate = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Owner
	 */
	owner: string;
	/**
	 * Tags
	 */
	tags?: Array<string>;
	/**
	 * Metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
};

/**
 * ExperimentResponse
 */
export type ExperimentResponse = {
	/**
	 * Id
	 * MongoDB ObjectId
	 */
	id: string;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Owner
	 */
	owner: string;
	status: ExperimentStatus;
	/**
	 * Tags
	 */
	tags: Array<string>;
	/**
	 * Metadata
	 */
	metadata: {
		[key: string]: unknown;
	};
	/**
	 * Metrics
	 * 실험 메트릭
	 */
	metrics?: {
		[key: string]: number;
	};
	/**
	 * Duration Seconds
	 * 실행 시간 (초)
	 */
	duration_seconds?: number | null;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Updated At
	 */
	updated_at: Date;
};

/**
 * ExperimentStatus
 * 실험 상태
 */
export type ExperimentStatus = "active" | "archived";

/**
 * ExperimentUpdate
 */
export type ExperimentUpdate = {
	/**
	 * Description
	 */
	description?: string | null;
	/**
	 * Owner
	 */
	owner?: string | null;
	status?: ExperimentStatus | null;
	/**
	 * Tags
	 */
	tags?: Array<string> | null;
	/**
	 * Metadata
	 */
	metadata?: {
		[key: string]: unknown;
	} | null;
};

/**
 * ExplainabilityArtifact
 * Explainability artifact reference (e.g., SHAP).
 */
export type ExplainabilityArtifact = {
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	/**
	 * Importance
	 * 중요도
	 */
	importance: number;
	/**
	 * Impact Direction
	 * 영향 방향 (+/-)
	 */
	impact_direction?: string | null;
};

/**
 * FailureInsight
 * Represents a recent operational failure surfaced to the operator.
 */
export type FailureInsight = {
	/**
	 * Source
	 * 실패 이벤트 출처 (예: backtest, data_quality)
	 */
	source: string;
	/**
	 * Identifier
	 * 이벤트 식별자 또는 연관 객체
	 */
	identifier: string;
	/**
	 * Occurred At
	 * 실패가 발생한 시간
	 */
	occurred_at: Date;
	/**
	 * 데이터 품질 이벤트의 심각도
	 */
	severity?: DataQualitySeverity | null;
	/**
	 * Message
	 * 사용자에게 노출할 메시지
	 */
	message: string;
	/**
	 * Metadata
	 * 추가 컨텍스트 메타데이터
	 */
	metadata?: {
		[key: string]: unknown;
	};
};

/**
 * FairnessAuditRequest
 * 공정성 감사 요청
 */
export type FairnessAuditRequest = {
	/**
	 * Model Id
	 */
	model_id: string;
	/**
	 * Protected Attributes
	 * 보호 속성 (예: gender, race, age)
	 */
	protected_attributes: Array<string>;
	/**
	 * Fairness Threshold
	 */
	fairness_threshold?: number;
};

/**
 * FairnessReportResponse
 * 공정성 감사 보고서
 */
export type FairnessReportResponse = {
	/**
	 * Model Id
	 */
	model_id: string;
	/**
	 * Protected Attributes
	 */
	protected_attributes: Array<string>;
	/**
	 * Group Metrics
	 */
	group_metrics: {
		[key: string]: {
			[key: string]: number;
		};
	};
	/**
	 * Overall Fairness Score
	 */
	overall_fairness_score: number;
	/**
	 * Passed
	 */
	passed: boolean;
	/**
	 * Recommendations
	 */
	recommendations: Array<string>;
	/**
	 * Created At
	 */
	created_at: Date;
};

/**
 * FeatureContribution
 * Contribution details for a single engineered feature.
 */
export type FeatureContribution = {
	/**
	 * Feature
	 * Feature name
	 */
	feature: string;
	/**
	 * Value
	 * Computed feature value
	 */
	value: number;
	/**
	 * Weight
	 * Relative weight applied in scoring
	 */
	weight: number;
	/**
	 * Impact
	 * Signed contribution to probability
	 */
	impact: number;
	/**
	 * Direction
	 * Human readable description of how the feature influences the score
	 */
	direction?: string | null;
};

/**
 * FeatureCreate
 * 피처 생성 요청
 */
export type FeatureCreate = {
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	feature_type: FeatureType;
	data_type: DataType;
	/**
	 * Description
	 * 설명
	 */
	description: string;
	/**
	 * Owner
	 * 담당자 ID
	 */
	owner: string;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
	/**
	 * 변환 로직
	 */
	transformation?: FeatureTransformation | null;
	/**
	 * Validation Rules
	 * 검증 규칙
	 */
	validation_rules?: Array<FeatureValidation>;
	/**
	 * Upstream Features
	 * 상위 의존 피처 이름 목록
	 */
	upstream_features?: Array<string>;
	/**
	 * Duckdb Table
	 * DuckDB 테이블
	 */
	duckdb_table?: string | null;
	/**
	 * Duckdb View
	 * DuckDB 뷰
	 */
	duckdb_view?: string | null;
};

/**
 * FeatureLineageNode
 * 피처 계보 노드 (upstream/downstream)
 */
export type FeatureLineageNode = {
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	/**
	 * Version
	 * 피처 버전
	 */
	version: string;
	/**
	 * Relationship
	 * 관계 (depends_on, derived_from, used_by)
	 */
	relationship: string;
};

/**
 * FeatureLineageResponse
 * 피처 계보 응답
 */
export type FeatureLineageResponse = {
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	/**
	 * Current Version
	 * 현재 버전
	 */
	current_version: string;
	/**
	 * Upstream Features
	 * 상위 의존 피처 (이 피처가 사용하는 피처들)
	 */
	upstream_features: Array<FeatureLineageNode>;
	/**
	 * Downstream Features
	 * 하위 파생 피처 (이 피처를 사용하는 피처들)
	 */
	downstream_features: Array<FeatureLineageNode>;
	/**
	 * All Upstream
	 * 전체 상위 의존성
	 */
	all_upstream: Array<string>;
	/**
	 * All Downstream
	 * 전체 하위 의존성
	 */
	all_downstream: Array<string>;
	/**
	 * Direct Dependents Count
	 * 직접 의존하는 피처 수
	 */
	direct_dependents_count: number;
	/**
	 * Total Dependents Count
	 * 전체 의존하는 피처 수
	 */
	total_dependents_count: number;
};

/**
 * FeatureListResponse
 * 피처 목록 응답
 */
export type FeatureListResponse = {
	/**
	 * Features
	 * 피처 목록
	 */
	features: Array<FeatureResponse>;
	/**
	 * Total
	 * 전체 개수
	 */
	total: number;
};

/**
 * FeatureResponse
 * 피처 조회 응답
 */
export type FeatureResponse = {
	/**
	 * Id
	 * MongoDB ObjectId
	 */
	id: string;
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	/**
	 * Current Version
	 * 현재 버전
	 */
	current_version: string;
	feature_type: FeatureType;
	data_type: DataType;
	/**
	 * 상태
	 */
	status: FeatureStatus;
	/**
	 * Description
	 * 설명
	 */
	description: string;
	/**
	 * Owner
	 * 담당자
	 */
	owner: string;
	/**
	 * Tags
	 * 태그
	 */
	tags: Array<string>;
	/**
	 * Upstream Features
	 * 상위 의존 피처
	 */
	upstream_features: Array<string>;
	/**
	 * Downstream Features
	 * 하위 파생 피처
	 */
	downstream_features: Array<string>;
	/**
	 * 변환 로직
	 */
	transformation?: FeatureTransformation | null;
	/**
	 * Validation Rules
	 * 검증 규칙
	 */
	validation_rules: Array<FeatureValidation>;
	/**
	 * Duckdb Table
	 * DuckDB 테이블
	 */
	duckdb_table?: string | null;
	/**
	 * Duckdb View
	 * DuckDB 뷰
	 */
	duckdb_view?: string | null;
	/**
	 * 피처 통계 정보
	 */
	statistics?: FeatureStatistics | null;
	/**
	 * Usage Count
	 * 사용 횟수
	 */
	usage_count: number;
	/**
	 * Last Used At
	 * 마지막 사용 시간
	 */
	last_used_at?: Date | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 업데이트 시간
	 */
	updated_at: Date;
	/**
	 * Deprecated At
	 * 폐기 시간
	 */
	deprecated_at?: Date | null;
};

/**
 * FeatureStatistics
 * 피처 통계 정보 (Phase 4 Enhancement)
 */
export type FeatureStatistics = {
	/**
	 * Mean
	 * 평균값
	 */
	mean?: number | null;
	/**
	 * Median
	 * 중앙값
	 */
	median?: number | null;
	/**
	 * Std
	 * 표준편차
	 */
	std?: number | null;
	/**
	 * Min
	 * 최소값
	 */
	min?: number | null;
	/**
	 * Max
	 * 최대값
	 */
	max?: number | null;
	/**
	 * Missing Ratio
	 * 결측치 비율 (0.0 ~ 1.0)
	 */
	missing_ratio?: number;
	/**
	 * Distribution
	 * 분포 데이터 [{value, count}, ...]
	 */
	distribution?: Array<{
		[key: string]: unknown;
	}>;
	/**
	 * Calculated At
	 * 계산 시간
	 */
	calculated_at?: Date;
};

/**
 * FeatureStatisticsResponse
 * 피처 통계 응답
 */
export type FeatureStatisticsResponse = {
	/**
	 * Feature Name
	 */
	feature_name: string;
	/**
	 * Feature Version
	 */
	feature_version: string;
	/**
	 * Statistics
	 */
	statistics: {
		[key: string]: number | number;
	};
	/**
	 * Generated At
	 */
	generated_at: Date;
};

/**
 * FeatureStatus
 * 피처 상태
 */
export type FeatureStatus = "draft" | "active" | "deprecated" | "archived";

/**
 * FeatureTransformation
 * 피처 변환 로직
 */
export type FeatureTransformation = {
	/**
	 * Transformation Type
	 * 변환 타입 (sql, python, spark)
	 */
	transformation_type: string;
	/**
	 * Code
	 * 변환 코드
	 */
	code: string;
	/**
	 * Parameters
	 * 파라미터
	 */
	parameters?: {
		[key: string]: unknown;
	};
};

/**
 * FeatureType
 * 피처 타입
 */
export type FeatureType =
	| "numerical"
	| "categorical"
	| "boolean"
	| "datetime"
	| "text";

/**
 * FeatureUpdate
 * 피처 업데이트 요청
 */
export type FeatureUpdate = {
	/**
	 * Description
	 * 설명
	 */
	description?: string | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string> | null;
	/**
	 * 상태
	 */
	status?: FeatureStatus | null;
	/**
	 * 변환 로직
	 */
	transformation?: FeatureTransformation | null;
	/**
	 * Validation Rules
	 * 검증 규칙
	 */
	validation_rules?: Array<FeatureValidation> | null;
	/**
	 * Duckdb Table
	 * DuckDB 테이블
	 */
	duckdb_table?: string | null;
	/**
	 * Duckdb View
	 * DuckDB 뷰
	 */
	duckdb_view?: string | null;
};

/**
 * FeatureUsageCreate
 * 피처 사용 기록 생성
 */
export type FeatureUsageCreate = {
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	/**
	 * Feature Version
	 * 피처 버전
	 */
	feature_version: string;
	/**
	 * Used By Model
	 * 모델 이름
	 */
	used_by_model: string;
	/**
	 * Model Version
	 * 모델 버전
	 */
	model_version: string;
	/**
	 * Environment
	 * 환경
	 */
	environment: string;
	/**
	 * Feature Importance
	 * 피처 중요도
	 */
	feature_importance?: number | null;
	/**
	 * Correlation With Target
	 * 타겟 상관계수
	 */
	correlation_with_target?: number | null;
	/**
	 * Execution Id
	 * 실행 ID
	 */
	execution_id?: string | null;
	/**
	 * Execution Duration Ms
	 * 실행 시간
	 */
	execution_duration_ms?: number | null;
};

/**
 * FeatureUsageResponse
 * 피처 사용 기록 응답
 */
export type FeatureUsageResponse = {
	/**
	 * Id
	 * MongoDB ObjectId
	 */
	id: string;
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	/**
	 * Feature Version
	 * 피처 버전
	 */
	feature_version: string;
	/**
	 * Used By Model
	 * 모델 이름
	 */
	used_by_model: string;
	/**
	 * Model Version
	 * 모델 버전
	 */
	model_version: string;
	/**
	 * Environment
	 * 환경
	 */
	environment: string;
	/**
	 * Feature Importance
	 * 피처 중요도
	 */
	feature_importance?: number | null;
	/**
	 * Correlation With Target
	 * 타겟 상관계수
	 */
	correlation_with_target?: number | null;
	/**
	 * Execution Id
	 * 실행 ID
	 */
	execution_id?: string | null;
	/**
	 * Execution Duration Ms
	 * 실행 시간
	 */
	execution_duration_ms?: number | null;
	/**
	 * Usage Timestamp
	 * 사용 시간
	 */
	usage_timestamp: Date;
};

/**
 * FeatureValidation
 * 피처 검증 규칙
 */
export type FeatureValidation = {
	/**
	 * Rule Type
	 * 규칙 타입 (range, null_check, outlier)
	 */
	rule_type: string;
	/**
	 * Parameters
	 * 규칙 파라미터
	 */
	parameters: {
		[key: string]: unknown;
	};
	/**
	 * Is Blocking
	 * 블로킹 여부
	 */
	is_blocking?: boolean;
};

/**
 * FeatureVersionCreate
 * 피처 버전 생성 요청
 */
export type FeatureVersionCreate = {
	/**
	 * Version
	 * 버전 (Semantic Versioning)
	 */
	version: string;
	/**
	 * Changelog
	 * 변경 사항
	 */
	changelog: string;
	/**
	 * Breaking Changes
	 * 호환성 깨짐 여부
	 */
	breaking_changes?: boolean;
	/**
	 * Created By
	 * 생성자 ID
	 */
	created_by: string;
	/**
	 * 변환 로직 스냅샷
	 */
	transformation_snapshot?: FeatureTransformation | null;
	/**
	 * Validation Snapshot
	 * 검증 규칙 스냅샷
	 */
	validation_snapshot?: Array<FeatureValidation>;
};

/**
 * FeatureVersionListResponse
 * 피처 버전 목록 응답
 */
export type FeatureVersionListResponse = {
	/**
	 * Versions
	 * 버전 목록
	 */
	versions: Array<FeatureVersionResponse>;
	/**
	 * Total
	 * 전체 개수
	 */
	total: number;
};

/**
 * FeatureVersionResponse
 * 피처 버전 응답
 */
export type FeatureVersionResponse = {
	/**
	 * Id
	 * MongoDB ObjectId
	 */
	id: string;
	/**
	 * Feature Name
	 * 피처 이름
	 */
	feature_name: string;
	/**
	 * Version
	 * 버전
	 */
	version: string;
	/**
	 * Changelog
	 * 변경 사항
	 */
	changelog: string;
	/**
	 * Breaking Changes
	 * 호환성 깨짐 여부
	 */
	breaking_changes: boolean;
	/**
	 * 변환 로직 스냅샷
	 */
	transformation_snapshot?: FeatureTransformation | null;
	/**
	 * Validation Snapshot
	 * 검증 규칙 스냅샷
	 */
	validation_snapshot: Array<FeatureValidation>;
	/**
	 * Created By
	 * 생성자
	 */
	created_by: string;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Is Rolled Back
	 * 롤백 여부
	 */
	is_rolled_back: boolean;
	/**
	 * Rolled Back At
	 * 롤백 시간
	 */
	rolled_back_at?: Date | null;
};

/**
 * ForecastPercentileBand
 * Single percentile projection for a future portfolio value.
 */
export type ForecastPercentileBand = {
	/**
	 * Percentile
	 * Percentile value (0-100)
	 */
	percentile: number;
	/**
	 * Projected Value
	 * Projected portfolio value at percentile
	 */
	projected_value: number;
};

/**
 * GeneratedStrategyConfig
 * 생성된 전략 설정
 */
export type GeneratedStrategyConfig = {
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Strategy Type
	 * 전략 타입 (기술적 지표 기반)
	 */
	strategy_type: string;
	/**
	 * Description
	 * 전략 설명
	 */
	description: string;
	/**
	 * Indicators
	 * 사용된 지표 목록 (1-5개)
	 */
	indicators: Array<IndicatorRecommendation>;
	/**
	 * Parameters
	 * 전략 파라미터
	 */
	parameters: {
		[key: string]: unknown;
	};
	/**
	 * Parameter Validations
	 * 파라미터 검증 결과
	 */
	parameter_validations: Array<ParameterValidation>;
	/**
	 * Entry Conditions
	 * 진입 조건 설명
	 */
	entry_conditions: string;
	/**
	 * Exit Conditions
	 * 청산 조건 설명
	 */
	exit_conditions: string;
	/**
	 * Risk Management
	 * 리스크 관리 규칙
	 */
	risk_management?: string | null;
	/**
	 * Expected Performance
	 * 예상 성과 (과거 유사 전략 기반)
	 */
	expected_performance?: {
		[key: string]: unknown;
	} | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
	/**
	 * Detail
	 */
	detail?: Array<ValidationError>;
};

/**
 * HealthCheckResponse
 */
export type HealthCheckResponse = {
	/**
	 * Status
	 */
	status: string;
	/**
	 * Timestamp
	 */
	timestamp: Date;
};

/**
 * HealthResponse
 * Health check response model.
 */
export type HealthResponse = {
	/**
	 * Status
	 */
	status: string;
	/**
	 * Timestamp
	 */
	timestamp: Date;
	/**
	 * Service
	 */
	service: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Uptime
	 */
	uptime: number;
	/**
	 * Checks
	 */
	checks: {
		[key: string]: {
			[key: string]: unknown;
		};
	};
};

/**
 * HistoricalDataResponse
 */
export type HistoricalDataResponse = {
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Data
	 */
	data: Array<{
		[key: string]: unknown;
	}>;
	/**
	 * Count
	 */
	count: number;
	/**
	 * Start Date
	 */
	start_date?: Date | null;
	/**
	 * End Date
	 */
	end_date?: Date | null;
	/**
	 * Frequency
	 */
	frequency: string;
};

/**
 * HumanApprovalRequest
 * 휴먼 승인 요청
 */
export type HumanApprovalRequest = {
	/**
	 * Requires Approval
	 * 승인 필요 여부
	 */
	requires_approval: boolean;
	/**
	 * Approval Reasons
	 * 승인이 필요한 이유 (위험 요소 등)
	 */
	approval_reasons?: Array<string>;
	/**
	 * Suggested Modifications
	 * 수정 제안 사항
	 */
	suggested_modifications?: Array<string>;
	/**
	 * Approval Deadline
	 * 승인 기한
	 */
	approval_deadline?: Date | null;
};

/**
 * ImportanceLevel
 * 중요도 레벨.
 */
export type ImportanceLevel = "high" | "medium" | "low";

/**
 * IncomeStatementData
 * 손익계산서 응답 모델
 */
export type IncomeStatementData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Currency
	 * 보고 통화
	 */
	reported_currency?: string;
	/**
	 * Total Revenue
	 * 총 매출
	 */
	total_revenue?: string | null;
	/**
	 * Cost Of Revenue
	 * 매출원가
	 */
	cost_of_revenue?: string | null;
	/**
	 * Gross Profit
	 * 매출총이익
	 */
	gross_profit?: string | null;
	/**
	 * Research And Development
	 * 연구개발비
	 */
	research_and_development?: string | null;
	/**
	 * Selling General Administrative
	 * 판매관리비
	 */
	selling_general_administrative?: string | null;
	/**
	 * Operating Expenses
	 * 영업비용
	 */
	operating_expenses?: string | null;
	/**
	 * Operating Income
	 * 영업이익
	 */
	operating_income?: string | null;
	/**
	 * Interest Income
	 * 이자수익
	 */
	interest_income?: string | null;
	/**
	 * Interest Expense
	 * 이자비용
	 */
	interest_expense?: string | null;
	/**
	 * Income Before Tax
	 * 세전이익
	 */
	income_before_tax?: string | null;
	/**
	 * Income Tax Expense
	 * 법인세비용
	 */
	income_tax_expense?: string | null;
	/**
	 * Net Income
	 * 순이익
	 */
	net_income?: string | null;
	/**
	 * Basic Shares Outstanding
	 * 기본 주식수
	 */
	basic_shares_outstanding?: number | null;
	/**
	 * Diluted Shares Outstanding
	 * 희석 주식수
	 */
	diluted_shares_outstanding?: number | null;
	/**
	 * Basic Eps
	 * 기본 주당순이익
	 */
	basic_eps?: string | null;
	/**
	 * Diluted Eps
	 * 희석 주당순이익
	 */
	diluted_eps?: string | null;
};

/**
 * IncomeStatementResponse
 * 손익계산서 조회 응답 스키마
 */
export type IncomeStatementResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<IncomeStatementData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * IndicatorDataPoint
 * 지표 데이터 포인트
 */
export type IndicatorDataPoint = {
	/**
	 * Date
	 * 날짜 (daily 이상)
	 */
	date?: Date | null;
	/**
	 * Timestamp
	 * 타임스탬프 (intraday)
	 */
	timestamp?: Date | null;
	/**
	 * Value
	 * 지표 값
	 */
	value?: string | null;
	/**
	 * Values
	 * 복수 지표 값들
	 */
	values?: {
		[key: string]: string;
	} | null;
};

/**
 * IndicatorListResponse
 * 지원하는 지표 목록 응답
 */
export type IndicatorListResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 지표 카테고리별 목록 (moving_averages, oscillators, volatility, volume)
	 */
	data?: {
		[key: string]: unknown;
	} | null;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
};

/**
 * IndicatorRecommendation
 * 지표 추천
 */
export type IndicatorRecommendation = {
	/**
	 * Indicator Name
	 * 지표 이름 (예: RSI, MACD, Bollinger Bands)
	 */
	indicator_name: string;
	/**
	 * Indicator Type
	 * 지표 유형 (momentum, trend, volatility 등)
	 */
	indicator_type: string;
	/**
	 * Confidence
	 * 추천 신뢰도
	 */
	confidence: number;
	/**
	 * Rationale
	 * 추천 이유
	 */
	rationale: string;
	/**
	 * Suggested Parameters
	 * 제안된 기본 파라미터
	 */
	suggested_parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Similarity Score
	 * 쿼리와의 유사도 점수 (임베딩 기반)
	 */
	similarity_score: number;
};

/**
 * IndicatorSearchRequest
 * 지표 검색 요청 (임베딩 기반)
 */
export type IndicatorSearchRequest = {
	/**
	 * Query
	 * 검색 쿼리
	 */
	query: string;
	/**
	 * Top K
	 * 상위 K개 결과
	 */
	top_k?: number;
	/**
	 * Filters
	 * 필터 (유형, 카테고리 등)
	 */
	filters?: {
		[key: string]: unknown;
	} | null;
};

/**
 * IndicatorSearchResponse
 * 지표 검색 응답
 */
export type IndicatorSearchResponse = {
	/**
	 * Status
	 * 응답 상태
	 */
	status: string;
	/**
	 * Indicators
	 * 검색된 지표 목록
	 */
	indicators: Array<IndicatorRecommendation>;
	/**
	 * Total
	 * 총 검색 결과 수
	 */
	total: number;
	/**
	 * Query Embedding
	 * 쿼리 임베딩 (디버깅용)
	 */
	query_embedding?: Array<number> | null;
};

/**
 * IntentType
 * 사용자 의도 유형
 */
export type IntentType =
	| "create_strategy"
	| "modify_strategy"
	| "explain_strategy"
	| "recommend_parameters"
	| "optimize_strategy";

/**
 * LoginResponse
 */
export type LoginResponse = {
	/**
	 * Access Token
	 */
	access_token?: string | null;
	/**
	 * Refresh Token
	 */
	refresh_token?: string | null;
	/**
	 * Token Type
	 */
	token_type?: string | null;
	user_info: UserResponse;
};

/**
 * MLSignalInsight
 * Inference payload produced by the ML signal service.
 */
export type MlSignalInsight = {
	/**
	 * Symbol
	 * Instrument symbol
	 */
	symbol: string;
	/**
	 * As Of
	 * Timestamp of the latest observation
	 */
	as_of: Date;
	/**
	 * Lookback Days
	 * Lookback window used for features
	 */
	lookback_days: number;
	/**
	 * Probability
	 * Probability of positive move
	 */
	probability: number;
	/**
	 * Confidence
	 * Confidence proxy from data depth
	 */
	confidence: number;
	/**
	 * Recommendation bucket derived from probability
	 */
	recommendation: SignalRecommendation;
	/**
	 * Feature Contributions
	 * Ordered list of feature contributions
	 */
	feature_contributions?: Array<FeatureContribution>;
	/**
	 * Top Signals
	 * Human readable highlights from the model
	 */
	top_signals?: Array<string>;
};

/**
 * MLSignalResponse
 * API response wrapper for ML signal insights.
 */
export type MlSignalResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Signal inference payload
	 */
	data: MlSignalInsight;
	/**
	 * Response metadata
	 */
	metadata: MetadataInfo;
};

/**
 * MarketContext
 * 시장 맥락 (Phase 1 통합)
 */
export type MarketContext = {
	/**
	 * Regime Analysis
	 * 시장 레짐 분석 (Phase 1 D2)
	 */
	regime_analysis: string;
	/**
	 * Ml Signal Confidence
	 * ML 시그널 신뢰도 (Phase 1 D1)
	 */
	ml_signal_confidence?: number | null;
	/**
	 * Forecast Outlook
	 * 포트폴리오 예측 전망 (Phase 1 D3)
	 */
	forecast_outlook?: string | null;
	/**
	 * External Factors
	 * 외부 요인 (뉴스, 경제 지표 등)
	 */
	external_factors?: Array<string>;
};

/**
 * MarketRegimeResponse
 * API response for regime classification.
 */
export type MarketRegimeResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Regime snapshot
	 */
	data: MarketRegimeSnapshot;
	/**
	 * Response metadata
	 */
	metadata: MetadataInfo;
};

/**
 * MarketRegimeSnapshot
 * Market regime classification snapshot.
 */
export type MarketRegimeSnapshot = {
	/**
	 * Symbol
	 * Instrument symbol for the regime classification
	 */
	symbol: string;
	/**
	 * As Of
	 * Reference timestamp for the snapshot
	 */
	as_of: Date;
	/**
	 * Lookback Days
	 * Lookback window in days
	 */
	lookback_days: number;
	/**
	 * Detected market regime
	 */
	regime: MarketRegimeType;
	/**
	 * Confidence
	 * Confidence of classification
	 */
	confidence: number;
	/**
	 * Probabilities
	 * Probability distribution across regimes
	 */
	probabilities?: {
		[key in MarketRegimeType]?: number;
	};
	/**
	 * Supporting quantitative metrics
	 */
	metrics: RegimeMetrics;
	/**
	 * Notes
	 * Notable drivers or anomalies
	 */
	notes?: Array<string>;
};

/**
 * MarketRegimeType
 * 시장 국면 타입
 */
export type MarketRegimeType = "bullish" | "bearish" | "volatile" | "sideways";

/**
 * MetadataInfo
 * 메타데이터 정보
 */
export type MetadataInfo = {
	data_quality: DataQualityInfo;
	cache_info: CacheInfo;
	/**
	 * Processing Time Ms
	 * 처리 시간 (밀리초)
	 */
	processing_time_ms?: number | null;
};

/**
 * MetricSnapshot
 * Metric snapshot stored alongside runs/versions.
 */
export type MetricSnapshot = {
	/**
	 * Metric Name
	 * 메트릭 이름
	 */
	metric_name: string;
	/**
	 * Value
	 * 메트릭 값
	 */
	value: number;
	/**
	 * Dataset
	 * 평가 데이터셋
	 */
	dataset?: string | null;
};

/**
 * ModelComparisonRequest
 */
export type ModelComparisonRequest = {
	/**
	 * Versions
	 */
	versions: Array<string>;
};

/**
 * ModelComparisonResponse
 */
export type ModelComparisonResponse = {
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Comparisons
	 */
	comparisons: Array<AppSchemasMlPlatformModelLifecycleMetricComparison>;
};

/**
 * ModelInfoResponse
 * Response schema for model info.
 */
export type ModelInfoResponse = {
	/**
	 * Version
	 */
	version: string;
	/**
	 * Model Type
	 */
	model_type: string;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Metrics
	 */
	metrics: {
		[key: string]: number;
	};
	/**
	 * Feature Count
	 */
	feature_count: number;
	/**
	 * Num Iterations
	 */
	num_iterations: number;
	/**
	 * Feature Names
	 */
	feature_names: Array<string>;
};

/**
 * ModelListResponse
 * Response schema for model list.
 */
export type ModelListResponse = {
	/**
	 * Models
	 */
	models: Array<ModelInfoResponse>;
	/**
	 * Total
	 */
	total: number;
	/**
	 * Latest Version
	 */
	latest_version: string | null;
};

/**
 * ModelStage
 * 모델 배포 단계
 */
export type ModelStage = "experimental" | "staging" | "production" | "archived";

/**
 * ModelVersionCreate
 */
export type ModelVersionCreate = {
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Run Id
	 */
	run_id: string;
	stage?: ModelStage;
	/**
	 * Metrics
	 */
	metrics?: Array<MetricSnapshot>;
	/**
	 * Approval Checklist
	 */
	approval_checklist?: Array<DeploymentChecklistItem>;
};

/**
 * ModelVersionResponse
 */
export type ModelVersionResponse = {
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Run Id
	 */
	run_id: string;
	stage: ModelStage;
	/**
	 * Approval Checklist
	 */
	approval_checklist: Array<DeploymentChecklistItem>;
	/**
	 * Metrics
	 */
	metrics: Array<MetricSnapshot>;
	/**
	 * Approved By
	 */
	approved_by: string | null;
	/**
	 * Approved At
	 */
	approved_at: Date | null;
	/**
	 * Rollback Notes
	 */
	rollback_notes: string | null;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Updated At
	 */
	updated_at: Date;
};

/**
 * MomentumConfig
 * 모멘텀 전략 설정
 */
export type MomentumConfig = {
	/**
	 * Config Type
	 * 설정 타입
	 */
	config_type?: "momentum";
	/**
	 * Lookback Period
	 * 조회 기간 (일)
	 */
	lookback_period?: number;
	/**
	 * Min Data Points
	 * 최소 데이터 포인트
	 */
	min_data_points?: number;
	/**
	 * Max Position Size
	 * 최대 포지션 크기
	 */
	max_position_size?: number;
	/**
	 * Stop Loss Pct
	 * 손절 비율
	 */
	stop_loss_pct?: number | null;
	/**
	 * Take Profit Pct
	 * 익절 비율
	 */
	take_profit_pct?: number | null;
	/**
	 * Momentum Period
	 * 모멘텀 계산 기간
	 */
	momentum_period?: number;
	/**
	 * Buy Threshold
	 * 매수 신호 임계값
	 */
	buy_threshold?: number;
	/**
	 * Sell Threshold
	 * 매도 신호 임계값
	 */
	sell_threshold?: number;
	/**
	 * Volume Filter
	 * 거래량 필터 사용 여부
	 */
	volume_filter?: boolean;
	/**
	 * Min Volume Ratio
	 * 최소 거래량 비율
	 */
	min_volume_ratio?: number;
	/**
	 * Top N Stocks
	 * 상위 N개 종목 선택
	 */
	top_n_stocks?: number;
	/**
	 * Rebalance Frequency
	 * 리밸런싱 주기
	 */
	rebalance_frequency?: string;
};

/**
 * NarrativeReportResponse
 * 내러티브 리포트 응답
 */
export type NarrativeReportResponse = {
	/**
	 * Status
	 * 응답 상태
	 */
	status: string;
	/**
	 * Message
	 * 응답 메시지
	 */
	message: string;
	/**
	 * 리포트 데이터
	 */
	data?: BacktestNarrativeReport | null;
	/**
	 * Processing Time Ms
	 * 처리 시간 (밀리초)
	 */
	processing_time_ms: number;
	/**
	 * Cached
	 * 캐시된 결과 여부
	 */
	cached?: boolean;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
};

/**
 * NewsArticle
 * 뉴스 기사.
 */
export type NewsArticle = {
	/**
	 * Title
	 * 제목
	 */
	title: string;
	/**
	 * Summary
	 * 요약
	 */
	summary: string;
	/**
	 * Source
	 * 출처
	 */
	source: string;
	/**
	 * Url
	 * URL
	 */
	url: string;
	/**
	 * Published At
	 * 발행 시간
	 */
	published_at: Date;
	/**
	 * 감정
	 */
	sentiment: SentimentType;
	/**
	 * Relevance Score
	 * 관련도 점수
	 */
	relevance_score: number;
	/**
	 * Symbols
	 * 관련 심볼들
	 */
	symbols: Array<string>;
};

/**
 * NewsFeed
 * 뉴스 피드.
 */
export type NewsFeed = {
	/**
	 * Articles
	 * 기사 목록
	 */
	articles: Array<NewsArticle>;
};

/**
 * NewsFeedResponse
 * 뉴스 피드 응답.
 */
export type NewsFeedResponse = {
	/**
	 * 뉴스 피드
	 */
	data: NewsFeed;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string;
};

/**
 * OAuth2AuthorizeResponse
 */
export type OAuth2AuthorizeResponse = {
	/**
	 * Authorization Url
	 */
	authorization_url: string;
};

/**
 * OAuthAccount
 * Base OAuth account model.
 */
export type OAuthAccount = {
	/**
	 * Oauth Name
	 */
	oauth_name: string;
	/**
	 * Access Token
	 */
	access_token: string;
	/**
	 * Expires At
	 */
	expires_at?: number | null;
	/**
	 * Refresh Token
	 */
	refresh_token?: string | null;
	/**
	 * Account Id
	 */
	account_id: string;
	/**
	 * Account Email
	 */
	account_email: string;
};

/**
 * OptimizationProgress
 * Current optimization study progress.
 */
export type OptimizationProgress = {
	/**
	 * Study Name
	 */
	study_name: string;
	/**
	 * Status
	 */
	status: string;
	/**
	 * Trials Completed
	 */
	trials_completed: number;
	/**
	 * N Trials
	 */
	n_trials: number;
	/**
	 * Best Value
	 */
	best_value?: number | null;
	/**
	 * Best Params
	 */
	best_params?: {
		[key: string]: unknown;
	} | null;
	/**
	 * Started At
	 */
	started_at?: Date | null;
	/**
	 * Estimated Completion
	 */
	estimated_completion?: Date | null;
	/**
	 * Recent Trials
	 */
	recent_trials?: Array<TrialResult>;
};

/**
 * OptimizationRequest
 * Request to start a new optimization study.
 */
export type OptimizationRequest = {
	/**
	 * Symbol
	 * Symbol to optimize (e.g., AAPL)
	 */
	symbol: string;
	/**
	 * Strategy Name
	 * Strategy template name (e.g., RSI)
	 */
	strategy_name: string;
	/**
	 * Search Space
	 * Parameter search space
	 */
	search_space: {
		[key: string]: ParameterSpace;
	};
	/**
	 * N Trials
	 * Number of trials
	 */
	n_trials?: number;
	/**
	 * Direction
	 * Optimization direction (maximize/minimize)
	 */
	direction?: string;
	/**
	 * Sampler
	 * Optuna sampler: TPE/Random/Grid/CMA-ES
	 */
	sampler?: string;
	/**
	 * Objective Metric
	 * Metric to optimize: sharpe_ratio/return/...
	 */
	objective_metric?: string;
	/**
	 * Start Date
	 * Backtest start date (YYYY-MM-DD)
	 */
	start_date: string;
	/**
	 * End Date
	 * Backtest end date (YYYY-MM-DD)
	 */
	end_date: string;
	/**
	 * Initial Capital
	 * Starting capital
	 */
	initial_capital?: number;
	/**
	 * Study Name
	 * Custom study name (auto-generated if not provided)
	 */
	study_name?: string | null;
	/**
	 * Notes
	 * Study description or notes
	 */
	notes?: string | null;
};

/**
 * OptimizationResponse
 * Response from optimization endpoint.
 */
export type OptimizationResponse = {
	/**
	 * Status
	 * success/error
	 */
	status: string;
	/**
	 * Study Name
	 */
	study_name: string;
	/**
	 * Message
	 */
	message: string;
	/**
	 * Data
	 */
	data?: OptimizationProgress | OptimizationResult | null;
};

/**
 * OptimizationResult
 * Completed optimization study result.
 */
export type OptimizationResult = {
	/**
	 * Study Name
	 */
	study_name: string;
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Strategy Name
	 */
	strategy_name: string;
	/**
	 * Best Params
	 */
	best_params: {
		[key: string]: unknown;
	};
	/**
	 * Best Value
	 */
	best_value: number;
	/**
	 * Best Trial Number
	 */
	best_trial_number: number;
	/**
	 * Trials Completed
	 */
	trials_completed: number;
	/**
	 * N Trials
	 */
	n_trials: number;
	/**
	 * Direction
	 */
	direction: string;
	/**
	 * Objective Metric
	 */
	objective_metric: string;
	/**
	 * Sharpe Ratio
	 */
	sharpe_ratio?: number | null;
	/**
	 * Total Return
	 */
	total_return?: number | null;
	/**
	 * Max Drawdown
	 */
	max_drawdown?: number | null;
	/**
	 * Win Rate
	 */
	win_rate?: number | null;
	/**
	 * Started At
	 */
	started_at: Date;
	/**
	 * Completed At
	 */
	completed_at: Date;
	/**
	 * Total Duration Seconds
	 */
	total_duration_seconds: number;
	/**
	 * Top Trials
	 * Top 5 trials
	 */
	top_trials?: Array<TrialResult>;
};

/**
 * OrderType
 * 주문 타입
 */
export type OrderType = "MARKET" | "LIMIT" | "STOP" | "STOP_LIMIT";

/**
 * ParameterSnapshot
 * Parameter capture for a run.
 */
export type ParameterSnapshot = {
	/**
	 * Name
	 * 파라미터 이름
	 */
	name: string;
	/**
	 * Value
	 * 파라미터 값
	 */
	value: unknown;
};

/**
 * ParameterSpace
 * Search space definition for a single parameter.
 */
export type ParameterSpace = {
	/**
	 * Type
	 * Parameter type: int, float, categorical
	 */
	type: string;
	/**
	 * Low
	 * Lower bound for numeric types
	 */
	low?: number | null;
	/**
	 * High
	 * Upper bound for numeric types
	 */
	high?: number | null;
	/**
	 * Step
	 * Step size for discrete sampling
	 */
	step?: number | null;
	/**
	 * Choices
	 * Choices for categorical
	 */
	choices?: Array<unknown> | null;
	/**
	 * Log
	 * Use log scale for sampling
	 */
	log?: boolean;
};

/**
 * ParameterValidation
 * 파라미터 검증 결과
 */
export type ParameterValidation = {
	/**
	 * Parameter Name
	 * 파라미터 이름
	 */
	parameter_name: string;
	/**
	 * Value
	 * 파라미터 값
	 */
	value: unknown;
	/**
	 * Is Valid
	 * 유효성 여부
	 */
	is_valid: boolean;
	validation_status: ValidationStatus;
	/**
	 * Message
	 * 검증 메시지 (경고/오류)
	 */
	message?: string | null;
	/**
	 * Suggested Value
	 * 제안된 값 (오류 시)
	 */
	suggested_value?: unknown | null;
	/**
	 * Value Range
	 * 허용 범위 (min, max, allowed_values 등)
	 */
	value_range?: {
		[key: string]: unknown;
	} | null;
};

/**
 * ParsedIntent
 * 파싱된 사용자 의도
 */
export type ParsedIntent = {
	/**
	 * 의도 유형
	 */
	intent_type: IntentType;
	/**
	 * Confidence
	 * 의도 파싱 신뢰도
	 */
	confidence: number;
	confidence_level: ConfidenceLevel;
	/**
	 * Extracted Entities
	 * 추출된 엔티티 (지표명, 파라미터 등)
	 */
	extracted_entities?: {
		[key: string]: unknown;
	};
	/**
	 * Reasoning
	 * 의도 판단 근거
	 */
	reasoning: string;
};

/**
 * PerformanceAnalysis
 * 성과 분석
 */
export type PerformanceAnalysis = {
	/**
	 * Summary
	 * 성과 요약 (2-3 문장)
	 */
	summary: string;
	/**
	 * Return Analysis
	 * 수익률 분석
	 */
	return_analysis: string;
	/**
	 * Risk Analysis
	 * 리스크 분석
	 */
	risk_analysis: string;
	/**
	 * Sharpe Interpretation
	 * 샤프 비율 해석
	 */
	sharpe_interpretation: string;
	/**
	 * Drawdown Commentary
	 * 낙폭 해설
	 */
	drawdown_commentary: string;
	/**
	 * Trade Statistics Summary
	 * 거래 통계 요약
	 */
	trade_statistics_summary: string;
};

/**
 * PerformanceMetrics
 * 성과 지표 내장 모델
 */
export type PerformanceMetrics = {
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return: number;
	/**
	 * Annualized Return
	 * 연환산 수익률
	 */
	annualized_return: number;
	/**
	 * Volatility
	 * 변동성
	 */
	volatility: number;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio: number;
	/**
	 * Max Drawdown
	 * 최대 낙폭
	 */
	max_drawdown: number;
	/**
	 * Total Trades
	 * 총 거래 수
	 */
	total_trades: number;
	/**
	 * Winning Trades
	 * 승리 거래 수
	 */
	winning_trades: number;
	/**
	 * Losing Trades
	 * 패배 거래 수
	 */
	losing_trades: number;
	/**
	 * Win Rate
	 * 승률
	 */
	win_rate: number;
};

/**
 * PerformanceResponse
 * Performance response
 */
export type PerformanceResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 성과 ID
	 */
	id: string;
	/**
	 * Strategy Id
	 * 전략 ID
	 */
	strategy_id: string;
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Total Signals
	 * 총 신호 수
	 */
	total_signals: number;
	/**
	 * Buy Signals
	 * 매수 신호 수
	 */
	buy_signals: number;
	/**
	 * Sell Signals
	 * 매도 신호 수
	 */
	sell_signals: number;
	/**
	 * Hold Signals
	 * 보유 신호 수
	 */
	hold_signals: number;
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return?: number | null;
	/**
	 * Win Rate
	 * 승률
	 */
	win_rate?: number | null;
	/**
	 * Avg Return Per Trade
	 * 거래당 평균 수익률
	 */
	avg_return_per_trade?: number | null;
	/**
	 * Max Drawdown
	 * 최대 낙폭
	 */
	max_drawdown?: number | null;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio?: number | null;
	/**
	 * Calmar Ratio
	 * 칼마 비율
	 */
	calmar_ratio?: number | null;
	/**
	 * Volatility
	 * 변동성
	 */
	volatility?: number | null;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date?: Date | null;
	/**
	 * End Date
	 * 종료일
	 */
	end_date?: Date | null;
	/**
	 * Accuracy
	 * 정확도
	 */
	accuracy?: number | null;
	/**
	 * Avg Signal Strength
	 * 평균 신호 강도
	 */
	avg_signal_strength?: number | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: Date;
};

/**
 * PortfolioDataPoint
 * 포트폴리오 데이터 포인트.
 */
export type PortfolioDataPoint = {
	/**
	 * Timestamp
	 * 시간
	 */
	timestamp: Date;
	/**
	 * Portfolio Value
	 * 포트폴리오 가치
	 */
	portfolio_value: number;
	/**
	 * Pnl
	 * 손익
	 */
	pnl: number;
	/**
	 * Pnl Percentage
	 * 손익률
	 */
	pnl_percentage: number;
	/**
	 * Benchmark Value
	 * 벤치마크 가치
	 */
	benchmark_value?: number | null;
};

/**
 * PortfolioForecastDistribution
 * Distribution of future portfolio values based on Monte Carlo proxy.
 */
export type PortfolioForecastDistribution = {
	/**
	 * As Of
	 * Timestamp the forecast was generated
	 */
	as_of: Date;
	/**
	 * Horizon Days
	 * Forecast horizon in days
	 */
	horizon_days: number;
	/**
	 * Last Portfolio Value
	 * Most recent observed portfolio value
	 */
	last_portfolio_value: number;
	/**
	 * Expected Return Pct
	 * Expected return over the horizon (%)
	 */
	expected_return_pct: number;
	/**
	 * Expected Volatility Pct
	 * Expected volatility over the horizon (%)
	 */
	expected_volatility_pct: number;
	/**
	 * Percentile Bands
	 * Projected percentile bands
	 */
	percentile_bands: Array<ForecastPercentileBand>;
	/**
	 * Methodology
	 * Shorthand name of the forecasting methodology
	 */
	methodology?: string;
};

/**
 * PortfolioForecastResponse
 * API response for probabilistic portfolio forecasts.
 */
export type PortfolioForecastResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Forecast output
	 */
	data: PortfolioForecastDistribution;
	/**
	 * Response metadata
	 */
	metadata: MetadataInfo;
};

/**
 * PortfolioPerformance
 * 포트폴리오 성과 데이터.
 */
export type PortfolioPerformance = {
	/**
	 * Period
	 * 기간
	 */
	period: string;
	/**
	 * Data Points
	 * 데이터 포인트들
	 */
	data_points: Array<PortfolioDataPoint>;
	/**
	 * 성과 요약
	 */
	summary: PortfolioPerformanceSummary;
};

/**
 * PortfolioPerformanceResponse
 * 포트폴리오 성과 응답.
 */
export type PortfolioPerformanceResponse = {
	/**
	 * 포트폴리오 성과
	 */
	data: PortfolioPerformance;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string;
};

/**
 * PortfolioPerformanceSummary
 * 포트폴리오 성과 요약.
 */
export type PortfolioPerformanceSummary = {
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return: number;
	/**
	 * Volatility
	 * 변동성
	 */
	volatility: number;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio: number;
	/**
	 * Max Drawdown
	 * 최대 낙폭
	 */
	max_drawdown: number;
};

/**
 * PortfolioSummary
 * 포트폴리오 요약 정보.
 */
export type PortfolioSummary = {
	/**
	 * Total Value
	 * 총 포트폴리오 가치
	 */
	total_value: number;
	/**
	 * Total Pnl
	 * 총 손익
	 */
	total_pnl: number;
	/**
	 * Total Pnl Percentage
	 * 총 손익률
	 */
	total_pnl_percentage: number;
	/**
	 * Daily Pnl
	 * 일일 손익
	 */
	daily_pnl: number;
	/**
	 * Daily Pnl Percentage
	 * 일일 손익률
	 */
	daily_pnl_percentage: number;
};

/**
 * Position
 * 포지션 정보 내장 모델
 */
export type Position = {
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	/**
	 * Quantity
	 * 보유 수량
	 */
	quantity: number;
	/**
	 * Avg Price
	 * 평균 단가
	 */
	avg_price: number;
	/**
	 * Current Price
	 * 현재 가격
	 */
	current_price: number;
	/**
	 * Unrealized Pnl
	 * 미실현 손익
	 */
	unrealized_pnl: number;
	/**
	 * Realized Pnl
	 * 실현 손익
	 */
	realized_pnl?: number;
	/**
	 * First Buy Date
	 * 최초 매수일
	 */
	first_buy_date: Date;
	/**
	 * Last Update
	 * 마지막 업데이트
	 */
	last_update?: Date;
};

/**
 * PredictiveDashboardInsights
 * Aggregated predictive insights exposed on the dashboard.
 */
export type PredictiveDashboardInsights = {
	/**
	 * Latest ML signal insight
	 */
	signal: MlSignalInsight;
	/**
	 * Current market regime snapshot
	 */
	regime: MarketRegimeSnapshot;
	/**
	 * Probabilistic portfolio forecast
	 */
	forecast: PortfolioForecastDistribution;
};

/**
 * PredictiveInsightsResponse
 * Response wrapper for predictive dashboard bundle.
 */
export type PredictiveInsightsResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Combined predictive intelligence payload
	 */
	data: PredictiveDashboardInsights;
	/**
	 * Response metadata for predictive payload
	 */
	metadata?: MetadataInfo;
};

/**
 * PromptAuditLogResponse
 */
export type PromptAuditLogResponse = {
	/**
	 * Prompt Id
	 */
	prompt_id: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Action
	 */
	action: string;
	/**
	 * Actor
	 */
	actor: string;
	/**
	 * Details
	 */
	details: {
		[key: string]: unknown;
	};
	/**
	 * Created At
	 */
	created_at: Date;
};

/**
 * PromptEvaluationRequest
 */
export type PromptEvaluationRequest = {
	/**
	 * Prompt Id
	 */
	prompt_id: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Content
	 */
	content: string;
	/**
	 * Evaluator
	 */
	evaluator?: string;
	/**
	 * Context Samples
	 */
	context_samples?: Array<string>;
};

/**
 * PromptEvaluationResponse
 */
export type PromptEvaluationResponse = {
	evaluation: PromptEvaluationSummary;
};

/**
 * PromptEvaluationSummary
 * Summary of automated evaluation results.
 */
export type PromptEvaluationSummary = {
	/**
	 * Toxicity Score
	 * 독성 점수 0-1
	 */
	toxicity_score: number;
	/**
	 * Hallucination Score
	 * 환각 가능성 점수 0-1
	 */
	hallucination_score: number;
	/**
	 * Factual Consistency
	 * 사실 일치 점수 0-1
	 */
	factual_consistency: number;
	/**
	 * 위험도
	 */
	risk_level: PromptRiskLevel;
	/**
	 * Evaluator
	 * 평가자 또는 시스템
	 */
	evaluator: string;
	/**
	 * Evaluated At
	 * 평가 시각
	 */
	evaluated_at?: Date;
};

/**
 * PromptRiskLevel
 * 프롬프트 위험도
 */
export type PromptRiskLevel = "low" | "medium" | "high";

/**
 * PromptStatus
 * 프롬프트 템플릿 상태
 */
export type PromptStatus =
	| "draft"
	| "in_review"
	| "approved"
	| "rejected"
	| "archived";

/**
 * PromptTemplateCreate
 */
export type PromptTemplateCreate = {
	/**
	 * Prompt Id
	 */
	prompt_id: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Content
	 */
	content: string;
	/**
	 * Owner
	 */
	owner: string;
	/**
	 * Tags
	 */
	tags?: Array<string>;
	risk_level?: PromptRiskLevel;
	/**
	 * Policies
	 */
	policies?: Array<string>;
};

/**
 * PromptTemplateResponse
 */
export type PromptTemplateResponse = {
	/**
	 * Prompt Id
	 */
	prompt_id: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Content
	 */
	content: string;
	/**
	 * Owner
	 */
	owner: string;
	/**
	 * Tags
	 */
	tags: Array<string>;
	status: PromptStatus;
	risk_level: PromptRiskLevel;
	/**
	 * Policies
	 */
	policies: Array<string>;
	evaluation: PromptEvaluationSummary | null;
	/**
	 * Approval Notes
	 */
	approval_notes: string | null;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Updated At
	 */
	updated_at: Date;
};

/**
 * PromptTemplateUpdate
 */
export type PromptTemplateUpdate = {
	/**
	 * Name
	 */
	name?: string | null;
	/**
	 * Description
	 */
	description?: string | null;
	/**
	 * Content
	 */
	content?: string | null;
	/**
	 * Tags
	 */
	tags?: Array<string> | null;
	risk_level?: PromptRiskLevel | null;
	/**
	 * Policies
	 */
	policies?: Array<string> | null;
	status?: PromptStatus | null;
	/**
	 * Approval Notes
	 */
	approval_notes?: string | null;
};

/**
 * PromptUsageLogCreate
 */
export type PromptUsageLogCreate = {
	/**
	 * Prompt Id
	 */
	prompt_id: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Session Id
	 */
	session_id: string;
	/**
	 * Outcome
	 */
	outcome: string;
	/**
	 * Toxicity Score
	 */
	toxicity_score?: number | null;
	/**
	 * Hallucination Flags
	 */
	hallucination_flags?: Array<string>;
};

/**
 * PromptUsageLogResponse
 */
export type PromptUsageLogResponse = {
	/**
	 * Prompt Id
	 */
	prompt_id: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Session Id
	 */
	session_id: string;
	/**
	 * Outcome
	 */
	outcome: string;
	/**
	 * Toxicity Score
	 */
	toxicity_score: number | null;
	/**
	 * Hallucination Flags
	 */
	hallucination_flags: Array<string>;
	/**
	 * Created At
	 */
	created_at: Date;
};

/**
 * PromptWorkflowAction
 */
export type PromptWorkflowAction = {
	/**
	 * Reviewer
	 */
	reviewer: string;
	/**
	 * Notes
	 */
	notes?: string | null;
};

export type PydanticObjectId = string;

/**
 * QuoteData
 * 실시간 호가 응답 모델
 */
export type QuoteData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Timestamp
	 * 시각
	 */
	timestamp: Date;
	/**
	 * Price
	 * 현재가
	 */
	price: string;
	/**
	 * Change
	 * 전일 대비 변동
	 */
	change?: string | null;
	/**
	 * Change Percent
	 * 변동률 (%)
	 */
	change_percent?: string | null;
	/**
	 * Previous Close
	 * 전일 종가
	 */
	previous_close?: string | null;
	/**
	 * Open Price
	 * 당일 시가
	 */
	open_price?: string | null;
	/**
	 * High Price
	 * 당일 고가
	 */
	high_price?: string | null;
	/**
	 * Low Price
	 * 당일 저가
	 */
	low_price?: string | null;
	/**
	 * Volume
	 * 당일 누적 거래량
	 */
	volume?: number | null;
	/**
	 * Bid Price
	 * 매수 호가
	 */
	bid_price?: string | null;
	/**
	 * Ask Price
	 * 매도 호가
	 */
	ask_price?: string | null;
	/**
	 * Bid Size
	 * 매수 호가 수량
	 */
	bid_size?: number | null;
	/**
	 * Ask Size
	 * 매도 호가 수량
	 */
	ask_size?: number | null;
};

/**
 * QuoteResponse
 * 실시간 호가 응답 스키마
 */
export type QuoteResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * 데이터
	 */
	data: QuoteData;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
};

/**
 * RSIMeanReversionConfig
 * RSI 평균회귀 전략 설정
 */
export type RsiMeanReversionConfig = {
	/**
	 * Config Type
	 * 설정 타입
	 */
	config_type?: "rsi_mean_reversion";
	/**
	 * Lookback Period
	 * 조회 기간 (일)
	 */
	lookback_period?: number;
	/**
	 * Min Data Points
	 * 최소 데이터 포인트
	 */
	min_data_points?: number;
	/**
	 * Max Position Size
	 * 최대 포지션 크기
	 */
	max_position_size?: number;
	/**
	 * Stop Loss Pct
	 * 손절 비율
	 */
	stop_loss_pct?: number | null;
	/**
	 * Take Profit Pct
	 * 익절 비율
	 */
	take_profit_pct?: number | null;
	/**
	 * Rsi Period
	 * RSI 계산 기간
	 */
	rsi_period?: number;
	/**
	 * Oversold Threshold
	 * 과매도 임계값
	 */
	oversold_threshold?: number;
	/**
	 * Overbought Threshold
	 * 과매수 임계값
	 */
	overbought_threshold?: number;
	/**
	 * Confirmation Periods
	 * 신호 확인 기간
	 */
	confirmation_periods?: number;
};

/**
 * RecentActivity
 * 최근 활동 정보.
 */
export type RecentActivity = {
	/**
	 * Trades Count Today
	 * 오늘 거래 수
	 */
	trades_count_today: number;
	/**
	 * Backtests Count Week
	 * 이번 주 백테스트 수
	 */
	backtests_count_week: number;
	/**
	 * Last Login
	 * 마지막 로그인
	 */
	last_login?: Date | null;
};

/**
 * RecentTrades
 * 최근 거래 데이터.
 */
export type RecentTrades = {
	/**
	 * Trades
	 * 거래 목록
	 */
	trades: Array<TradeItem>;
	/**
	 * 거래 요약
	 */
	summary: TradesSummary;
};

/**
 * RecentTradesResponse
 * 최근 거래 응답.
 */
export type RecentTradesResponse = {
	/**
	 * 최근 거래 데이터
	 */
	data: RecentTrades;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string;
};

/**
 * Recommendations
 * 추천 사항
 */
export type Recommendations = {
	/**
	 * 추천 액션
	 */
	action: ReportRecommendation;
	/**
	 * Rationale
	 * 추천 근거
	 */
	rationale: string;
	/**
	 * Next Steps
	 * 다음 단계 (2-4개)
	 */
	next_steps: Array<string>;
	/**
	 * Optimization Suggestions
	 * 최적화 제안 (선택 사항)
	 */
	optimization_suggestions?: Array<string> | null;
	/**
	 * Risk Mitigation
	 * 리스크 완화 방안 (선택 사항)
	 */
	risk_mitigation?: Array<string> | null;
};

/**
 * RegimeMetrics
 * Quantitative metrics used for regime detection.
 */
export type RegimeMetrics = {
	/**
	 * Trailing Return Pct
	 * Lookback total return in %
	 */
	trailing_return_pct: number;
	/**
	 * Volatility Pct
	 * Annualised volatility in %
	 */
	volatility_pct: number;
	/**
	 * Drawdown Pct
	 * Max drawdown observed in %
	 */
	drawdown_pct: number;
	/**
	 * Momentum Z
	 * Z-score of short term momentum
	 */
	momentum_z: number;
};

/**
 * ReportRecommendation
 * 리포트 추천 액션
 */
export type ReportRecommendation =
	| "proceed"
	| "optimize"
	| "reject"
	| "research";

/**
 * RiskAssessment
 * 리스크 평가
 */
export type RiskAssessment = {
	/**
	 * Overall Risk Level
	 * 전체 리스크 수준 (Low/Medium/High/Very High)
	 */
	overall_risk_level: string;
	/**
	 * Risk Summary
	 * 리스크 요약
	 */
	risk_summary: string;
	/**
	 * Volatility Assessment
	 * 변동성 평가
	 */
	volatility_assessment: string;
	/**
	 * Max Drawdown Context
	 * 최대 낙폭 맥락
	 */
	max_drawdown_context: string;
	/**
	 * Concentration Risk
	 * 집중 리스크 분석
	 */
	concentration_risk: string;
	/**
	 * Tail Risk
	 * 테일 리스크 평가
	 */
	tail_risk: string;
};

/**
 * RunCreate
 */
export type RunCreate = {
	/**
	 * Run Id
	 */
	run_id: string;
	/**
	 * Experiment Name
	 */
	experiment_name: string;
	/**
	 * Parameters
	 */
	parameters?: Array<ParameterSnapshot>;
	/**
	 * Metrics
	 */
	metrics?: Array<MetricSnapshot>;
	/**
	 * Dataset Name
	 */
	dataset_name?: string | null;
	/**
	 * Dataset Version
	 */
	dataset_version?: string | null;
	/**
	 * Tags
	 */
	tags?: Array<string>;
	/**
	 * Artifacts
	 */
	artifacts?: Array<ArtifactReference>;
	/**
	 * Notes
	 */
	notes?: string | null;
};

/**
 * RunResponse
 */
export type RunResponse = {
	/**
	 * Run Id
	 */
	run_id: string;
	/**
	 * Experiment Name
	 */
	experiment_name: string;
	status: RunStatus;
	/**
	 * Started At
	 */
	started_at: Date;
	/**
	 * Completed At
	 */
	completed_at: Date | null;
	/**
	 * Parameters
	 */
	parameters: Array<ParameterSnapshot>;
	/**
	 * Metrics
	 */
	metrics: Array<MetricSnapshot>;
	/**
	 * Dataset Name
	 */
	dataset_name: string | null;
	/**
	 * Dataset Version
	 */
	dataset_version: string | null;
	/**
	 * Tags
	 */
	tags: Array<string>;
	/**
	 * Artifacts
	 */
	artifacts: Array<ArtifactReference>;
	/**
	 * Notes
	 */
	notes: string | null;
};

/**
 * RunStatus
 * 실행 상태
 */
export type RunStatus = "running" | "completed" | "failed" | "cancelled";

/**
 * RunUpdate
 */
export type RunUpdate = {
	status?: RunStatus | null;
	/**
	 * Metrics
	 */
	metrics?: Array<MetricSnapshot> | null;
	/**
	 * Completed At
	 */
	completed_at?: Date | null;
	/**
	 * Artifacts
	 */
	artifacts?: Array<ArtifactReference> | null;
	/**
	 * Notes
	 */
	notes?: string | null;
};

/**
 * SMACrossoverConfig
 * SMA 크로스오버 전략 설정
 */
export type SmaCrossoverConfig = {
	/**
	 * Config Type
	 * 설정 타입
	 */
	config_type?: "sma_crossover";
	/**
	 * Lookback Period
	 * 조회 기간 (일)
	 */
	lookback_period?: number;
	/**
	 * Min Data Points
	 * 최소 데이터 포인트
	 */
	min_data_points?: number;
	/**
	 * Max Position Size
	 * 최대 포지션 크기
	 */
	max_position_size?: number;
	/**
	 * Stop Loss Pct
	 * 손절 비율
	 */
	stop_loss_pct?: number | null;
	/**
	 * Take Profit Pct
	 * 익절 비율
	 */
	take_profit_pct?: number | null;
	/**
	 * Short Window
	 * 단기 이동평균 기간
	 */
	short_window?: number;
	/**
	 * Long Window
	 * 장기 이동평균 기간
	 */
	long_window?: number;
	/**
	 * Min Crossover Strength
	 * 최소 교차 강도
	 */
	min_crossover_strength?: number;
};

/**
 * ScenarioCreate
 */
export type ScenarioCreate = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Symbols
	 */
	symbols?: Array<string>;
	/**
	 * Start Date
	 */
	start_date?: Date | null;
	/**
	 * End Date
	 */
	end_date?: Date | null;
	/**
	 * Baseline Backtest Ids
	 */
	baseline_backtest_ids?: Array<string>;
	/**
	 * Benchmark Metrics
	 */
	benchmark_metrics?: Array<BenchmarkMetric>;
	/**
	 * Stress Events
	 */
	stress_events?: Array<ScenarioEvent>;
};

/**
 * ScenarioEvent
 * Historical event or stress period definition.
 */
export type ScenarioEvent = {
	/**
	 * Label
	 * 이벤트 라벨
	 */
	label: string;
	/**
	 * Start
	 * 시작일
	 */
	start: Date;
	/**
	 * End
	 * 종료일
	 */
	end: Date;
};

/**
 * ScenarioResponse
 */
export type ScenarioResponse = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Start Date
	 */
	start_date: Date | null;
	/**
	 * End Date
	 */
	end_date: Date | null;
	/**
	 * Baseline Backtest Ids
	 */
	baseline_backtest_ids: Array<string>;
	/**
	 * Benchmark Metrics
	 */
	benchmark_metrics: Array<BenchmarkMetric>;
	/**
	 * Stress Events
	 */
	stress_events: Array<ScenarioEvent>;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Updated At
	 */
	updated_at: Date;
};

/**
 * ScenarioUpdate
 */
export type ScenarioUpdate = {
	/**
	 * Description
	 */
	description?: string | null;
	/**
	 * Symbols
	 */
	symbols?: Array<string> | null;
	/**
	 * Start Date
	 */
	start_date?: Date | null;
	/**
	 * End Date
	 */
	end_date?: Date | null;
	/**
	 * Baseline Backtest Ids
	 */
	baseline_backtest_ids?: Array<string> | null;
	/**
	 * Benchmark Metrics
	 */
	benchmark_metrics?: Array<BenchmarkMetric> | null;
	/**
	 * Stress Events
	 */
	stress_events?: Array<ScenarioEvent> | null;
};

/**
 * SentimentType
 * 감정 분석 유형.
 */
export type SentimentType = "positive" | "neutral" | "negative";

/**
 * SignalRecommendation
 * Recommendation derived from model probability.
 */
export type SignalRecommendation =
	| "strong_buy"
	| "buy"
	| "hold"
	| "sell"
	| "strong_sell";

/**
 * SignalType
 * 전략 신호 타입
 */
export type SignalType = "BUY" | "SELL" | "HOLD";

/**
 * StockSymbolsResponse
 */
export type StockSymbolsResponse = {
	/**
	 * Symbols
	 */
	symbols: Array<SymbolInfo>;
	/**
	 * Count
	 */
	count: number;
	/**
	 * Search Term
	 */
	search_term?: string | null;
};

/**
 * StrategyApprovalRequest
 * 전략 승인 요청 (휴먼 인 더 루프)
 */
export type StrategyApprovalRequest = {
	/**
	 * Strategy Builder Response Id
	 * 빌더 응답 ID
	 */
	strategy_builder_response_id: string;
	/**
	 * Approved
	 * 승인 여부
	 */
	approved: boolean;
	/**
	 * Modifications
	 * 수정 사항
	 */
	modifications?: {
		[key: string]: unknown;
	} | null;
	/**
	 * Approval Notes
	 * 승인 메모
	 */
	approval_notes?: string | null;
};

/**
 * StrategyApprovalResponse
 * 전략 승인 응답
 */
export type StrategyApprovalResponse = {
	/**
	 * Status
	 * 승인 상태 (approved/rejected/modified)
	 */
	status: string;
	/**
	 * Message
	 * 응답 메시지
	 */
	message: string;
	/**
	 * Strategy Id
	 * 생성된 전략 ID (승인 시)
	 */
	strategy_id?: string | null;
	/**
	 * Approved At
	 * 승인 시간
	 */
	approved_at?: Date;
};

/**
 * StrategyBuilderRequest
 * 대화형 전략 빌더 요청
 */
export type StrategyBuilderRequest = {
	/**
	 * Query
	 * 자연어 전략 설명 또는 요청
	 */
	query: string;
	/**
	 * Context
	 * 추가 컨텍스트 (심볼, 기간, 제약조건 등)
	 */
	context?: {
		[key: string]: unknown;
	} | null;
	/**
	 * User Preferences
	 * 사용자 선호도 (위험 선호도, 거래 빈도 등)
	 */
	user_preferences?: {
		[key: string]: unknown;
	} | null;
	/**
	 * Existing Strategy Id
	 * 수정할 기존 전략 ID (modify intent)
	 */
	existing_strategy_id?: string | null;
	/**
	 * Require Human Approval
	 * 사람 승인 필요 여부 (휴먼 인 더 루프)
	 */
	require_human_approval?: boolean;
};

/**
 * StrategyBuilderResponse
 * 대화형 전략 빌더 응답
 */
export type StrategyBuilderResponse = {
	/**
	 * Status
	 * 처리 상태 (success/warning/error)
	 */
	status: string;
	/**
	 * Message
	 * 응답 메시지
	 */
	message: string;
	parsed_intent: ParsedIntent;
	/**
	 * 생성된 전략 설정
	 */
	generated_strategy?: GeneratedStrategyConfig | null;
	/**
	 * 휴먼 승인 요청 정보
	 */
	human_approval: HumanApprovalRequest;
	/**
	 * Alternative Suggestions
	 * 대안 제안 (의도 파싱 실패 시)
	 */
	alternative_suggestions?: Array<string> | null;
	/**
	 * Processing Time Ms
	 * 처리 시간 (밀리초)
	 */
	processing_time_ms: number;
	/**
	 * Llm Model
	 * 사용된 LLM 모델
	 */
	llm_model: string;
	/**
	 * Generated At
	 * 생성 시간
	 */
	generated_at?: Date;
	/**
	 * Validation Errors
	 * 검증 오류 목록
	 */
	validation_errors?: Array<string> | null;
	/**
	 * Overall Confidence
	 * 전체 신뢰도 (의도 + 전략 생성)
	 */
	overall_confidence: number;
};

/**
 * StrategyComparison
 * 전략 비교 데이터.
 */
export type StrategyComparison = {
	/**
	 * Strategies
	 * 전략 목록
	 */
	strategies: Array<StrategyPerformanceItem>;
};

/**
 * StrategyComparisonRequest
 * 전략 비교 요청
 */
export type StrategyComparisonRequest = {
	/**
	 * Strategy Ids
	 * 비교할 전략 ID 목록 (2-5개)
	 */
	strategy_ids: Array<string>;
	/**
	 * Metrics
	 * 비교할 메트릭 목록
	 */
	metrics?: Array<string>;
	/**
	 * Natural Language Query
	 * 자연어 비교 질의 (예: '가장 안정적인 전략은?')
	 */
	natural_language_query?: string | null;
};

/**
 * StrategyComparisonResponse
 * 전략 비교 응답.
 */
export type StrategyComparisonResponse = {
	/**
	 * 전략 비교 데이터
	 */
	data: StrategyComparison;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string;
};

/**
 * StrategyComparisonResult
 * 전략 비교 결과
 */
export type StrategyComparisonResult = {
	/**
	 * Query
	 * 원본 질의
	 */
	query: string;
	/**
	 * Strategies
	 * 전략별 메트릭
	 */
	strategies: Array<{
		[key: string]: unknown;
	}>;
	/**
	 * Ranking
	 * 순위 (전략 ID 목록)
	 */
	ranking: Array<string>;
	/**
	 * Summary
	 * LLM 요약
	 */
	summary: string;
	/**
	 * Recommendation
	 * 추천 전략 ID
	 */
	recommendation: string;
	/**
	 * Reasoning
	 * 추천 근거
	 */
	reasoning: string;
};

/**
 * StrategyCreate
 * Strategy creation request
 */
export type StrategyCreate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Config
	 * 전략 설정 (타입 안전)
	 */
	config:
		| ({
				config_type: "sma_crossover";
		  } & SmaCrossoverConfig)
		| ({
				config_type: "rsi_mean_reversion";
		  } & RsiMeanReversionConfig)
		| ({
				config_type: "momentum";
		  } & MomentumConfig)
		| ({
				config_type: "buy_and_hold";
		  } & BuyAndHoldConfig);
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * StrategyCreateFromTemplate
 * Create strategy from template request
 */
export type StrategyCreateFromTemplate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * Config Overrides
	 * 설정 오버라이드
	 */
	config_overrides?:
		| ({
				config_type: "sma_crossover";
		  } & SmaCrossoverConfig)
		| ({
				config_type: "rsi_mean_reversion";
		  } & RsiMeanReversionConfig)
		| ({
				config_type: "momentum";
		  } & MomentumConfig)
		| ({
				config_type: "buy_and_hold";
		  } & BuyAndHoldConfig)
		| null;
};

/**
 * StrategyExecute
 * Strategy execution request
 */
export type StrategyExecute = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbol
	 * 대상 심볼
	 */
	symbol: string;
	/**
	 * Market Data
	 * 시장 데이터
	 */
	market_data: {
		[key: string]: unknown;
	};
};

/**
 * StrategyInsights
 * 전략 인사이트
 */
export type StrategyInsights = {
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Strategy Description
	 * 전략 설명
	 */
	strategy_description: string;
	/**
	 * Key Parameters
	 * 핵심 파라미터
	 */
	key_parameters: {
		[key: string]: unknown;
	};
	/**
	 * Parameter Sensitivity
	 * 파라미터 민감도 분석
	 */
	parameter_sensitivity: string;
	/**
	 * Strengths
	 * 전략 강점 (2-4개)
	 */
	strengths: Array<string>;
	/**
	 * Weaknesses
	 * 전략 약점 (2-4개)
	 */
	weaknesses: Array<string>;
};

/**
 * StrategyListResponse
 * Strategy list response
 */
export type StrategyListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Strategies
	 * 전략 목록
	 */
	strategies: Array<StrategyResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * StrategyPerformanceItem
 * 전략 성과 항목.
 */
export type StrategyPerformanceItem = {
	/**
	 * Strategy Id
	 * 전략 ID
	 */
	strategy_id: string;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * Type
	 * 전략 타입
	 */
	type: string;
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return: number;
	/**
	 * Win Rate
	 * 승률
	 */
	win_rate: number;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio: number;
	/**
	 * Trades Count
	 * 거래 수
	 */
	trades_count: number;
	/**
	 * Last Execution
	 * 마지막 실행
	 */
	last_execution?: Date | null;
	/**
	 * 상태
	 */
	status: StrategyStatus;
};

/**
 * StrategyResponse
 * Strategy response
 */
export type StrategyResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 전략 ID
	 */
	id: string;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Config
	 * 전략 설정 (타입 안전)
	 */
	config:
		| ({
				config_type: "sma_crossover";
		  } & SmaCrossoverConfig)
		| ({
				config_type: "rsi_mean_reversion";
		  } & RsiMeanReversionConfig)
		| ({
				config_type: "momentum";
		  } & MomentumConfig)
		| ({
				config_type: "buy_and_hold";
		  } & BuyAndHoldConfig);
	/**
	 * Is Active
	 * 활성화 상태
	 */
	is_active: boolean;
	/**
	 * Is Template
	 * 템플릿 여부
	 */
	is_template: boolean;
	/**
	 * Created By
	 * 생성자
	 */
	created_by?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: Date;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * StrategyStatus
 * 전략 상태.
 */
export type StrategyStatus = "active" | "paused" | "stopped";

/**
 * StrategySummary
 * 전략 요약 정보.
 */
export type StrategySummary = {
	/**
	 * Active Count
	 * 활성 전략 수
	 */
	active_count: number;
	/**
	 * Total Count
	 * 총 전략 수
	 */
	total_count: number;
	/**
	 * Avg Success Rate
	 * 평균 성공률
	 */
	avg_success_rate: number;
	/**
	 * Best Performing
	 * 최고 성과 전략 ID
	 */
	best_performing?: string | null;
};

/**
 * StrategyType
 * 지원되는 전략 타입
 */
export type StrategyType =
	| "sma_crossover"
	| "rsi_mean_reversion"
	| "momentum"
	| "buy_and_hold";

/**
 * StrategyUpdate
 * Strategy update request
 */
export type StrategyUpdate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Config
	 * 전략 설정
	 */
	config?:
		| ({
				config_type: "sma_crossover";
		  } & SmaCrossoverConfig)
		| ({
				config_type: "rsi_mean_reversion";
		  } & RsiMeanReversionConfig)
		| ({
				config_type: "momentum";
		  } & MomentumConfig)
		| ({
				config_type: "buy_and_hold";
		  } & BuyAndHoldConfig)
		| null;
	/**
	 * Is Active
	 * 활성화 상태
	 */
	is_active?: boolean | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string | null> | null;
};

/**
 * StudyListItem
 * Summary of an optimization study for listing.
 */
export type StudyListItem = {
	/**
	 * Study Name
	 */
	study_name: string;
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Strategy Name
	 */
	strategy_name: string;
	/**
	 * Status
	 */
	status: string;
	/**
	 * Trials Completed
	 */
	trials_completed: number;
	/**
	 * N Trials
	 */
	n_trials: number;
	/**
	 * Best Value
	 */
	best_value?: number | null;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Completed At
	 */
	completed_at?: Date | null;
};

/**
 * StudyListResponse
 * Response for study listing.
 */
export type StudyListResponse = {
	/**
	 * Status
	 */
	status: string;
	/**
	 * Total
	 */
	total: number;
	/**
	 * Studies
	 */
	studies: Array<StudyListItem>;
};

/**
 * SymbolInfo
 */
export type SymbolInfo = {
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Type
	 */
	type: string;
	/**
	 * Region
	 */
	region: string;
	/**
	 * Market Open
	 */
	market_open?: string | null;
	/**
	 * Market Close
	 */
	market_close?: string | null;
	/**
	 * Timezone
	 */
	timezone?: string | null;
	/**
	 * Currency
	 */
	currency?: string | null;
	/**
	 * Match Score
	 */
	match_score?: number | null;
};

/**
 * TaskResult
 * 작업 실행 결과
 */
export type TaskResult = {
	/**
	 * Status
	 */
	status: string;
	/**
	 * Message
	 */
	message: string;
	/**
	 * Total
	 */
	total?: number;
	/**
	 * Success
	 */
	success?: number;
	/**
	 * Failed
	 */
	failed?: number;
	/**
	 * Errors
	 */
	errors?: Array<string>;
};

/**
 * TechnicalIndicatorData
 * 기술적 지표 응답 데이터 모델
 */
export type TechnicalIndicatorData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Indicator Type
	 * 지표 타입 (SMA, EMA, RSI, etc.)
	 */
	indicator_type: string;
	/**
	 * Interval
	 * 시간 간격
	 */
	interval: string;
	/**
	 * Parameters
	 * 지표 파라미터
	 */
	parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Data
	 * 시계열 데이터
	 */
	data?: Array<IndicatorDataPoint>;
	/**
	 * Data Points Count
	 * 데이터 포인트 개수
	 */
	data_points_count?: number;
	/**
	 * Latest Value
	 * 최신 지표 값
	 */
	latest_value?: string | null;
	/**
	 * Latest Date
	 * 최신 데이터 날짜
	 */
	latest_date?: Date | null;
};

/**
 * TechnicalIndicatorResponse
 * 단일 기술적 지표 응답
 */
export type TechnicalIndicatorResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * 지표 데이터
	 */
	data?: TechnicalIndicatorData | null;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
};

/**
 * TemplateCreate
 * Template creation request
 */
export type TemplateCreate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description: string;
	/**
	 * Default Config
	 * 기본 설정 타입 안전
	 */
	default_config:
		| ({
				config_type: "sma_crossover";
		  } & SmaCrossoverConfig)
		| ({
				config_type: "rsi_mean_reversion";
		  } & RsiMeanReversionConfig)
		| ({
				config_type: "momentum";
		  } & MomentumConfig)
		| ({
				config_type: "buy_and_hold";
		  } & BuyAndHoldConfig);
	/**
	 * Category
	 * 카테고리
	 */
	category: string;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * TemplateListResponse
 * Template list response
 */
export type TemplateListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Templates
	 * 템플릿 목록
	 */
	templates: Array<TemplateResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * TemplateResponse
 * Template response
 */
export type TemplateResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 템플릿 ID
	 */
	id: string;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description: string;
	/**
	 * Default Config
	 * 기본 설정
	 */
	default_config:
		| ({
				config_type: "sma_crossover";
		  } & SmaCrossoverConfig)
		| ({
				config_type: "rsi_mean_reversion";
		  } & RsiMeanReversionConfig)
		| ({
				config_type: "momentum";
		  } & MomentumConfig)
		| ({
				config_type: "buy_and_hold";
		  } & BuyAndHoldConfig);
	/**
	 * Category
	 * 카테고리
	 */
	category: string;
	/**
	 * Usage Count
	 * 사용 횟수
	 */
	usage_count: number;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: Date;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * TemplateUpdate
 * Template update request
 */
export type TemplateUpdate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description?: string | null;
	/**
	 * Default Config
	 * 기본 설정
	 */
	default_config?:
		| ({
				config_type: "sma_crossover";
		  } & SmaCrossoverConfig)
		| ({
				config_type: "rsi_mean_reversion";
		  } & RsiMeanReversionConfig)
		| ({
				config_type: "momentum";
		  } & MomentumConfig)
		| ({
				config_type: "buy_and_hold";
		  } & BuyAndHoldConfig)
		| null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string> | null;
};

/**
 * TestCaseCreate
 * 벤치마크 테스트 케이스
 */
export type TestCaseCreate = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Description
	 */
	description: string;
	/**
	 * Expected Metrics
	 */
	expected_metrics?: {
		[key: string]: number;
	};
};

/**
 * Trade
 * 거래 기록 내장 모델
 */
export type Trade = {
	/**
	 * Trade Id
	 * 거래 ID
	 */
	trade_id: string;
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	trade_type: TradeType;
	order_type?: OrderType;
	/**
	 * Quantity
	 * 수량
	 */
	quantity: number;
	/**
	 * Price
	 * 체결 가격
	 */
	price: number;
	/**
	 * Timestamp
	 * 거래 시간
	 */
	timestamp: Date;
	/**
	 * Commission
	 * 수수료
	 */
	commission?: number;
	/**
	 * Slippage
	 * 슬리피지
	 */
	slippage?: number;
	/**
	 * Strategy Signal Id
	 * 전략 신호 ID
	 */
	strategy_signal_id?: string | null;
	/**
	 * Notes
	 * 메모
	 */
	notes?: string | null;
};

/**
 * TradeItem
 * 거래 항목.
 */
export type TradeItem = {
	/**
	 * Trade Id
	 * 거래 ID
	 */
	trade_id: string;
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	/**
	 * 거래 방향
	 */
	side: TradeSide;
	/**
	 * Quantity
	 * 수량
	 */
	quantity: number;
	/**
	 * Price
	 * 가격
	 */
	price: number;
	/**
	 * Value
	 * 거래 금액
	 */
	value: number;
	/**
	 * Pnl
	 * 손익
	 */
	pnl: number;
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Timestamp
	 * 거래 시간
	 */
	timestamp: Date;
};

/**
 * TradeSide
 * 거래 방향.
 */
export type TradeSide = "buy" | "sell";

/**
 * TradeType
 * 거래 타입
 */
export type TradeType = "BUY" | "SELL";

/**
 * TradesSummary
 * 거래 요약.
 */
export type TradesSummary = {
	/**
	 * Total Trades
	 * 총 거래 수
	 */
	total_trades: number;
	/**
	 * Winning Trades
	 * 수익 거래 수
	 */
	winning_trades: number;
	/**
	 * Total Pnl
	 * 총 손익
	 */
	total_pnl: number;
};

/**
 * TrainModelRequest
 * Request schema for model training.
 */
export type TrainModelRequest = {
	/**
	 * Symbols
	 * List of stock symbols to train on
	 */
	symbols: Array<string>;
	/**
	 * Lookback Days
	 * Number of days of historical data to use
	 */
	lookback_days?: number;
	/**
	 * Test Size
	 * Test set ratio
	 */
	test_size?: number;
	/**
	 * Num Boost Round
	 * Number of boosting iterations
	 */
	num_boost_round?: number;
	/**
	 * Threshold
	 * Return threshold for buy signal (2% = 0.02)
	 */
	threshold?: number;
};

/**
 * TrainModelResponse
 * Response schema for model training.
 */
export type TrainModelResponse = {
	/**
	 * Status
	 * Training status
	 */
	status: string;
	/**
	 * Message
	 * Status message
	 */
	message: string;
	/**
	 * Task Id
	 * Background task ID
	 */
	task_id?: string | null;
};

/**
 * TrialResult
 * Individual trial result summary.
 */
export type TrialResult = {
	/**
	 * Trial Number
	 */
	trial_number: number;
	/**
	 * Params
	 */
	params: {
		[key: string]: unknown;
	};
	/**
	 * Value
	 */
	value: number;
	/**
	 * State
	 */
	state: string;
	/**
	 * Sharpe Ratio
	 */
	sharpe_ratio?: number | null;
	/**
	 * Total Return
	 */
	total_return?: number | null;
	/**
	 * Max Drawdown
	 */
	max_drawdown?: number | null;
	/**
	 * Duration Seconds
	 */
	duration_seconds?: number | null;
};

/**
 * UserCreate
 */
export type UserCreate = {
	/**
	 * Email
	 */
	email: string;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Password
	 */
	password: string;
	/**
	 * Is Active
	 */
	is_active?: boolean | null;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean | null;
	/**
	 * Is Verified
	 */
	is_verified?: boolean | null;
	/**
	 * Avatar Url
	 */
	avatar_url?: string | null;
};

/**
 * UserResponse
 * Base User model.
 */
export type UserResponse = {
	/**
	 * Email
	 */
	email: string;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Is Active
	 */
	is_active?: boolean;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean;
	/**
	 * Is Verified
	 */
	is_verified?: boolean;
	/**
	 * Avatar Url
	 */
	avatar_url?: string | null;
	/**
	 * Oauth Accounts
	 */
	oauth_accounts?: Array<OAuthAccount>;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
	/**
	 * Password
	 */
	password?: string | null;
	/**
	 * Email
	 */
	email?: string | null;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Is Active
	 */
	is_active?: boolean | null;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean | null;
	/**
	 * Is Verified
	 */
	is_verified?: boolean | null;
	/**
	 * Avatar Url
	 */
	avatar_url?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
	/**
	 * Location
	 */
	loc: Array<string | number>;
	/**
	 * Message
	 */
	msg: string;
	/**
	 * Error Type
	 */
	type: string;
};

/**
 * ValidationStatus
 * 검증 상태
 */
export type ValidationStatus = "valid" | "warning" | "error";

/**
 * WatchlistCreate
 * 워치리스트 생성 모델
 */
export type WatchlistCreate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Description
	 */
	description?: string;
};

/**
 * WatchlistListResponse
 * 워치리스트 목록 응답 모델
 */
export type WatchlistListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Watchlists
	 */
	watchlists?: Array<WatchlistResponse>;
	/**
	 * Total Count
	 */
	total_count?: number;
};

/**
 * WatchlistQuoteItem
 * 관심종목 시세 항목.
 */
export type WatchlistQuoteItem = {
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	/**
	 * Name
	 * 회사명
	 */
	name: string;
	/**
	 * Current Price
	 * 현재가
	 */
	current_price: number;
	/**
	 * Change
	 * 변화량
	 */
	change: number;
	/**
	 * Change Percentage
	 * 변화율
	 */
	change_percentage: number;
	/**
	 * Volume
	 * 거래량
	 */
	volume: number;
	/**
	 * Market Cap
	 * 시가총액
	 */
	market_cap?: number | null;
};

/**
 * WatchlistQuotes
 * 관심종목 시세 데이터.
 */
export type WatchlistQuotes = {
	/**
	 * Symbols
	 * 심볼 목록
	 */
	symbols: Array<WatchlistQuoteItem>;
	/**
	 * Last Updated
	 * 마지막 업데이트
	 */
	last_updated: Date;
};

/**
 * WatchlistQuotesResponse
 * 관심종목 시세 응답.
 */
export type WatchlistQuotesResponse = {
	/**
	 * 관심종목 시세
	 */
	data: WatchlistQuotes;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string;
};

/**
 * WatchlistResponse
 * 워치리스트 응답 모델
 */
export type WatchlistResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Description
	 */
	description?: string | null;
	/**
	 * Created At
	 */
	created_at?: Date | null;
	/**
	 * Updated At
	 */
	updated_at?: Date | null;
};

/**
 * WatchlistUpdate
 * 워치리스트 업데이트 모델
 */
export type WatchlistUpdate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Name
	 */
	name?: string | null;
	/**
	 * Description
	 */
	description?: string | null;
};

/**
 * MetricComparison
 * Comparison between candidate and baseline.
 */
export type AppModelsMlPlatformEvaluationMetricComparison = {
	/**
	 * Metric Name
	 * 메트릭 이름
	 */
	metric_name: string;
	/**
	 * Candidate
	 * 후보 모델 값
	 */
	candidate: number;
	/**
	 * Baseline Average
	 * 기준 평균
	 */
	baseline_average?: number | null;
	/**
	 * Delta
	 * 차이
	 */
	delta?: number | null;
};

/**
 * MetricComparison
 */
export type AppSchemasMlPlatformModelLifecycleMetricComparison = {
	/**
	 * Metric Name
	 */
	metric_name: string;
	/**
	 * Values
	 */
	values: {
		[key: string]: number;
	};
};

export type HealthHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/";
};

export type HealthHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: HealthResponse;
};

export type HealthHealthCheckResponse =
	HealthHealthCheckResponses[keyof HealthHealthCheckResponses];

export type HealthLivenessProbeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/live";
};

export type HealthLivenessProbeResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type HealthReadinessProbeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/ready";
};

export type HealthReadinessProbeResponses = {
	/**
	 * Response Health-Readiness Probe
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type HealthReadinessProbeResponse =
	HealthReadinessProbeResponses[keyof HealthReadinessProbeResponses];

export type AuthLoginData = {
	body: BodyAuthLogin;
	path?: never;
	query?: never;
	url: "/api/v1/auth/login";
};

export type AuthLoginErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthLoginError = AuthLoginErrors[keyof AuthLoginErrors];

export type AuthLoginResponses = {
	/**
	 * Successful Response
	 */
	200: LoginResponse;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthLogoutData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/logout";
};

export type AuthLogoutErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthLogoutError = AuthLogoutErrors[keyof AuthLogoutErrors];

export type AuthLogoutResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type AuthLogoutResponse = AuthLogoutResponses[keyof AuthLogoutResponses];

export type AuthRefreshTokenData = {
	body?: never;
	headers?: {
		/**
		 * X-Refresh-Token
		 */
		"X-Refresh-Token"?: string | null;
	};
	path?: never;
	query?: never;
	url: "/api/v1/auth/refresh";
};

export type AuthRefreshTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRefreshTokenError =
	AuthRefreshTokenErrors[keyof AuthRefreshTokenErrors];

export type AuthRefreshTokenResponses = {
	/**
	 * Successful Response
	 */
	200: LoginResponse;
};

export type AuthRefreshTokenResponse =
	AuthRefreshTokenResponses[keyof AuthRefreshTokenResponses];

export type AuthVerifyTokenData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/token/verify";
};

export type AuthVerifyTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthVerifyTokenError =
	AuthVerifyTokenErrors[keyof AuthVerifyTokenErrors];

export type AuthVerifyTokenResponses = {
	/**
	 * Response Auth-Verify Token
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type AuthVerifyTokenResponse =
	AuthVerifyTokenResponses[keyof AuthVerifyTokenResponses];

export type AuthRegisterData = {
	body: UserCreate;
	path?: never;
	query?: never;
	url: "/api/v1/auth/register";
};

export type AuthRegisterErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRegisterError = AuthRegisterErrors[keyof AuthRegisterErrors];

export type AuthRegisterResponses = {
	/**
	 * Successful Response
	 */
	201: UserResponse;
};

export type AuthRegisterResponse =
	AuthRegisterResponses[keyof AuthRegisterResponses];

export type AuthForgotPasswordData = {
	body: BodyAuthForgotPassword;
	path?: never;
	query?: never;
	url: "/api/v1/auth/forgot-password";
};

export type AuthForgotPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthForgotPasswordError =
	AuthForgotPasswordErrors[keyof AuthForgotPasswordErrors];

export type AuthForgotPasswordResponses = {
	/**
	 * Successful Response
	 */
	202: unknown;
};

export type AuthResetPasswordData = {
	body: BodyAuthResetPassword;
	path?: never;
	query?: never;
	url: "/api/v1/auth/reset-password";
};

export type AuthResetPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthResetPasswordError =
	AuthResetPasswordErrors[keyof AuthResetPasswordErrors];

export type AuthResetPasswordResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type AuthRequestVerifyTokenData = {
	body: BodyAuthRequestVerifyToken;
	path?: never;
	query?: never;
	url: "/api/v1/auth/request-verify-token";
};

export type AuthRequestVerifyTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRequestVerifyTokenError =
	AuthRequestVerifyTokenErrors[keyof AuthRequestVerifyTokenErrors];

export type AuthRequestVerifyTokenResponses = {
	/**
	 * Successful Response
	 */
	202: unknown;
};

export type AuthVerifyData = {
	body: BodyAuthVerify;
	path?: never;
	query?: never;
	url: "/api/v1/auth/verify";
};

export type AuthVerifyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthVerifyError = AuthVerifyErrors[keyof AuthVerifyErrors];

export type AuthVerifyResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type AuthVerifyResponse = AuthVerifyResponses[keyof AuthVerifyResponses];

export type UserGetUserMeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/users/me";
};

export type UserGetUserMeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserMeError = UserGetUserMeErrors[keyof UserGetUserMeErrors];

export type UserGetUserMeResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserGetUserMeResponse =
	UserGetUserMeResponses[keyof UserGetUserMeResponses];

export type UserUpdateUserMeData = {
	body: UserUpdate;
	path?: never;
	query?: never;
	url: "/api/v1/users/me";
};

export type UserUpdateUserMeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserUpdateUserMeError =
	UserUpdateUserMeErrors[keyof UserUpdateUserMeErrors];

export type UserUpdateUserMeResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserUpdateUserMeResponse =
	UserUpdateUserMeResponses[keyof UserUpdateUserMeResponses];

export type UserDeleteUserData = {
	body?: never;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserDeleteUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserDeleteUserError =
	UserDeleteUserErrors[keyof UserDeleteUserErrors];

export type UserDeleteUserResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type UserDeleteUserResponse =
	UserDeleteUserResponses[keyof UserDeleteUserResponses];

export type UserGetUserData = {
	body?: never;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserGetUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserError = UserGetUserErrors[keyof UserGetUserErrors];

export type UserGetUserResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserGetUserResponse =
	UserGetUserResponses[keyof UserGetUserResponses];

export type UserUpdateUserData = {
	body: UserUpdate;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserUpdateUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserUpdateUserError =
	UserUpdateUserErrors[keyof UserUpdateUserErrors];

export type UserUpdateUserResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserUpdateUserResponse =
	UserUpdateUserResponses[keyof UserUpdateUserResponses];

export type OAuth2AuthorizeData = {
	body?: never;
	path: {
		/**
		 * Provider
		 */
		provider: string;
	};
	query?: {
		/**
		 * Redirect Url
		 */
		redirect_url?: string | null;
		/**
		 * State
		 */
		state?: string | null;
	};
	url: "/api/v1/oauth2/{provider}/authorize";
};

export type OAuth2AuthorizeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type OAuth2AuthorizeError =
	OAuth2AuthorizeErrors[keyof OAuth2AuthorizeErrors];

export type OAuth2AuthorizeResponses = {
	/**
	 * Successful Response
	 */
	200: OAuth2AuthorizeResponse;
};

export type OAuth2AuthorizeResponse2 =
	OAuth2AuthorizeResponses[keyof OAuth2AuthorizeResponses];

export type OAuth2CallbackData = {
	body?: never;
	path: {
		/**
		 * Provider
		 */
		provider: string;
	};
	query: {
		/**
		 * Code
		 */
		code: string;
	};
	url: "/api/v1/oauth2/{provider}/callback";
};

export type OAuth2CallbackErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type OAuth2CallbackError =
	OAuth2CallbackErrors[keyof OAuth2CallbackErrors];

export type OAuth2CallbackResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type OAuth2CallbackResponse =
	OAuth2CallbackResponses[keyof OAuth2CallbackResponses];

export type UserGetMyOauthAccountsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/users/me/oauth-accounts";
};

export type UserGetMyOauthAccountsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetMyOauthAccountsError =
	UserGetMyOauthAccountsErrors[keyof UserGetMyOauthAccountsErrors];

export type UserGetMyOauthAccountsResponses = {
	/**
	 * Response User-Get My Oauth Accounts
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type UserGetMyOauthAccountsResponse =
	UserGetMyOauthAccountsResponses[keyof UserGetMyOauthAccountsResponses];

export type UserRemoveOauthAccountData = {
	body?: never;
	path: {
		/**
		 * Oauth Name
		 */
		oauth_name: string;
		/**
		 * Account Id
		 */
		account_id: string;
	};
	query?: never;
	url: "/api/v1/users/me/oauth-accounts/{oauth_name}/{account_id}";
};

export type UserRemoveOauthAccountErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserRemoveOauthAccountError =
	UserRemoveOauthAccountErrors[keyof UserRemoveOauthAccountErrors];

export type UserRemoveOauthAccountResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type UserRemoveOauthAccountResponse =
	UserRemoveOauthAccountResponses[keyof UserRemoveOauthAccountResponses];

export type UserGetUserOauthAccountsData = {
	body?: never;
	path: {
		user_id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{user_id}/oauth-accounts";
};

export type UserGetUserOauthAccountsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserOauthAccountsError =
	UserGetUserOauthAccountsErrors[keyof UserGetUserOauthAccountsErrors];

export type UserGetUserOauthAccountsResponses = {
	/**
	 * Response User-Get User Oauth Accounts
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type UserGetUserOauthAccountsResponse =
	UserGetUserOauthAccountsResponses[keyof UserGetUserOauthAccountsResponses];

export type MarketDataGetDailyPricesData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Outputsize
		 * 데이터 크기 (compact: 최근 100일, full: 전체)
		 */
		outputsize?: string;
		/**
		 * Adjusted
		 * Adjusted prices 사용 여부 (True: adjusted, False: raw)
		 */
		adjusted?: boolean;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
	};
	url: "/api/v1/market-data/stock/daily/{symbol}";
};

export type MarketDataGetDailyPricesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetDailyPricesError =
	MarketDataGetDailyPricesErrors[keyof MarketDataGetDailyPricesErrors];

export type MarketDataGetDailyPricesResponses = {
	/**
	 * Successful Response
	 */
	200: HistoricalDataResponse;
};

export type MarketDataGetDailyPricesResponse =
	MarketDataGetDailyPricesResponses[keyof MarketDataGetDailyPricesResponses];

export type MarketDataGetWeeklyPricesData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Adjusted
		 * Adjusted prices 사용 여부 (True: adjusted, False: raw)
		 */
		adjusted?: boolean;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
		/**
		 * Outputsize
		 * 데이터 크기 (compact: 최근 100개, full: 전체)
		 */
		outputsize?: string;
	};
	url: "/api/v1/market-data/stock/weekly/{symbol}";
};

export type MarketDataGetWeeklyPricesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetWeeklyPricesError =
	MarketDataGetWeeklyPricesErrors[keyof MarketDataGetWeeklyPricesErrors];

export type MarketDataGetWeeklyPricesResponses = {
	/**
	 * Successful Response
	 */
	200: HistoricalDataResponse;
};

export type MarketDataGetWeeklyPricesResponse =
	MarketDataGetWeeklyPricesResponses[keyof MarketDataGetWeeklyPricesResponses];

export type MarketDataGetMonthlyPricesData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Adjusted
		 * Adjusted prices 사용 여부 (True: adjusted, False: raw)
		 */
		adjusted?: boolean;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
		/**
		 * Outputsize
		 * 데이터 크기 (compact: 최근 100개, full: 전체)
		 */
		outputsize?: string;
	};
	url: "/api/v1/market-data/stock/monthly/{symbol}";
};

export type MarketDataGetMonthlyPricesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetMonthlyPricesError =
	MarketDataGetMonthlyPricesErrors[keyof MarketDataGetMonthlyPricesErrors];

export type MarketDataGetMonthlyPricesResponses = {
	/**
	 * Successful Response
	 */
	200: HistoricalDataResponse;
};

export type MarketDataGetMonthlyPricesResponse =
	MarketDataGetMonthlyPricesResponses[keyof MarketDataGetMonthlyPricesResponses];

export type MarketDataGetQuoteData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/stock/quote/{symbol}";
};

export type MarketDataGetQuoteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetQuoteError =
	MarketDataGetQuoteErrors[keyof MarketDataGetQuoteErrors];

export type MarketDataGetQuoteResponses = {
	/**
	 * Successful Response
	 */
	200: QuoteResponse;
};

export type MarketDataGetQuoteResponse =
	MarketDataGetQuoteResponses[keyof MarketDataGetQuoteResponses];

export type MarketDataGetIntradayDataData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 데이터 간격 (1min, 5min, 15min, 30min, 60min)
		 */
		interval?: "1min" | "5min" | "15min" | "30min" | "60min";
		/**
		 * Month
		 * 조회할 월 (YYYY-MM 형식). 지정하지 않으면 최신 데이터 조회. Premium plan only.
		 */
		month?: string | null;
		/**
		 * Extended Hours
		 * 연장 거래 시간 포함 여부
		 */
		extended_hours?: boolean;
		/**
		 * Adjusted
		 * 조정 가격 여부
		 */
		adjusted?: boolean;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
		/**
		 * Outputsize
		 * 데이터 크기 (compact: 100 data points, full: 30 days or full month)
		 */
		outputsize?: "compact" | "full";
	};
	url: "/api/v1/market-data/stock/intraday/{symbol}";
};

export type MarketDataGetIntradayDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetIntradayDataError =
	MarketDataGetIntradayDataErrors[keyof MarketDataGetIntradayDataErrors];

export type MarketDataGetIntradayDataResponses = {
	/**
	 * Successful Response
	 */
	200: HistoricalDataResponse;
};

export type MarketDataGetIntradayDataResponse =
	MarketDataGetIntradayDataResponses[keyof MarketDataGetIntradayDataResponses];

export type MarketDataSearchStockSymbolsData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Keywords
		 * 검색 키워드 (예: Apple, Tesla)
		 */
		keywords: string;
	};
	url: "/api/v1/market-data/stock/search";
};

export type MarketDataSearchStockSymbolsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataSearchStockSymbolsError =
	MarketDataSearchStockSymbolsErrors[keyof MarketDataSearchStockSymbolsErrors];

export type MarketDataSearchStockSymbolsResponses = {
	/**
	 * Successful Response
	 */
	200: StockSymbolsResponse;
};

export type MarketDataSearchStockSymbolsResponse =
	MarketDataSearchStockSymbolsResponses[keyof MarketDataSearchStockSymbolsResponses];

export type MarketDataGetExchangeRateData = {
	body?: never;
	path: {
		/**
		 * From Currency
		 * 기준 통화 (예: BTC, ETH, USD)
		 */
		from_currency: string;
		/**
		 * To Currency
		 * 대상 통화 (예: USD, EUR, KRW)
		 */
		to_currency: string;
	};
	query?: never;
	url: "/api/v1/market-data/crypto/exchange-rate/{from_currency}/{to_currency}";
};

export type MarketDataGetExchangeRateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetExchangeRateError =
	MarketDataGetExchangeRateErrors[keyof MarketDataGetExchangeRateErrors];

export type MarketDataGetExchangeRateResponses = {
	/**
	 * Response Market Data-Get Exchange Rate
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetExchangeRateResponse =
	MarketDataGetExchangeRateResponses[keyof MarketDataGetExchangeRateResponses];

export type MarketDataGetBulkExchangeRatesData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Crypto Symbols
		 * 암호화폐 심볼 리스트
		 */
		crypto_symbols: Array<string>;
		/**
		 * Target Currency
		 * 목표 통화
		 */
		target_currency?: string;
	};
	url: "/api/v1/market-data/crypto/exchange-rates/bulk";
};

export type MarketDataGetBulkExchangeRatesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetBulkExchangeRatesError =
	MarketDataGetBulkExchangeRatesErrors[keyof MarketDataGetBulkExchangeRatesErrors];

export type MarketDataGetBulkExchangeRatesResponses = {
	/**
	 * Response Market Data-Get Bulk Exchange Rates
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetBulkExchangeRatesResponse =
	MarketDataGetBulkExchangeRatesResponses[keyof MarketDataGetBulkExchangeRatesResponses];

export type MarketDataGetDailyPrices2Data = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 암호화폐 심볼 (예: BTC, ETH)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Market
		 * 시장/통화 (예: USD, EUR, KRW)
		 */
		market?: string;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
	};
	url: "/api/v1/market-data/crypto/daily/{symbol}";
};

export type MarketDataGetDailyPrices2Errors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetDailyPrices2Error =
	MarketDataGetDailyPrices2Errors[keyof MarketDataGetDailyPrices2Errors];

export type MarketDataGetDailyPrices2Responses = {
	/**
	 * Successful Response
	 */
	200: CryptoHistoricalDataResponse;
};

export type MarketDataGetDailyPrices2Response =
	MarketDataGetDailyPrices2Responses[keyof MarketDataGetDailyPrices2Responses];

export type MarketDataGetWeeklyPrices2Data = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 암호화폐 심볼 (예: BTC, ETH)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Market
		 * 시장/통화 (예: USD, EUR)
		 */
		market?: string;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
	};
	url: "/api/v1/market-data/crypto/weekly/{symbol}";
};

export type MarketDataGetWeeklyPrices2Errors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetWeeklyPrices2Error =
	MarketDataGetWeeklyPrices2Errors[keyof MarketDataGetWeeklyPrices2Errors];

export type MarketDataGetWeeklyPrices2Responses = {
	/**
	 * Successful Response
	 */
	200: CryptoHistoricalDataResponse;
};

export type MarketDataGetWeeklyPrices2Response =
	MarketDataGetWeeklyPrices2Responses[keyof MarketDataGetWeeklyPrices2Responses];

export type MarketDataGetMonthlyPrices2Data = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 암호화폐 심볼 (예: BTC, ETH)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Market
		 * 시장/통화 (예: USD, EUR)
		 */
		market?: string;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
	};
	url: "/api/v1/market-data/crypto/monthly/{symbol}";
};

export type MarketDataGetMonthlyPrices2Errors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetMonthlyPrices2Error =
	MarketDataGetMonthlyPrices2Errors[keyof MarketDataGetMonthlyPrices2Errors];

export type MarketDataGetMonthlyPrices2Responses = {
	/**
	 * Successful Response
	 */
	200: CryptoHistoricalDataResponse;
};

export type MarketDataGetMonthlyPrices2Response =
	MarketDataGetMonthlyPrices2Responses[keyof MarketDataGetMonthlyPrices2Responses];

export type MarketDataGetBitcoinPriceData = {
	body?: never;
	path: {
		/**
		 * Period
		 * 조회 기간 (daily, weekly, monthly)
		 */
		period: "daily" | "weekly" | "monthly";
	};
	query?: {
		/**
		 * Market
		 * 시장/통화 (예: USD, EUR, KRW)
		 */
		market?: string;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
	};
	url: "/api/v1/market-data/crypto/bitcoin/{period}";
};

export type MarketDataGetBitcoinPriceErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetBitcoinPriceError =
	MarketDataGetBitcoinPriceErrors[keyof MarketDataGetBitcoinPriceErrors];

export type MarketDataGetBitcoinPriceResponses = {
	/**
	 * Successful Response
	 */
	200: CryptoHistoricalDataResponse;
};

export type MarketDataGetBitcoinPriceResponse =
	MarketDataGetBitcoinPriceResponses[keyof MarketDataGetBitcoinPriceResponses];

export type MarketDataGetEthereumPriceData = {
	body?: never;
	path: {
		/**
		 * Period
		 * 조회 기간 (daily, weekly, monthly)
		 */
		period: "daily" | "weekly" | "monthly";
	};
	query?: {
		/**
		 * Market
		 * 시장/통화 (예: USD, EUR, KRW)
		 */
		market?: string;
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
	};
	url: "/api/v1/market-data/crypto/ethereum/{period}";
};

export type MarketDataGetEthereumPriceErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetEthereumPriceError =
	MarketDataGetEthereumPriceErrors[keyof MarketDataGetEthereumPriceErrors];

export type MarketDataGetEthereumPriceResponses = {
	/**
	 * Successful Response
	 */
	200: CryptoHistoricalDataResponse;
};

export type MarketDataGetEthereumPriceResponse =
	MarketDataGetEthereumPriceResponses[keyof MarketDataGetEthereumPriceResponses];

export type MarketDataGetCompanyOverviewData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/fundamental/overview/{symbol}";
};

export type MarketDataGetCompanyOverviewErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetCompanyOverviewError =
	MarketDataGetCompanyOverviewErrors[keyof MarketDataGetCompanyOverviewErrors];

export type MarketDataGetCompanyOverviewResponses = {
	/**
	 * Successful Response
	 */
	200: CompanyOverviewResponse;
};

export type MarketDataGetCompanyOverviewResponse =
	MarketDataGetCompanyOverviewResponses[keyof MarketDataGetCompanyOverviewResponses];

export type MarketDataGetIncomeStatementData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Period
		 * 보고 주기 (annual, quarterly)
		 */
		period?: string;
	};
	url: "/api/v1/market-data/fundamental/income-statement/{symbol}";
};

export type MarketDataGetIncomeStatementErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetIncomeStatementError =
	MarketDataGetIncomeStatementErrors[keyof MarketDataGetIncomeStatementErrors];

export type MarketDataGetIncomeStatementResponses = {
	/**
	 * Successful Response
	 */
	200: IncomeStatementResponse;
};

export type MarketDataGetIncomeStatementResponse =
	MarketDataGetIncomeStatementResponses[keyof MarketDataGetIncomeStatementResponses];

export type MarketDataGetBalanceSheetData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Period
		 * 보고 주기 (annual, quarterly)
		 */
		period?: string;
	};
	url: "/api/v1/market-data/fundamental/balance-sheet/{symbol}";
};

export type MarketDataGetBalanceSheetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetBalanceSheetError =
	MarketDataGetBalanceSheetErrors[keyof MarketDataGetBalanceSheetErrors];

export type MarketDataGetBalanceSheetResponses = {
	/**
	 * Successful Response
	 */
	200: BalanceSheetResponse;
};

export type MarketDataGetBalanceSheetResponse =
	MarketDataGetBalanceSheetResponses[keyof MarketDataGetBalanceSheetResponses];

export type MarketDataGetCashFlowData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Period
		 * 보고 주기 (annual, quarterly)
		 */
		period?: string;
	};
	url: "/api/v1/market-data/fundamental/cash-flow/{symbol}";
};

export type MarketDataGetCashFlowErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetCashFlowError =
	MarketDataGetCashFlowErrors[keyof MarketDataGetCashFlowErrors];

export type MarketDataGetCashFlowResponses = {
	/**
	 * Successful Response
	 */
	200: CashFlowResponse;
};

export type MarketDataGetCashFlowResponse =
	MarketDataGetCashFlowResponses[keyof MarketDataGetCashFlowResponses];

export type MarketDataGetEarningsData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/fundamental/earnings/{symbol}";
};

export type MarketDataGetEarningsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetEarningsError =
	MarketDataGetEarningsErrors[keyof MarketDataGetEarningsErrors];

export type MarketDataGetEarningsResponses = {
	/**
	 * Successful Response
	 */
	200: EarningsResponse;
};

export type MarketDataGetEarningsResponse =
	MarketDataGetEarningsResponses[keyof MarketDataGetEarningsResponses];

export type MarketDataGetGdpDataData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Interval
		 * 데이터 간격 (annual, quarterly)
		 */
		interval?: string;
	};
	url: "/api/v1/market-data/economic_indicators/gdp";
};

export type MarketDataGetGdpDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetGdpDataError =
	MarketDataGetGdpDataErrors[keyof MarketDataGetGdpDataErrors];

export type MarketDataGetGdpDataResponses = {
	/**
	 * Response Market Data-Get Gdp Data
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetGdpDataResponse =
	MarketDataGetGdpDataResponses[keyof MarketDataGetGdpDataResponses];

export type MarketDataGetInflationDataData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Interval
		 * 데이터 간격 (monthly, annual)
		 */
		interval?: string;
	};
	url: "/api/v1/market-data/economic_indicators/inflation";
};

export type MarketDataGetInflationDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetInflationDataError =
	MarketDataGetInflationDataErrors[keyof MarketDataGetInflationDataErrors];

export type MarketDataGetInflationDataResponses = {
	/**
	 * Response Market Data-Get Inflation Data
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetInflationDataResponse =
	MarketDataGetInflationDataResponses[keyof MarketDataGetInflationDataResponses];

export type MarketDataGetInterestRatesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Maturity
		 * 만기 (3month, 2year, 5year, 10year, 30year)
		 */
		maturity?: string;
	};
	url: "/api/v1/market-data/economic_indicators/interest-rates";
};

export type MarketDataGetInterestRatesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetInterestRatesError =
	MarketDataGetInterestRatesErrors[keyof MarketDataGetInterestRatesErrors];

export type MarketDataGetInterestRatesResponses = {
	/**
	 * Response Market Data-Get Interest Rates
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetInterestRatesResponse =
	MarketDataGetInterestRatesResponses[keyof MarketDataGetInterestRatesResponses];

export type MarketDataGetEmploymentDataData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/economic_indicators/employment";
};

export type MarketDataGetEmploymentDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetEmploymentDataError =
	MarketDataGetEmploymentDataErrors[keyof MarketDataGetEmploymentDataErrors];

export type MarketDataGetEmploymentDataResponses = {
	/**
	 * Response Market Data-Get Employment Data
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetEmploymentDataResponse =
	MarketDataGetEmploymentDataResponses[keyof MarketDataGetEmploymentDataResponses];

export type MarketDataGetNewsData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Topics
		 * 관심 주제 (쉼표로 구분)
		 */
		topics?: string | null;
		/**
		 * Time From
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		time_from?: Date | null;
		/**
		 * Time To
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		time_to?: Date | null;
		/**
		 * Limit
		 * 결과 개수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/market-data/intelligence/news/{symbol}";
};

export type MarketDataGetNewsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetNewsError =
	MarketDataGetNewsErrors[keyof MarketDataGetNewsErrors];

export type MarketDataGetNewsResponses = {
	/**
	 * Response Market Data-Get News
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetNewsResponse =
	MarketDataGetNewsResponses[keyof MarketDataGetNewsResponses];

export type MarketDataGetSentimentAnalysisData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Time Range
		 * 시간 범위 (1week, 1month, 3months, 6months)
		 */
		time_range?: string;
		/**
		 * Sources
		 * 분석 소스 (쉼표로 구분)
		 */
		sources?: string | null;
	};
	url: "/api/v1/market-data/intelligence/sentiment/{symbol}";
};

export type MarketDataGetSentimentAnalysisErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetSentimentAnalysisError =
	MarketDataGetSentimentAnalysisErrors[keyof MarketDataGetSentimentAnalysisErrors];

export type MarketDataGetSentimentAnalysisResponses = {
	/**
	 * Response Market Data-Get Sentiment Analysis
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetSentimentAnalysisResponse =
	MarketDataGetSentimentAnalysisResponses[keyof MarketDataGetSentimentAnalysisResponses];

export type MarketDataGetAnalystRecommendationsData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Time Range
		 * 시간 범위 (1month, 3months, 6months, 1year)
		 */
		time_range?: string;
		/**
		 * Brokers
		 * 증권사 리스트 (쉼표로 구분)
		 */
		brokers?: string | null;
	};
	url: "/api/v1/market-data/intelligence/analyst-recommendations/{symbol}";
};

export type MarketDataGetAnalystRecommendationsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetAnalystRecommendationsError =
	MarketDataGetAnalystRecommendationsErrors[keyof MarketDataGetAnalystRecommendationsErrors];

export type MarketDataGetAnalystRecommendationsResponses = {
	/**
	 * Response Market Data-Get Analyst Recommendations
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetAnalystRecommendationsResponse =
	MarketDataGetAnalystRecommendationsResponses[keyof MarketDataGetAnalystRecommendationsResponses];

export type MarketDataGetSocialSentimentData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Platforms
		 * 소셜 미디어 플랫폼 (twitter,reddit,stocktwits)
		 */
		platforms?: string | null;
		/**
		 * Time Range
		 * 시간 범위 (1day, 1week, 1month)
		 */
		time_range?: string;
	};
	url: "/api/v1/market-data/intelligence/social-sentiment/{symbol}";
};

export type MarketDataGetSocialSentimentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetSocialSentimentError =
	MarketDataGetSocialSentimentErrors[keyof MarketDataGetSocialSentimentErrors];

export type MarketDataGetSocialSentimentResponses = {
	/**
	 * Response Market Data-Get Social Sentiment
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetSocialSentimentResponse =
	MarketDataGetSocialSentimentResponses[keyof MarketDataGetSocialSentimentResponses];

export type MarketDataCollectCompanyInfoData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/management/collect/company-info/{symbol}";
};

export type MarketDataCollectCompanyInfoErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataCollectCompanyInfoError =
	MarketDataCollectCompanyInfoErrors[keyof MarketDataCollectCompanyInfoErrors];

export type MarketDataCollectCompanyInfoResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataCollectMarketDataData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Start Date
		 * 시작일
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료일
		 */
		end_date?: Date | null;
		/**
		 * Outputsize
		 * 데이터 크기 (compact/full)
		 */
		outputsize?: string;
	};
	url: "/api/v1/market-data/management/collect/market-data/{symbol}";
};

export type MarketDataCollectMarketDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataCollectMarketDataError =
	MarketDataCollectMarketDataErrors[keyof MarketDataCollectMarketDataErrors];

export type MarketDataCollectMarketDataResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataCollectBulkDataData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Symbols
		 * 수집할 심볼 목록
		 */
		symbols: Array<string>;
		/**
		 * Include Company Info
		 * 기업 정보 포함 여부
		 */
		include_company_info?: boolean;
		/**
		 * Include Market Data
		 * 주가 데이터 포함 여부
		 */
		include_market_data?: boolean;
	};
	url: "/api/v1/market-data/management/collect/bulk";
};

export type MarketDataCollectBulkDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataCollectBulkDataError =
	MarketDataCollectBulkDataErrors[keyof MarketDataCollectBulkDataErrors];

export type MarketDataCollectBulkDataResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataGetDataCoverageData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/management/coverage/{symbol}";
};

export type MarketDataGetDataCoverageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetDataCoverageError =
	MarketDataGetDataCoverageErrors[keyof MarketDataGetDataCoverageErrors];

export type MarketDataGetDataCoverageResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataGetSystemStatusData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/management/status";
};

export type MarketDataGetSystemStatusErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetSystemStatusError =
	MarketDataGetSystemStatusErrors[keyof MarketDataGetSystemStatusErrors];

export type MarketDataGetSystemStatusResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataGetIndicatorListData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/tech_indicators/indicators";
};

export type MarketDataGetIndicatorListErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetIndicatorListError =
	MarketDataGetIndicatorListErrors[keyof MarketDataGetIndicatorListErrors];

export type MarketDataGetIndicatorListResponses = {
	/**
	 * Successful Response
	 */
	200: IndicatorListResponse;
};

export type MarketDataGetIndicatorListResponse =
	MarketDataGetIndicatorListResponses[keyof MarketDataGetIndicatorListResponses];

export type MarketDataGetSmaData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * 이동평균 기간
		 */
		time_period?: number;
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/sma";
};

export type MarketDataGetSmaErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetSmaError =
	MarketDataGetSmaErrors[keyof MarketDataGetSmaErrors];

export type MarketDataGetSmaResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetSmaResponse =
	MarketDataGetSmaResponses[keyof MarketDataGetSmaResponses];

export type MarketDataGetWmaData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * 이동평균 기간
		 */
		time_period?: number;
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/wma";
};

export type MarketDataGetWmaErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetWmaError =
	MarketDataGetWmaErrors[keyof MarketDataGetWmaErrors];

export type MarketDataGetWmaResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetWmaResponse =
	MarketDataGetWmaResponses[keyof MarketDataGetWmaResponses];

export type MarketDataGetDemaData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * 이동평균 기간
		 */
		time_period?: number;
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/dema";
};

export type MarketDataGetDemaErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetDemaError =
	MarketDataGetDemaErrors[keyof MarketDataGetDemaErrors];

export type MarketDataGetDemaResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetDemaResponse =
	MarketDataGetDemaResponses[keyof MarketDataGetDemaResponses];

export type MarketDataGetTemaData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * 이동평균 기간
		 */
		time_period?: number;
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/tema";
};

export type MarketDataGetTemaErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetTemaError =
	MarketDataGetTemaErrors[keyof MarketDataGetTemaErrors];

export type MarketDataGetTemaResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetTemaResponse =
	MarketDataGetTemaResponses[keyof MarketDataGetTemaResponses];

export type MarketDataGetEmaData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * 이동평균 기간
		 */
		time_period?: number;
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/ema";
};

export type MarketDataGetEmaErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetEmaError =
	MarketDataGetEmaErrors[keyof MarketDataGetEmaErrors];

export type MarketDataGetEmaResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetEmaResponse =
	MarketDataGetEmaResponses[keyof MarketDataGetEmaResponses];

export type MarketDataGetRsiData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * RSI 계산 기간
		 */
		time_period?: number;
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/rsi";
};

export type MarketDataGetRsiErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetRsiError =
	MarketDataGetRsiErrors[keyof MarketDataGetRsiErrors];

export type MarketDataGetRsiResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetRsiResponse =
	MarketDataGetRsiResponses[keyof MarketDataGetRsiResponses];

export type MarketDataGetMacdData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
		/**
		 * Fastperiod
		 * 빠른 이동평균 기간
		 */
		fastperiod?: number;
		/**
		 * Slowperiod
		 * 느린 이동평균 기간
		 */
		slowperiod?: number;
		/**
		 * Signalperiod
		 * 시그널 라인 기간
		 */
		signalperiod?: number;
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/macd";
};

export type MarketDataGetMacdErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetMacdError =
	MarketDataGetMacdErrors[keyof MarketDataGetMacdErrors];

export type MarketDataGetMacdResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetMacdResponse =
	MarketDataGetMacdResponses[keyof MarketDataGetMacdResponses];

export type MarketDataGetBbandsData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * 이동평균 기간
		 */
		time_period?: number;
		/**
		 * Series Type
		 * 계산에 사용할 가격 데이터
		 */
		series_type?: "close" | "open" | "high" | "low";
		/**
		 * Nbdevup
		 * 상단 밴드 표준편차 배수
		 */
		nbdevup?: number;
		/**
		 * Nbdevdn
		 * 하단 밴드 표준편차 배수
		 */
		nbdevdn?: number;
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/bbands";
};

export type MarketDataGetBbandsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetBbandsError =
	MarketDataGetBbandsErrors[keyof MarketDataGetBbandsErrors];

export type MarketDataGetBbandsResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetBbandsResponse =
	MarketDataGetBbandsResponses[keyof MarketDataGetBbandsResponses];

export type MarketDataGetAdxData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * ADX 계산 기간
		 */
		time_period?: number;
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/adx";
};

export type MarketDataGetAdxErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetAdxError =
	MarketDataGetAdxErrors[keyof MarketDataGetAdxErrors];

export type MarketDataGetAdxResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetAdxResponse =
	MarketDataGetAdxResponses[keyof MarketDataGetAdxResponses];

export type MarketDataGetAtrData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Time Period
		 * ATR 계산 기간
		 */
		time_period?: number;
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/atr";
};

export type MarketDataGetAtrErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetAtrError =
	MarketDataGetAtrErrors[keyof MarketDataGetAtrErrors];

export type MarketDataGetAtrResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetAtrResponse =
	MarketDataGetAtrResponses[keyof MarketDataGetAtrResponses];

export type MarketDataGetStochData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 시간 간격
		 */
		interval?:
			| "1min"
			| "5min"
			| "15min"
			| "30min"
			| "60min"
			| "daily"
			| "weekly"
			| "monthly";
		/**
		 * Fastkperiod
		 * Fast K 기간
		 */
		fastkperiod?: number;
		/**
		 * Slowkperiod
		 * Slow K 기간
		 */
		slowkperiod?: number;
		/**
		 * Slowdperiod
		 * Slow D 기간
		 */
		slowdperiod?: number;
		/**
		 * Slowkmatype
		 * Slow K MA 타입
		 */
		slowkmatype?: number;
		/**
		 * Slowdmatype
		 * Slow D MA 타입
		 */
		slowdmatype?: number;
	};
	url: "/api/v1/market-data/tech_indicators/{symbol}/stoch";
};

export type MarketDataGetStochErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetStochError =
	MarketDataGetStochErrors[keyof MarketDataGetStochErrors];

export type MarketDataGetStochResponses = {
	/**
	 * Successful Response
	 */
	200: TechnicalIndicatorResponse;
};

export type MarketDataGetStochResponse =
	MarketDataGetStochResponses[keyof MarketDataGetStochResponses];

export type MarketDataGetMarketRegimeData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Symbol
		 * Symbol to retrieve regime for
		 */
		symbol: string;
		/**
		 * Refresh
		 * Force refresh from raw features
		 */
		refresh?: boolean;
		/**
		 * Lookback Days
		 * Lookback window in days
		 */
		lookback_days?: number;
	};
	url: "/api/v1/market-data/regime/";
};

export type MarketDataGetMarketRegimeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetMarketRegimeError =
	MarketDataGetMarketRegimeErrors[keyof MarketDataGetMarketRegimeErrors];

export type MarketDataGetMarketRegimeResponses = {
	/**
	 * Successful Response
	 */
	200: MarketRegimeResponse;
};

export type MarketDataGetMarketRegimeResponse =
	MarketDataGetMarketRegimeResponses[keyof MarketDataGetMarketRegimeResponses];

export type MarketDataGetMarketDataInfoData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/";
};

export type MarketDataGetMarketDataInfoErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetMarketDataInfoError =
	MarketDataGetMarketDataInfoErrors[keyof MarketDataGetMarketDataInfoErrors];

export type MarketDataGetMarketDataInfoResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/health";
};

export type MarketDataHealthCheckErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataHealthCheckError =
	MarketDataHealthCheckErrors[keyof MarketDataHealthCheckErrors];

export type MarketDataHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistListWatchlistsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/";
};

export type WatchlistListWatchlistsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistListWatchlistsError =
	WatchlistListWatchlistsErrors[keyof WatchlistListWatchlistsErrors];

export type WatchlistListWatchlistsResponses = {
	/**
	 * Successful Response
	 */
	200: WatchlistListResponse;
};

export type WatchlistListWatchlistsResponse =
	WatchlistListWatchlistsResponses[keyof WatchlistListWatchlistsResponses];

export type WatchlistCreateOrUpdateWatchlistData = {
	body: WatchlistUpdate;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/";
};

export type WatchlistCreateOrUpdateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistCreateOrUpdateWatchlistError =
	WatchlistCreateOrUpdateWatchlistErrors[keyof WatchlistCreateOrUpdateWatchlistErrors];

export type WatchlistCreateOrUpdateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: WatchlistResponse;
};

export type WatchlistCreateOrUpdateWatchlistResponse =
	WatchlistCreateOrUpdateWatchlistResponses[keyof WatchlistCreateOrUpdateWatchlistResponses];

export type WatchlistCreateWatchlistData = {
	body: WatchlistCreate;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/create";
};

export type WatchlistCreateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistCreateWatchlistError =
	WatchlistCreateWatchlistErrors[keyof WatchlistCreateWatchlistErrors];

export type WatchlistCreateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: WatchlistResponse;
};

export type WatchlistCreateWatchlistResponse =
	WatchlistCreateWatchlistResponses[keyof WatchlistCreateWatchlistResponses];

export type WatchlistDeleteWatchlistData = {
	body?: never;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}";
};

export type WatchlistDeleteWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistDeleteWatchlistError =
	WatchlistDeleteWatchlistErrors[keyof WatchlistDeleteWatchlistErrors];

export type WatchlistDeleteWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistGetWatchlistData = {
	body?: never;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}";
};

export type WatchlistGetWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistGetWatchlistError =
	WatchlistGetWatchlistErrors[keyof WatchlistGetWatchlistErrors];

export type WatchlistGetWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: WatchlistResponse;
};

export type WatchlistGetWatchlistResponse =
	WatchlistGetWatchlistResponses[keyof WatchlistGetWatchlistResponses];

export type WatchlistUpdateWatchlistData = {
	body: WatchlistUpdate;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}";
};

export type WatchlistUpdateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistUpdateWatchlistError =
	WatchlistUpdateWatchlistErrors[keyof WatchlistUpdateWatchlistErrors];

export type WatchlistUpdateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: WatchlistResponse;
};

export type WatchlistUpdateWatchlistResponse =
	WatchlistUpdateWatchlistResponses[keyof WatchlistUpdateWatchlistResponses];

export type WatchlistGetWatchlistCoverageData = {
	body?: never;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}/coverage";
};

export type WatchlistGetWatchlistCoverageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistGetWatchlistCoverageError =
	WatchlistGetWatchlistCoverageErrors[keyof WatchlistGetWatchlistCoverageErrors];

export type WatchlistGetWatchlistCoverageResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistSetupDefaultWatchlistData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/setup-default";
};

export type WatchlistSetupDefaultWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistSetupDefaultWatchlistError =
	WatchlistSetupDefaultWatchlistErrors[keyof WatchlistSetupDefaultWatchlistErrors];

export type WatchlistSetupDefaultWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type DashboardGetDashboardSummaryData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/dashboard/summary";
};

export type DashboardGetDashboardSummaryErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetDashboardSummaryError =
	DashboardGetDashboardSummaryErrors[keyof DashboardGetDashboardSummaryErrors];

export type DashboardGetDashboardSummaryResponses = {
	/**
	 * Successful Response
	 */
	200: DashboardSummaryResponse;
};

export type DashboardGetDashboardSummaryResponse =
	DashboardGetDashboardSummaryResponses[keyof DashboardGetDashboardSummaryResponses];

export type DashboardGetPortfolioPerformanceData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Period
		 * 조회 기간 (1D, 1W, 1M, 3M, 6M, 1Y)
		 */
		period?: string;
		/**
		 * Granularity
		 * 데이터 간격 (hour, day, week)
		 */
		granularity?: string;
	};
	url: "/api/v1/dashboard/portfolio/performance";
};

export type DashboardGetPortfolioPerformanceErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetPortfolioPerformanceError =
	DashboardGetPortfolioPerformanceErrors[keyof DashboardGetPortfolioPerformanceErrors];

export type DashboardGetPortfolioPerformanceResponses = {
	/**
	 * Successful Response
	 */
	200: PortfolioPerformanceResponse;
};

export type DashboardGetPortfolioPerformanceResponse =
	DashboardGetPortfolioPerformanceResponses[keyof DashboardGetPortfolioPerformanceResponses];

export type DashboardGetStrategyComparisonData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Limit
		 * 조회할 전략 수
		 */
		limit?: number;
		/**
		 * Sort By
		 * 정렬 기준 (return, sharpe, win_rate)
		 */
		sort_by?: string;
	};
	url: "/api/v1/dashboard/strategies/comparison";
};

export type DashboardGetStrategyComparisonErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetStrategyComparisonError =
	DashboardGetStrategyComparisonErrors[keyof DashboardGetStrategyComparisonErrors];

export type DashboardGetStrategyComparisonResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyComparisonResponse;
};

export type DashboardGetStrategyComparisonResponse =
	DashboardGetStrategyComparisonResponses[keyof DashboardGetStrategyComparisonResponses];

export type DashboardGetRecentTradesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Limit
		 * 조회할 거래 수
		 */
		limit?: number;
		/**
		 * Days
		 * 조회할 일수
		 */
		days?: number;
	};
	url: "/api/v1/dashboard/trades/recent";
};

export type DashboardGetRecentTradesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetRecentTradesError =
	DashboardGetRecentTradesErrors[keyof DashboardGetRecentTradesErrors];

export type DashboardGetRecentTradesResponses = {
	/**
	 * Successful Response
	 */
	200: RecentTradesResponse;
};

export type DashboardGetRecentTradesResponse =
	DashboardGetRecentTradesResponses[keyof DashboardGetRecentTradesResponses];

export type DashboardGetWatchlistQuotesData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/dashboard/watchlist/quotes";
};

export type DashboardGetWatchlistQuotesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetWatchlistQuotesError =
	DashboardGetWatchlistQuotesErrors[keyof DashboardGetWatchlistQuotesErrors];

export type DashboardGetWatchlistQuotesResponses = {
	/**
	 * Successful Response
	 */
	200: WatchlistQuotesResponse;
};

export type DashboardGetWatchlistQuotesResponse =
	DashboardGetWatchlistQuotesResponses[keyof DashboardGetWatchlistQuotesResponses];

export type DashboardGetNewsFeedData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Limit
		 * 조회할 뉴스 수
		 */
		limit?: number;
		/**
		 * Symbols
		 * 관련 심볼 필터
		 */
		symbols?: Array<string> | null;
		/**
		 * Categories
		 * 카테고리 필터
		 */
		categories?: Array<string> | null;
	};
	url: "/api/v1/dashboard/news/feed";
};

export type DashboardGetNewsFeedErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetNewsFeedError =
	DashboardGetNewsFeedErrors[keyof DashboardGetNewsFeedErrors];

export type DashboardGetNewsFeedResponses = {
	/**
	 * Successful Response
	 */
	200: NewsFeedResponse;
};

export type DashboardGetNewsFeedResponse =
	DashboardGetNewsFeedResponses[keyof DashboardGetNewsFeedResponses];

export type DashboardGetEconomicCalendarData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Days
		 * 조회할 일수
		 */
		days?: number;
		/**
		 * Importance
		 * 중요도 필터 (high, medium, low)
		 */
		importance?: Array<string> | null;
	};
	url: "/api/v1/dashboard/economic/calendar";
};

export type DashboardGetEconomicCalendarErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetEconomicCalendarError =
	DashboardGetEconomicCalendarErrors[keyof DashboardGetEconomicCalendarErrors];

export type DashboardGetEconomicCalendarResponses = {
	/**
	 * Successful Response
	 */
	200: EconomicCalendarResponse;
};

export type DashboardGetEconomicCalendarResponse =
	DashboardGetEconomicCalendarResponses[keyof DashboardGetEconomicCalendarResponses];

export type DashboardGetPredictiveOverviewData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Symbol
		 * 예측 인텔리전스를 요청할 심볼
		 */
		symbol: string;
		/**
		 * Horizon Days
		 * 예측 기간 (일)
		 */
		horizon_days?: number;
	};
	url: "/api/v1/dashboard/predictive/overview";
};

export type DashboardGetPredictiveOverviewErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetPredictiveOverviewError =
	DashboardGetPredictiveOverviewErrors[keyof DashboardGetPredictiveOverviewErrors];

export type DashboardGetPredictiveOverviewResponses = {
	/**
	 * Successful Response
	 */
	200: PredictiveInsightsResponse;
};

export type DashboardGetPredictiveOverviewResponse =
	DashboardGetPredictiveOverviewResponses[keyof DashboardGetPredictiveOverviewResponses];

export type DashboardGetPortfolioForecastData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Horizon Days
		 * 예측 기간 (일, 7-120일)
		 */
		horizon_days?: number;
	};
	url: "/api/v1/dashboard/portfolio/forecast";
};

export type DashboardGetPortfolioForecastErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DashboardGetPortfolioForecastError =
	DashboardGetPortfolioForecastErrors[keyof DashboardGetPortfolioForecastErrors];

export type DashboardGetPortfolioForecastResponses = {
	/**
	 * Successful Response
	 */
	200: PortfolioForecastResponse;
};

export type DashboardGetPortfolioForecastResponse =
	DashboardGetPortfolioForecastResponses[keyof DashboardGetPortfolioForecastResponses];

export type BacktestHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/health";
};

export type BacktestHealthCheckErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestHealthCheckError =
	BacktestHealthCheckErrors[keyof BacktestHealthCheckErrors];

export type BacktestHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestGetBacktestsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Status
		 * 실행 상태 필터
		 */
		status?: BacktestStatus | null;
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/";
};

export type BacktestGetBacktestsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetBacktestsError =
	BacktestGetBacktestsErrors[keyof BacktestGetBacktestsErrors];

export type BacktestGetBacktestsResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestListResponse;
};

export type BacktestGetBacktestsResponse =
	BacktestGetBacktestsResponses[keyof BacktestGetBacktestsResponses];

export type BacktestCreateBacktestData = {
	body: BacktestCreate;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/";
};

export type BacktestCreateBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestCreateBacktestError =
	BacktestCreateBacktestErrors[keyof BacktestCreateBacktestErrors];

export type BacktestCreateBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestCreateBacktestResponse =
	BacktestCreateBacktestResponses[keyof BacktestCreateBacktestResponses];

export type BacktestDeleteBacktestData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestDeleteBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestDeleteBacktestError =
	BacktestDeleteBacktestErrors[keyof BacktestDeleteBacktestErrors];

export type BacktestDeleteBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestGetBacktestData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestGetBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetBacktestError =
	BacktestGetBacktestErrors[keyof BacktestGetBacktestErrors];

export type BacktestGetBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestGetBacktestResponse =
	BacktestGetBacktestResponses[keyof BacktestGetBacktestResponses];

export type BacktestUpdateBacktestData = {
	body: BacktestUpdate;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestUpdateBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestUpdateBacktestError =
	BacktestUpdateBacktestErrors[keyof BacktestUpdateBacktestErrors];

export type BacktestUpdateBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestUpdateBacktestResponse =
	BacktestUpdateBacktestResponses[keyof BacktestUpdateBacktestResponses];

export type BacktestExecuteBacktestData = {
	body: BacktestExecutionRequest;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}/execute";
};

export type BacktestExecuteBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestExecuteBacktestError =
	BacktestExecuteBacktestErrors[keyof BacktestExecuteBacktestErrors];

export type BacktestExecuteBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestExecutionResponse;
};

export type BacktestExecuteBacktestResponse =
	BacktestExecuteBacktestResponses[keyof BacktestExecuteBacktestResponses];

export type BacktestGetBacktestExecutionsData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: {
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/{backtest_id}/executions";
};

export type BacktestGetBacktestExecutionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetBacktestExecutionsError =
	BacktestGetBacktestExecutionsErrors[keyof BacktestGetBacktestExecutionsErrors];

export type BacktestGetBacktestExecutionsResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestExecutionListResponse;
};

export type BacktestGetBacktestExecutionsResponse =
	BacktestGetBacktestExecutionsResponses[keyof BacktestGetBacktestExecutionsResponses];

export type BacktestGetPerformanceAnalyticsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/analytics/performance-stats";
};

export type BacktestGetPerformanceAnalyticsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetPerformanceAnalyticsError =
	BacktestGetPerformanceAnalyticsErrors[keyof BacktestGetPerformanceAnalyticsErrors];

export type BacktestGetPerformanceAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestGetTradesAnalyticsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Execution Id
		 * 특정 실행 ID 필터
		 */
		execution_id?: string | null;
		/**
		 * Symbol
		 * 심볼 필터
		 */
		symbol?: string | null;
	};
	url: "/api/v1/backtests/analytics/trades";
};

export type BacktestGetTradesAnalyticsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetTradesAnalyticsError =
	BacktestGetTradesAnalyticsErrors[keyof BacktestGetTradesAnalyticsErrors];

export type BacktestGetTradesAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestGetPortfolioHistoryData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}/portfolio-history";
};

export type BacktestGetPortfolioHistoryErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetPortfolioHistoryError =
	BacktestGetPortfolioHistoryErrors[keyof BacktestGetPortfolioHistoryErrors];

export type BacktestGetPortfolioHistoryResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestGetTradesHistoryData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}/trades-history";
};

export type BacktestGetTradesHistoryErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetTradesHistoryError =
	BacktestGetTradesHistoryErrors[keyof BacktestGetTradesHistoryErrors];

export type BacktestGetTradesHistoryResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestListOptimizationStudiesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Symbol
		 * Filter by symbol
		 */
		symbol?: string | null;
		/**
		 * Strategy Name
		 * Filter by strategy name
		 */
		strategy_name?: string | null;
		/**
		 * Status
		 * Filter by status
		 */
		status?: string | null;
		/**
		 * Limit
		 * Maximum number of studies
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/optimize/";
};

export type BacktestListOptimizationStudiesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestListOptimizationStudiesError =
	BacktestListOptimizationStudiesErrors[keyof BacktestListOptimizationStudiesErrors];

export type BacktestListOptimizationStudiesResponses = {
	/**
	 * Successful Response
	 */
	200: StudyListResponse;
};

export type BacktestListOptimizationStudiesResponse =
	BacktestListOptimizationStudiesResponses[keyof BacktestListOptimizationStudiesResponses];

export type BacktestCreateOptimizationStudyData = {
	body: OptimizationRequest;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/optimize/";
};

export type BacktestCreateOptimizationStudyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestCreateOptimizationStudyError =
	BacktestCreateOptimizationStudyErrors[keyof BacktestCreateOptimizationStudyErrors];

export type BacktestCreateOptimizationStudyResponses = {
	/**
	 * Successful Response
	 */
	200: OptimizationResponse;
};

export type BacktestCreateOptimizationStudyResponse =
	BacktestCreateOptimizationStudyResponses[keyof BacktestCreateOptimizationStudyResponses];

export type BacktestGetOptimizationProgressData = {
	body?: never;
	path: {
		/**
		 * Study Name
		 */
		study_name: string;
	};
	query?: never;
	url: "/api/v1/backtests/optimize/{study_name}";
};

export type BacktestGetOptimizationProgressErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetOptimizationProgressError =
	BacktestGetOptimizationProgressErrors[keyof BacktestGetOptimizationProgressErrors];

export type BacktestGetOptimizationProgressResponses = {
	/**
	 * Successful Response
	 */
	200: OptimizationResponse;
};

export type BacktestGetOptimizationProgressResponse =
	BacktestGetOptimizationProgressResponses[keyof BacktestGetOptimizationProgressResponses];

export type BacktestGetOptimizationResultData = {
	body?: never;
	path: {
		/**
		 * Study Name
		 */
		study_name: string;
	};
	query?: never;
	url: "/api/v1/backtests/optimize/{study_name}/result";
};

export type BacktestGetOptimizationResultErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestGetOptimizationResultError =
	BacktestGetOptimizationResultErrors[keyof BacktestGetOptimizationResultErrors];

export type BacktestGetOptimizationResultResponses = {
	/**
	 * Successful Response
	 */
	200: OptimizationResponse;
};

export type BacktestGetOptimizationResultResponse =
	BacktestGetOptimizationResultResponses[keyof BacktestGetOptimizationResultResponses];

export type StrategyGetStrategiesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Strategy Type
		 * 전략 타입 필터
		 */
		strategy_type?: StrategyType | null;
		/**
		 * Is Active
		 * 활성화 상태 필터
		 */
		is_active?: boolean | null;
		/**
		 * Is Template
		 * 템플릿 여부 필터
		 */
		is_template?: boolean | null;
		/**
		 * Limit
		 * 결과 수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/strategies/";
};

export type StrategyGetStrategiesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategiesError =
	StrategyGetStrategiesErrors[keyof StrategyGetStrategiesErrors];

export type StrategyGetStrategiesResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyListResponse;
};

export type StrategyGetStrategiesResponse =
	StrategyGetStrategiesResponses[keyof StrategyGetStrategiesResponses];

export type StrategyCreateStrategyData = {
	body: StrategyCreate;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/";
};

export type StrategyCreateStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateStrategyError =
	StrategyCreateStrategyErrors[keyof StrategyCreateStrategyErrors];

export type StrategyCreateStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyCreateStrategyResponse =
	StrategyCreateStrategyResponses[keyof StrategyCreateStrategyResponses];

export type StrategyDeleteStrategyData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyDeleteStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyDeleteStrategyError =
	StrategyDeleteStrategyErrors[keyof StrategyDeleteStrategyErrors];

export type StrategyDeleteStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetStrategyData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyGetStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyError =
	StrategyGetStrategyErrors[keyof StrategyGetStrategyErrors];

export type StrategyGetStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyGetStrategyResponse =
	StrategyGetStrategyResponses[keyof StrategyGetStrategyResponses];

export type StrategyUpdateStrategyData = {
	body: StrategyUpdate;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyUpdateStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyUpdateStrategyError =
	StrategyUpdateStrategyErrors[keyof StrategyUpdateStrategyErrors];

export type StrategyUpdateStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyUpdateStrategyResponse =
	StrategyUpdateStrategyResponses[keyof StrategyUpdateStrategyResponses];

export type StrategyExecuteStrategyData = {
	body: StrategyExecute;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}/execute";
};

export type StrategyExecuteStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyExecuteStrategyError =
	StrategyExecuteStrategyErrors[keyof StrategyExecuteStrategyErrors];

export type StrategyExecuteStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: ExecutionResponse;
};

export type StrategyExecuteStrategyResponse =
	StrategyExecuteStrategyResponses[keyof StrategyExecuteStrategyResponses];

export type StrategyGetStrategyExecutionsData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: {
		/**
		 * Limit
		 * 결과 수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/strategies/{strategy_id}/executions";
};

export type StrategyGetStrategyExecutionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyExecutionsError =
	StrategyGetStrategyExecutionsErrors[keyof StrategyGetStrategyExecutionsErrors];

export type StrategyGetStrategyExecutionsResponses = {
	/**
	 * Successful Response
	 */
	200: ExecutionListResponse;
};

export type StrategyGetStrategyExecutionsResponse =
	StrategyGetStrategyExecutionsResponses[keyof StrategyGetStrategyExecutionsResponses];

export type StrategyGetStrategyPerformanceData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}/performance";
};

export type StrategyGetStrategyPerformanceErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyPerformanceError =
	StrategyGetStrategyPerformanceErrors[keyof StrategyGetStrategyPerformanceErrors];

export type StrategyGetStrategyPerformanceResponses = {
	/**
	 * Successful Response
	 */
	200: PerformanceResponse;
};

export type StrategyGetStrategyPerformanceResponse =
	StrategyGetStrategyPerformanceResponses[keyof StrategyGetStrategyPerformanceResponses];

export type StrategyGetTemplatesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Strategy Type
		 * 전략 타입 필터
		 */
		strategy_type?: StrategyType | null;
	};
	url: "/api/v1/strategies/templates/";
};

export type StrategyGetTemplatesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplatesError =
	StrategyGetTemplatesErrors[keyof StrategyGetTemplatesErrors];

export type StrategyGetTemplatesResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateListResponse;
};

export type StrategyGetTemplatesResponse =
	StrategyGetTemplatesResponses[keyof StrategyGetTemplatesResponses];

export type StrategyCreateTemplateData = {
	body: TemplateCreate;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/templates/";
};

export type StrategyCreateTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateTemplateError =
	StrategyCreateTemplateErrors[keyof StrategyCreateTemplateErrors];

export type StrategyCreateTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyCreateTemplateResponse =
	StrategyCreateTemplateResponses[keyof StrategyCreateTemplateResponses];

export type StrategyDeleteTemplateData = {
	body?: never;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyDeleteTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyDeleteTemplateError =
	StrategyDeleteTemplateErrors[keyof StrategyDeleteTemplateErrors];

export type StrategyDeleteTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetTemplateData = {
	body?: never;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyGetTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplateError =
	StrategyGetTemplateErrors[keyof StrategyGetTemplateErrors];

export type StrategyGetTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyGetTemplateResponse =
	StrategyGetTemplateResponses[keyof StrategyGetTemplateResponses];

export type StrategyUpdateTemplateData = {
	body: TemplateUpdate;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyUpdateTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyUpdateTemplateError =
	StrategyUpdateTemplateErrors[keyof StrategyUpdateTemplateErrors];

export type StrategyUpdateTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyUpdateTemplateResponse =
	StrategyUpdateTemplateResponses[keyof StrategyUpdateTemplateResponses];

export type StrategyCreateStrategyFromTemplateData = {
	body: StrategyCreateFromTemplate;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}/create-strategy";
};

export type StrategyCreateStrategyFromTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateStrategyFromTemplateError =
	StrategyCreateStrategyFromTemplateErrors[keyof StrategyCreateStrategyFromTemplateErrors];

export type StrategyCreateStrategyFromTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyCreateStrategyFromTemplateResponse =
	StrategyCreateStrategyFromTemplateResponses[keyof StrategyCreateStrategyFromTemplateResponses];

export type StrategyGetTemplateUsageStatsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/templates/analytics/usage-stats";
};

export type StrategyGetTemplateUsageStatsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplateUsageStatsError =
	StrategyGetTemplateUsageStatsErrors[keyof StrategyGetTemplateUsageStatsErrors];

export type StrategyGetTemplateUsageStatsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type SignalsGetMlSignalData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Lookback Days
		 * Feature lookback window
		 */
		lookback_days?: number;
	};
	url: "/api/v1/signals/{symbol}";
};

export type SignalsGetMlSignalErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type SignalsGetMlSignalError =
	SignalsGetMlSignalErrors[keyof SignalsGetMlSignalErrors];

export type SignalsGetMlSignalResponses = {
	/**
	 * Successful Response
	 */
	200: MlSignalResponse;
};

export type SignalsGetMlSignalResponse =
	SignalsGetMlSignalResponses[keyof SignalsGetMlSignalResponses];

export type MlListScenariosData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/scenarios";
};

export type MlListScenariosErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListScenariosError =
	MlListScenariosErrors[keyof MlListScenariosErrors];

export type MlListScenariosResponses = {
	/**
	 * Response Ml-List Scenarios
	 * Successful Response
	 */
	200: Array<ScenarioResponse>;
};

export type MlListScenariosResponse =
	MlListScenariosResponses[keyof MlListScenariosResponses];

export type MlRegisterScenarioData = {
	body: ScenarioCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/scenarios";
};

export type MlRegisterScenarioErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRegisterScenarioError =
	MlRegisterScenarioErrors[keyof MlRegisterScenarioErrors];

export type MlRegisterScenarioResponses = {
	/**
	 * Successful Response
	 */
	201: ScenarioResponse;
};

export type MlRegisterScenarioResponse =
	MlRegisterScenarioResponses[keyof MlRegisterScenarioResponses];

export type MlUpdateScenarioData = {
	body: ScenarioUpdate;
	path: {
		/**
		 * Name
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/scenarios/{name}";
};

export type MlUpdateScenarioErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlUpdateScenarioError =
	MlUpdateScenarioErrors[keyof MlUpdateScenarioErrors];

export type MlUpdateScenarioResponses = {
	/**
	 * Successful Response
	 */
	200: ScenarioResponse;
};

export type MlUpdateScenarioResponse =
	MlUpdateScenarioResponses[keyof MlUpdateScenarioResponses];

export type MlListEvaluationRunsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Scenario Name
		 */
		scenario_name?: string | null;
	};
	url: "/api/v1/ml/evaluation/evaluation/runs";
};

export type MlListEvaluationRunsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListEvaluationRunsError =
	MlListEvaluationRunsErrors[keyof MlListEvaluationRunsErrors];

export type MlListEvaluationRunsResponses = {
	/**
	 * Response Ml-List Evaluation Runs
	 * Successful Response
	 */
	200: Array<EvaluationRunResponse>;
};

export type MlListEvaluationRunsResponse =
	MlListEvaluationRunsResponses[keyof MlListEvaluationRunsResponses];

export type MlRunEvaluationData = {
	body: EvaluationRequest;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/runs";
};

export type MlRunEvaluationErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRunEvaluationError =
	MlRunEvaluationErrors[keyof MlRunEvaluationErrors];

export type MlRunEvaluationResponses = {
	/**
	 * Successful Response
	 */
	201: EvaluationRunResponse;
};

export type MlRunEvaluationResponse =
	MlRunEvaluationResponses[keyof MlRunEvaluationResponses];

export type MlGetEvaluationReportData = {
	body?: never;
	path: {
		/**
		 * Run Id
		 */
		run_id: string;
	};
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/runs/{run_id}/report";
};

export type MlGetEvaluationReportErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetEvaluationReportError =
	MlGetEvaluationReportErrors[keyof MlGetEvaluationReportErrors];

export type MlGetEvaluationReportResponses = {
	/**
	 * Successful Response
	 */
	200: EvaluationReport;
};

export type MlGetEvaluationReportResponse =
	MlGetEvaluationReportResponses[keyof MlGetEvaluationReportResponses];

export type MlGetDetailedMetricsData = {
	body?: never;
	path: {
		/**
		 * Run Id
		 */
		run_id: string;
	};
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/runs/{run_id}/metrics";
};

export type MlGetDetailedMetricsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetDetailedMetricsError =
	MlGetDetailedMetricsErrors[keyof MlGetDetailedMetricsErrors];

export type MlGetDetailedMetricsResponses = {
	/**
	 * Successful Response
	 */
	200: DetailedMetrics;
};

export type MlGetDetailedMetricsResponse =
	MlGetDetailedMetricsResponses[keyof MlGetDetailedMetricsResponses];

export type MlListBenchmarksData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/benchmarks";
};

export type MlListBenchmarksErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListBenchmarksError =
	MlListBenchmarksErrors[keyof MlListBenchmarksErrors];

export type MlListBenchmarksResponses = {
	/**
	 * Response Ml-List Benchmarks
	 * Successful Response
	 */
	200: Array<BenchmarkResponse>;
};

export type MlListBenchmarksResponse =
	MlListBenchmarksResponses[keyof MlListBenchmarksResponses];

export type MlCreateBenchmarkData = {
	body: BenchmarkCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/benchmarks";
};

export type MlCreateBenchmarkErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCreateBenchmarkError =
	MlCreateBenchmarkErrors[keyof MlCreateBenchmarkErrors];

export type MlCreateBenchmarkResponses = {
	/**
	 * Successful Response
	 */
	201: BenchmarkResponse;
};

export type MlCreateBenchmarkResponse =
	MlCreateBenchmarkResponses[keyof MlCreateBenchmarkResponses];

export type MlRunBenchmarkData = {
	body: BenchmarkRunRequest;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/benchmarks/run";
};

export type MlRunBenchmarkErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRunBenchmarkError =
	MlRunBenchmarkErrors[keyof MlRunBenchmarkErrors];

export type MlRunBenchmarkResponses = {
	/**
	 * Successful Response
	 */
	200: BenchmarkRunResponse;
};

export type MlRunBenchmarkResponse =
	MlRunBenchmarkResponses[keyof MlRunBenchmarkResponses];

export type MlListAbTestsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/ab-tests";
};

export type MlListAbTestsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListAbTestsError = MlListAbTestsErrors[keyof MlListAbTestsErrors];

export type MlListAbTestsResponses = {
	/**
	 * Response Ml-List Ab Tests
	 * Successful Response
	 */
	200: Array<AbTestResponse>;
};

export type MlListAbTestsResponse =
	MlListAbTestsResponses[keyof MlListAbTestsResponses];

export type MlCreateAbTestData = {
	body: AbTestCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/ab-tests";
};

export type MlCreateAbTestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCreateAbTestError =
	MlCreateAbTestErrors[keyof MlCreateAbTestErrors];

export type MlCreateAbTestResponses = {
	/**
	 * Successful Response
	 */
	201: AbTestResponse;
};

export type MlCreateAbTestResponse =
	MlCreateAbTestResponses[keyof MlCreateAbTestResponses];

export type MlGetAbTestData = {
	body?: never;
	path: {
		/**
		 * Test Id
		 */
		test_id: string;
	};
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/ab-tests/{test_id}";
};

export type MlGetAbTestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetAbTestError = MlGetAbTestErrors[keyof MlGetAbTestErrors];

export type MlGetAbTestResponses = {
	/**
	 * Successful Response
	 */
	200: AbTestResponse;
};

export type MlGetAbTestResponse =
	MlGetAbTestResponses[keyof MlGetAbTestResponses];

export type MlRequestFairnessAuditData = {
	body: FairnessAuditRequest;
	path?: never;
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/fairness/audit";
};

export type MlRequestFairnessAuditErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRequestFairnessAuditError =
	MlRequestFairnessAuditErrors[keyof MlRequestFairnessAuditErrors];

export type MlRequestFairnessAuditResponses = {
	/**
	 * Successful Response
	 */
	201: FairnessReportResponse;
};

export type MlRequestFairnessAuditResponse =
	MlRequestFairnessAuditResponses[keyof MlRequestFairnessAuditResponses];

export type MlListFairnessReportsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Model Id
		 */
		model_id?: string | null;
	};
	url: "/api/v1/ml/evaluation/evaluation/fairness/reports";
};

export type MlListFairnessReportsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListFairnessReportsError =
	MlListFairnessReportsErrors[keyof MlListFairnessReportsErrors];

export type MlListFairnessReportsResponses = {
	/**
	 * Response Ml-List Fairness Reports
	 * Successful Response
	 */
	200: Array<FairnessReportResponse>;
};

export type MlListFairnessReportsResponse =
	MlListFairnessReportsResponses[keyof MlListFairnessReportsResponses];

export type MlGetFairnessReportData = {
	body?: never;
	path: {
		/**
		 * Report Id
		 */
		report_id: string;
	};
	query?: never;
	url: "/api/v1/ml/evaluation/evaluation/fairness/reports/{report_id}";
};

export type MlGetFairnessReportErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetFairnessReportError =
	MlGetFairnessReportErrors[keyof MlGetFairnessReportErrors];

export type MlGetFairnessReportResponses = {
	/**
	 * Successful Response
	 */
	200: FairnessReportResponse;
};

export type MlGetFairnessReportResponse =
	MlGetFairnessReportResponses[keyof MlGetFairnessReportResponses];

export type MlListExperimentsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Owner
		 */
		owner?: string | null;
		/**
		 * Status
		 */
		status?: string | null;
	};
	url: "/api/v1/ml/lifecycle/lifecycle/experiments";
};

export type MlListExperimentsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListExperimentsError =
	MlListExperimentsErrors[keyof MlListExperimentsErrors];

export type MlListExperimentsResponses = {
	/**
	 * Response Ml-List Experiments
	 * Successful Response
	 */
	200: Array<ExperimentResponse>;
};

export type MlListExperimentsResponse =
	MlListExperimentsResponses[keyof MlListExperimentsResponses];

export type MlCreateExperimentData = {
	body: ExperimentCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/experiments";
};

export type MlCreateExperimentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCreateExperimentError =
	MlCreateExperimentErrors[keyof MlCreateExperimentErrors];

export type MlCreateExperimentResponses = {
	/**
	 * Successful Response
	 */
	201: ExperimentResponse;
};

export type MlCreateExperimentResponse =
	MlCreateExperimentResponses[keyof MlCreateExperimentResponses];

export type MlGetExperimentData = {
	body?: never;
	path: {
		/**
		 * Name
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/experiments/{name}";
};

export type MlGetExperimentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetExperimentError =
	MlGetExperimentErrors[keyof MlGetExperimentErrors];

export type MlGetExperimentResponses = {
	/**
	 * Successful Response
	 */
	200: ExperimentResponse;
};

export type MlGetExperimentResponse =
	MlGetExperimentResponses[keyof MlGetExperimentResponses];

export type MlUpdateExperimentData = {
	body: ExperimentUpdate;
	path: {
		/**
		 * Name
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/experiments/{name}";
};

export type MlUpdateExperimentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlUpdateExperimentError =
	MlUpdateExperimentErrors[keyof MlUpdateExperimentErrors];

export type MlUpdateExperimentResponses = {
	/**
	 * Successful Response
	 */
	200: ExperimentResponse;
};

export type MlUpdateExperimentResponse =
	MlUpdateExperimentResponses[keyof MlUpdateExperimentResponses];

export type MlListRunsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Experiment Name
		 */
		experiment_name?: string | null;
		/**
		 * Statuses
		 */
		statuses?: Array<string> | null;
	};
	url: "/api/v1/ml/lifecycle/lifecycle/runs";
};

export type MlListRunsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListRunsError = MlListRunsErrors[keyof MlListRunsErrors];

export type MlListRunsResponses = {
	/**
	 * Response Ml-List Runs
	 * Successful Response
	 */
	200: Array<RunResponse>;
};

export type MlListRunsResponse = MlListRunsResponses[keyof MlListRunsResponses];

export type MlLogRunData = {
	body: RunCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/runs";
};

export type MlLogRunErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlLogRunError = MlLogRunErrors[keyof MlLogRunErrors];

export type MlLogRunResponses = {
	/**
	 * Successful Response
	 */
	201: RunResponse;
};

export type MlLogRunResponse = MlLogRunResponses[keyof MlLogRunResponses];

export type MlGetRunData = {
	body?: never;
	path: {
		/**
		 * Run Id
		 */
		run_id: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/runs/{run_id}";
};

export type MlGetRunErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetRunError = MlGetRunErrors[keyof MlGetRunErrors];

export type MlGetRunResponses = {
	/**
	 * Successful Response
	 */
	200: RunResponse;
};

export type MlGetRunResponse = MlGetRunResponses[keyof MlGetRunResponses];

export type MlUpdateRunData = {
	body: RunUpdate;
	path: {
		/**
		 * Run Id
		 */
		run_id: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/runs/{run_id}";
};

export type MlUpdateRunErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlUpdateRunError = MlUpdateRunErrors[keyof MlUpdateRunErrors];

export type MlUpdateRunResponses = {
	/**
	 * Successful Response
	 */
	200: RunResponse;
};

export type MlUpdateRunResponse =
	MlUpdateRunResponses[keyof MlUpdateRunResponses];

export type MlListModelVersionsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Model Name
		 */
		model_name?: string | null;
		/**
		 * Stage
		 */
		stage?: string | null;
	};
	url: "/api/v1/ml/lifecycle/lifecycle/models";
};

export type MlListModelVersionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListModelVersionsError =
	MlListModelVersionsErrors[keyof MlListModelVersionsErrors];

export type MlListModelVersionsResponses = {
	/**
	 * Response Ml-List Model Versions
	 * Successful Response
	 */
	200: Array<ModelVersionResponse>;
};

export type MlListModelVersionsResponse =
	MlListModelVersionsResponses[keyof MlListModelVersionsResponses];

export type MlRegisterModelVersionData = {
	body: ModelVersionCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/models";
};

export type MlRegisterModelVersionErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRegisterModelVersionError =
	MlRegisterModelVersionErrors[keyof MlRegisterModelVersionErrors];

export type MlRegisterModelVersionResponses = {
	/**
	 * Successful Response
	 */
	201: ModelVersionResponse;
};

export type MlRegisterModelVersionResponse =
	MlRegisterModelVersionResponses[keyof MlRegisterModelVersionResponses];

export type MlGetModelVersionData = {
	body?: never;
	path: {
		/**
		 * Model Name
		 */
		model_name: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/models/{model_name}/{version}";
};

export type MlGetModelVersionErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetModelVersionError =
	MlGetModelVersionErrors[keyof MlGetModelVersionErrors];

export type MlGetModelVersionResponses = {
	/**
	 * Successful Response
	 */
	200: ModelVersionResponse;
};

export type MlGetModelVersionResponse =
	MlGetModelVersionResponses[keyof MlGetModelVersionResponses];

export type MlUpdateModelVersionData = {
	body: ChecklistUpdateRequest;
	path: {
		/**
		 * Model Name
		 */
		model_name: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/models/{model_name}/{version}";
};

export type MlUpdateModelVersionErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlUpdateModelVersionError =
	MlUpdateModelVersionErrors[keyof MlUpdateModelVersionErrors];

export type MlUpdateModelVersionResponses = {
	/**
	 * Successful Response
	 */
	200: ModelVersionResponse;
};

export type MlUpdateModelVersionResponse =
	MlUpdateModelVersionResponses[keyof MlUpdateModelVersionResponses];

export type MlCompareModelVersionsData = {
	body: ModelComparisonRequest;
	path: {
		/**
		 * Model Name
		 */
		model_name: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/models/{model_name}/compare";
};

export type MlCompareModelVersionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCompareModelVersionsError =
	MlCompareModelVersionsErrors[keyof MlCompareModelVersionsErrors];

export type MlCompareModelVersionsResponses = {
	/**
	 * Successful Response
	 */
	200: ModelComparisonResponse;
};

export type MlCompareModelVersionsResponse =
	MlCompareModelVersionsResponses[keyof MlCompareModelVersionsResponses];

export type MlListDriftEventsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Model Name
		 */
		model_name?: string | null;
		/**
		 * Severity
		 */
		severity?: string | null;
	};
	url: "/api/v1/ml/lifecycle/lifecycle/drift-events";
};

export type MlListDriftEventsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListDriftEventsError =
	MlListDriftEventsErrors[keyof MlListDriftEventsErrors];

export type MlListDriftEventsResponses = {
	/**
	 * Response Ml-List Drift Events
	 * Successful Response
	 */
	200: Array<DriftEventResponse>;
};

export type MlListDriftEventsResponse =
	MlListDriftEventsResponses[keyof MlListDriftEventsResponses];

export type MlRecordDriftEventData = {
	body: DriftEventCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/drift-events";
};

export type MlRecordDriftEventErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRecordDriftEventError =
	MlRecordDriftEventErrors[keyof MlRecordDriftEventErrors];

export type MlRecordDriftEventResponses = {
	/**
	 * Successful Response
	 */
	200: DriftEventResponse;
};

export type MlRecordDriftEventResponse =
	MlRecordDriftEventResponses[keyof MlRecordDriftEventResponses];

export type MlListDeploymentsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Model Name
		 */
		model_name?: string | null;
		/**
		 * Environment
		 */
		environment?: string | null;
		/**
		 * Status
		 */
		status?: string | null;
	};
	url: "/api/v1/ml/lifecycle/lifecycle/deployments";
};

export type MlListDeploymentsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListDeploymentsError =
	MlListDeploymentsErrors[keyof MlListDeploymentsErrors];

export type MlListDeploymentsResponses = {
	/**
	 * Response Ml-List Deployments
	 * Successful Response
	 */
	200: Array<DeploymentResponse>;
};

export type MlListDeploymentsResponse =
	MlListDeploymentsResponses[keyof MlListDeploymentsResponses];

export type MlCreateDeploymentData = {
	body: DeploymentCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/deployments";
};

export type MlCreateDeploymentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCreateDeploymentError =
	MlCreateDeploymentErrors[keyof MlCreateDeploymentErrors];

export type MlCreateDeploymentResponses = {
	/**
	 * Successful Response
	 */
	201: DeploymentResponse;
};

export type MlCreateDeploymentResponse =
	MlCreateDeploymentResponses[keyof MlCreateDeploymentResponses];

export type MlGetDeploymentData = {
	body?: never;
	path: {
		/**
		 * Deployment Id
		 */
		deployment_id: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/deployments/{deployment_id}";
};

export type MlGetDeploymentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetDeploymentError =
	MlGetDeploymentErrors[keyof MlGetDeploymentErrors];

export type MlGetDeploymentResponses = {
	/**
	 * Successful Response
	 */
	200: DeploymentResponse;
};

export type MlGetDeploymentResponse =
	MlGetDeploymentResponses[keyof MlGetDeploymentResponses];

export type MlUpdateDeploymentData = {
	body: DeploymentUpdate;
	path: {
		/**
		 * Deployment Id
		 */
		deployment_id: string;
	};
	query?: never;
	url: "/api/v1/ml/lifecycle/lifecycle/deployments/{deployment_id}";
};

export type MlUpdateDeploymentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlUpdateDeploymentError =
	MlUpdateDeploymentErrors[keyof MlUpdateDeploymentErrors];

export type MlUpdateDeploymentResponses = {
	/**
	 * Successful Response
	 */
	200: DeploymentResponse;
};

export type MlUpdateDeploymentResponse =
	MlUpdateDeploymentResponses[keyof MlUpdateDeploymentResponses];

export type MlTrainModelData = {
	body: TrainModelRequest;
	path?: never;
	query?: never;
	url: "/api/v1/ml/train/train";
};

export type MlTrainModelErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlTrainModelError = MlTrainModelErrors[keyof MlTrainModelErrors];

export type MlTrainModelResponses = {
	/**
	 * Successful Response
	 */
	200: TrainModelResponse;
};

export type MlTrainModelResponse =
	MlTrainModelResponses[keyof MlTrainModelResponses];

export type MlListModelsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Model Type
		 */
		model_type?: string;
	};
	url: "/api/v1/ml/train/models";
};

export type MlListModelsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListModelsError = MlListModelsErrors[keyof MlListModelsErrors];

export type MlListModelsResponses = {
	/**
	 * Successful Response
	 */
	200: ModelListResponse;
};

export type MlListModelsResponse =
	MlListModelsResponses[keyof MlListModelsResponses];

export type MlDeleteModelData = {
	body?: never;
	path: {
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/ml/train/models/{version}";
};

export type MlDeleteModelErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlDeleteModelError = MlDeleteModelErrors[keyof MlDeleteModelErrors];

export type MlDeleteModelResponses = {
	/**
	 * Response Ml-Delete Model
	 * Successful Response
	 */
	200: {
		[key: string]: string;
	};
};

export type MlDeleteModelResponse =
	MlDeleteModelResponses[keyof MlDeleteModelResponses];

export type MlGetModelInfoData = {
	body?: never;
	path: {
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/ml/train/models/{version}";
};

export type MlGetModelInfoErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetModelInfoError =
	MlGetModelInfoErrors[keyof MlGetModelInfoErrors];

export type MlGetModelInfoResponses = {
	/**
	 * Successful Response
	 */
	200: ModelInfoResponse;
};

export type MlGetModelInfoResponse =
	MlGetModelInfoResponses[keyof MlGetModelInfoResponses];

export type MlCompareModelsData = {
	body?: never;
	path: {
		/**
		 * Metric
		 */
		metric: string;
	};
	query?: {
		/**
		 * Versions
		 */
		versions?: string;
	};
	url: "/api/v1/ml/train/models/compare/{metric}";
};

export type MlCompareModelsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCompareModelsError =
	MlCompareModelsErrors[keyof MlCompareModelsErrors];

export type MlCompareModelsResponses = {
	/**
	 * Response Ml-Compare Models
	 * Successful Response
	 */
	200: {
		[key: string]: number;
	};
};

export type MlCompareModelsResponse =
	MlCompareModelsResponses[keyof MlCompareModelsResponses];

export type MlListFeaturesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Owner
		 */
		owner?: string | null;
		/**
		 * Feature Type
		 */
		feature_type?: FeatureType | null;
		/**
		 * Status
		 */
		status?: FeatureStatus | null;
		/**
		 * Tags
		 * Comma-separated tags
		 */
		tags?: string | null;
		/**
		 * Skip
		 */
		skip?: number;
		/**
		 * Limit
		 */
		limit?: number;
	};
	url: "/api/v1/ml/features";
};

export type MlListFeaturesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListFeaturesError =
	MlListFeaturesErrors[keyof MlListFeaturesErrors];

export type MlListFeaturesResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureListResponse;
};

export type MlListFeaturesResponse =
	MlListFeaturesResponses[keyof MlListFeaturesResponses];

export type MlCreateFeatureData = {
	body: FeatureCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/features";
};

export type MlCreateFeatureErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCreateFeatureError =
	MlCreateFeatureErrors[keyof MlCreateFeatureErrors];

export type MlCreateFeatureResponses = {
	/**
	 * Successful Response
	 */
	201: FeatureResponse;
};

export type MlCreateFeatureResponse =
	MlCreateFeatureResponses[keyof MlCreateFeatureResponses];

export type MlDeleteFeatureData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}";
};

export type MlDeleteFeatureErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlDeleteFeatureError =
	MlDeleteFeatureErrors[keyof MlDeleteFeatureErrors];

export type MlDeleteFeatureResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type MlDeleteFeatureResponse =
	MlDeleteFeatureResponses[keyof MlDeleteFeatureResponses];

export type MlGetFeatureData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}";
};

export type MlGetFeatureErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetFeatureError = MlGetFeatureErrors[keyof MlGetFeatureErrors];

export type MlGetFeatureResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureResponse;
};

export type MlGetFeatureResponse =
	MlGetFeatureResponses[keyof MlGetFeatureResponses];

export type MlUpdateFeatureData = {
	body: FeatureUpdate;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}";
};

export type MlUpdateFeatureErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlUpdateFeatureError =
	MlUpdateFeatureErrors[keyof MlUpdateFeatureErrors];

export type MlUpdateFeatureResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureResponse;
};

export type MlUpdateFeatureResponse =
	MlUpdateFeatureResponses[keyof MlUpdateFeatureResponses];

export type MlActivateFeatureData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}/activate";
};

export type MlActivateFeatureErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlActivateFeatureError =
	MlActivateFeatureErrors[keyof MlActivateFeatureErrors];

export type MlActivateFeatureResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureResponse;
};

export type MlActivateFeatureResponse =
	MlActivateFeatureResponses[keyof MlActivateFeatureResponses];

export type MlDeprecateFeatureData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}/deprecate";
};

export type MlDeprecateFeatureErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlDeprecateFeatureError =
	MlDeprecateFeatureErrors[keyof MlDeprecateFeatureErrors];

export type MlDeprecateFeatureResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureResponse;
};

export type MlDeprecateFeatureResponse =
	MlDeprecateFeatureResponses[keyof MlDeprecateFeatureResponses];

export type MlGetFeatureVersionsData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}/versions";
};

export type MlGetFeatureVersionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetFeatureVersionsError =
	MlGetFeatureVersionsErrors[keyof MlGetFeatureVersionsErrors];

export type MlGetFeatureVersionsResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureVersionListResponse;
};

export type MlGetFeatureVersionsResponse =
	MlGetFeatureVersionsResponses[keyof MlGetFeatureVersionsResponses];

export type MlCreateVersionData = {
	body: FeatureVersionCreate;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}/versions";
};

export type MlCreateVersionErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlCreateVersionError =
	MlCreateVersionErrors[keyof MlCreateVersionErrors];

export type MlCreateVersionResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureVersionResponse;
};

export type MlCreateVersionResponse =
	MlCreateVersionResponses[keyof MlCreateVersionResponses];

export type MlRollbackVersionData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query: {
		/**
		 * Target Version
		 * 롤백할 버전
		 */
		target_version: string;
	};
	url: "/api/v1/ml/features/{feature_name}/rollback";
};

export type MlRollbackVersionErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRollbackVersionError =
	MlRollbackVersionErrors[keyof MlRollbackVersionErrors];

export type MlRollbackVersionResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureVersionResponse;
};

export type MlRollbackVersionResponse =
	MlRollbackVersionResponses[keyof MlRollbackVersionResponses];

export type MlGetFeatureLineageData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: {
		/**
		 * Recursive
		 * 재귀적 의존성 추적
		 */
		recursive?: boolean;
	};
	url: "/api/v1/ml/features/{feature_name}/lineage";
};

export type MlGetFeatureLineageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetFeatureLineageError =
	MlGetFeatureLineageErrors[keyof MlGetFeatureLineageErrors];

export type MlGetFeatureLineageResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureLineageResponse;
};

export type MlGetFeatureLineageResponse =
	MlGetFeatureLineageResponses[keyof MlGetFeatureLineageResponses];

export type MlRecordFeatureUsageData = {
	body: FeatureUsageCreate;
	path?: never;
	query?: never;
	url: "/api/v1/ml/features/usage";
};

export type MlRecordFeatureUsageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlRecordFeatureUsageError =
	MlRecordFeatureUsageErrors[keyof MlRecordFeatureUsageErrors];

export type MlRecordFeatureUsageResponses = {
	/**
	 * Successful Response
	 */
	201: FeatureUsageResponse;
};

export type MlRecordFeatureUsageResponse =
	MlRecordFeatureUsageResponses[keyof MlRecordFeatureUsageResponses];

export type MlGetFeatureStatisticsData = {
	body?: never;
	path: {
		/**
		 * Feature Name
		 */
		feature_name: string;
	};
	query?: never;
	url: "/api/v1/ml/features/{feature_name}/statistics";
};

export type MlGetFeatureStatisticsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetFeatureStatisticsError =
	MlGetFeatureStatisticsErrors[keyof MlGetFeatureStatisticsErrors];

export type MlGetFeatureStatisticsResponses = {
	/**
	 * Successful Response
	 */
	200: FeatureStatisticsResponse;
};

export type MlGetFeatureStatisticsResponse =
	MlGetFeatureStatisticsResponses[keyof MlGetFeatureStatisticsResponses];

export type MlListDatasetsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/ml/features/datasets";
};

export type MlListDatasetsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlListDatasetsError =
	MlListDatasetsErrors[keyof MlListDatasetsErrors];

export type MlListDatasetsResponses = {
	/**
	 * Response Ml-List Datasets
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MlListDatasetsResponse =
	MlListDatasetsResponses[keyof MlListDatasetsResponses];

export type MlGetDatasetData = {
	body?: never;
	path: {
		/**
		 * Dataset Id
		 */
		dataset_id: string;
	};
	query?: never;
	url: "/api/v1/ml/features/datasets/{dataset_id}";
};

export type MlGetDatasetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MlGetDatasetError = MlGetDatasetErrors[keyof MlGetDatasetErrors];

export type MlGetDatasetResponses = {
	/**
	 * Response Ml-Get Dataset
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MlGetDatasetResponse =
	MlGetDatasetResponses[keyof MlGetDatasetResponses];

export type GenAiExecuteChatopsData = {
	body: ChatOpsRequest;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/chatops/";
};

export type GenAiExecuteChatopsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiExecuteChatopsError =
	GenAiExecuteChatopsErrors[keyof GenAiExecuteChatopsErrors];

export type GenAiExecuteChatopsResponses = {
	/**
	 * Successful Response
	 */
	200: ChatOpsResponse;
};

export type GenAiExecuteChatopsResponse =
	GenAiExecuteChatopsResponses[keyof GenAiExecuteChatopsResponses];

export type GenAiCreateChatSessionData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * User Id
		 */
		user_id: string;
	};
	url: "/api/v1/gen-ai/chatops-advanced/session/create";
};

export type GenAiCreateChatSessionErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiCreateChatSessionError =
	GenAiCreateChatSessionErrors[keyof GenAiCreateChatSessionErrors];

export type GenAiCreateChatSessionResponses = {
	/**
	 * Response Gen Ai-Create Chat Session
	 * Successful Response
	 */
	200: {
		[key: string]: string;
	};
};

export type GenAiCreateChatSessionResponse =
	GenAiCreateChatSessionResponses[keyof GenAiCreateChatSessionResponses];

export type GenAiChatWithSessionData = {
	body: ChatOpsRequest;
	path: {
		/**
		 * Session Id
		 */
		session_id: string;
	};
	query?: never;
	url: "/api/v1/gen-ai/chatops-advanced/session/{session_id}/chat";
};

export type GenAiChatWithSessionErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiChatWithSessionError =
	GenAiChatWithSessionErrors[keyof GenAiChatWithSessionErrors];

export type GenAiChatWithSessionResponses = {
	/**
	 * Response Gen Ai-Chat With Session
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type GenAiChatWithSessionResponse =
	GenAiChatWithSessionResponses[keyof GenAiChatWithSessionResponses];

export type GenAiCompareStrategiesData = {
	body: StrategyComparisonRequest;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/chatops-advanced/strategies/compare";
};

export type GenAiCompareStrategiesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiCompareStrategiesError =
	GenAiCompareStrategiesErrors[keyof GenAiCompareStrategiesErrors];

export type GenAiCompareStrategiesResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyComparisonResult;
};

export type GenAiCompareStrategiesResponse =
	GenAiCompareStrategiesResponses[keyof GenAiCompareStrategiesResponses];

export type GenAiDebugCompareStrategiesData = {
	body: StrategyComparisonRequest;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/chatops-advanced/strategies/compare/debug";
};

export type GenAiDebugCompareStrategiesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiDebugCompareStrategiesError =
	GenAiDebugCompareStrategiesErrors[keyof GenAiDebugCompareStrategiesErrors];

export type GenAiDebugCompareStrategiesResponses = {
	/**
	 * Response Gen Ai-Debug Compare Strategies
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type GenAiDebugCompareStrategiesResponse =
	GenAiDebugCompareStrategiesResponses[keyof GenAiDebugCompareStrategiesResponses];

export type GenAiTriggerAutoBacktestData = {
	body: AutoBacktestRequest;
	path?: never;
	query?: {
		/**
		 * User Id
		 */
		user_id?: string;
	};
	url: "/api/v1/gen-ai/chatops-advanced/backtest/trigger";
};

export type GenAiTriggerAutoBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiTriggerAutoBacktestError =
	GenAiTriggerAutoBacktestErrors[keyof GenAiTriggerAutoBacktestErrors];

export type GenAiTriggerAutoBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: AutoBacktestResponse;
};

export type GenAiTriggerAutoBacktestResponse =
	GenAiTriggerAutoBacktestResponses[keyof GenAiTriggerAutoBacktestResponses];

export type GenAiGenerateNarrativeReportData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: {
		/**
		 * Include Phase1 Insights
		 * Phase 1 인사이트 포함 여부 (ML Signal, Regime, Forecast)
		 */
		include_phase1_insights?: boolean;
		/**
		 * Language
		 * 리포트 언어 (ko/en)
		 */
		language?: string | null;
		/**
		 * Detail Level
		 * 상세도 수준 (brief/standard/detailed)
		 */
		detail_level?: string | null;
	};
	url: "/api/v1/gen-ai/narrative/backtests/{backtest_id}/report";
};

export type GenAiGenerateNarrativeReportErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiGenerateNarrativeReportError =
	GenAiGenerateNarrativeReportErrors[keyof GenAiGenerateNarrativeReportErrors];

export type GenAiGenerateNarrativeReportResponses = {
	/**
	 * Successful Response
	 */
	200: NarrativeReportResponse;
};

export type GenAiGenerateNarrativeReportResponse =
	GenAiGenerateNarrativeReportResponses[keyof GenAiGenerateNarrativeReportResponses];

export type GenAiListPromptTemplatesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Status
		 */
		status?: string | null;
		/**
		 * Tag
		 */
		tag?: string | null;
	};
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates";
};

export type GenAiListPromptTemplatesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiListPromptTemplatesError =
	GenAiListPromptTemplatesErrors[keyof GenAiListPromptTemplatesErrors];

export type GenAiListPromptTemplatesResponses = {
	/**
	 * Response Gen Ai-List Prompt Templates
	 * Successful Response
	 */
	200: Array<PromptTemplateResponse>;
};

export type GenAiListPromptTemplatesResponse =
	GenAiListPromptTemplatesResponses[keyof GenAiListPromptTemplatesResponses];

export type GenAiCreatePromptTemplateData = {
	body: PromptTemplateCreate;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates";
};

export type GenAiCreatePromptTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiCreatePromptTemplateError =
	GenAiCreatePromptTemplateErrors[keyof GenAiCreatePromptTemplateErrors];

export type GenAiCreatePromptTemplateResponses = {
	/**
	 * Successful Response
	 */
	201: PromptTemplateResponse;
};

export type GenAiCreatePromptTemplateResponse =
	GenAiCreatePromptTemplateResponses[keyof GenAiCreatePromptTemplateResponses];

export type GenAiUpdatePromptTemplateData = {
	body: PromptTemplateUpdate;
	path: {
		/**
		 * Prompt Id
		 */
		prompt_id: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates/{prompt_id}/{version}";
};

export type GenAiUpdatePromptTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiUpdatePromptTemplateError =
	GenAiUpdatePromptTemplateErrors[keyof GenAiUpdatePromptTemplateErrors];

export type GenAiUpdatePromptTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: PromptTemplateResponse;
};

export type GenAiUpdatePromptTemplateResponse =
	GenAiUpdatePromptTemplateResponses[keyof GenAiUpdatePromptTemplateResponses];

export type GenAiSubmitPromptForReviewData = {
	body: PromptWorkflowAction;
	path: {
		/**
		 * Prompt Id
		 */
		prompt_id: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates/{prompt_id}/{version}/submit";
};

export type GenAiSubmitPromptForReviewErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiSubmitPromptForReviewError =
	GenAiSubmitPromptForReviewErrors[keyof GenAiSubmitPromptForReviewErrors];

export type GenAiSubmitPromptForReviewResponses = {
	/**
	 * Successful Response
	 */
	200: PromptTemplateResponse;
};

export type GenAiSubmitPromptForReviewResponse =
	GenAiSubmitPromptForReviewResponses[keyof GenAiSubmitPromptForReviewResponses];

export type GenAiApprovePromptData = {
	body: PromptWorkflowAction;
	path: {
		/**
		 * Prompt Id
		 */
		prompt_id: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates/{prompt_id}/{version}/approve";
};

export type GenAiApprovePromptErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiApprovePromptError =
	GenAiApprovePromptErrors[keyof GenAiApprovePromptErrors];

export type GenAiApprovePromptResponses = {
	/**
	 * Successful Response
	 */
	200: PromptTemplateResponse;
};

export type GenAiApprovePromptResponse =
	GenAiApprovePromptResponses[keyof GenAiApprovePromptResponses];

export type GenAiRejectPromptData = {
	body: PromptWorkflowAction;
	path: {
		/**
		 * Prompt Id
		 */
		prompt_id: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates/{prompt_id}/{version}/reject";
};

export type GenAiRejectPromptErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiRejectPromptError =
	GenAiRejectPromptErrors[keyof GenAiRejectPromptErrors];

export type GenAiRejectPromptResponses = {
	/**
	 * Successful Response
	 */
	200: PromptTemplateResponse;
};

export type GenAiRejectPromptResponse =
	GenAiRejectPromptResponses[keyof GenAiRejectPromptResponses];

export type GenAiEvaluatePromptData = {
	body: PromptEvaluationRequest;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/evaluate";
};

export type GenAiEvaluatePromptErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiEvaluatePromptError =
	GenAiEvaluatePromptErrors[keyof GenAiEvaluatePromptErrors];

export type GenAiEvaluatePromptResponses = {
	/**
	 * Successful Response
	 */
	200: PromptEvaluationResponse;
};

export type GenAiEvaluatePromptResponse =
	GenAiEvaluatePromptResponses[keyof GenAiEvaluatePromptResponses];

export type GenAiLogPromptUsageData = {
	body: PromptUsageLogCreate;
	path: {
		/**
		 * Prompt Id
		 */
		prompt_id: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates/{prompt_id}/{version}/usage";
};

export type GenAiLogPromptUsageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiLogPromptUsageError =
	GenAiLogPromptUsageErrors[keyof GenAiLogPromptUsageErrors];

export type GenAiLogPromptUsageResponses = {
	/**
	 * Successful Response
	 */
	201: PromptUsageLogResponse;
};

export type GenAiLogPromptUsageResponse =
	GenAiLogPromptUsageResponses[keyof GenAiLogPromptUsageResponses];

export type GenAiListPromptAuditLogsData = {
	body?: never;
	path: {
		/**
		 * Prompt Id
		 */
		prompt_id: string;
		/**
		 * Version
		 */
		version: string;
	};
	query?: never;
	url: "/api/v1/gen-ai/prompt-governance/prompts/templates/{prompt_id}/{version}/audit";
};

export type GenAiListPromptAuditLogsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiListPromptAuditLogsError =
	GenAiListPromptAuditLogsErrors[keyof GenAiListPromptAuditLogsErrors];

export type GenAiListPromptAuditLogsResponses = {
	/**
	 * Response Gen Ai-List Prompt Audit Logs
	 * Successful Response
	 */
	200: Array<PromptAuditLogResponse>;
};

export type GenAiListPromptAuditLogsResponse =
	GenAiListPromptAuditLogsResponses[keyof GenAiListPromptAuditLogsResponses];

export type GenAiGenerateStrategyData = {
	body: StrategyBuilderRequest;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/strategy-builder";
};

export type GenAiGenerateStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiGenerateStrategyError =
	GenAiGenerateStrategyErrors[keyof GenAiGenerateStrategyErrors];

export type GenAiGenerateStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyBuilderResponse;
};

export type GenAiGenerateStrategyResponse =
	GenAiGenerateStrategyResponses[keyof GenAiGenerateStrategyResponses];

export type GenAiApproveStrategyData = {
	body: StrategyApprovalRequest;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/strategy-builder/approve";
};

export type GenAiApproveStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiApproveStrategyError =
	GenAiApproveStrategyErrors[keyof GenAiApproveStrategyErrors];

export type GenAiApproveStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyApprovalResponse;
};

export type GenAiApproveStrategyResponse =
	GenAiApproveStrategyResponses[keyof GenAiApproveStrategyResponses];

export type GenAiSearchIndicatorsData = {
	body: IndicatorSearchRequest;
	path?: never;
	query?: never;
	url: "/api/v1/gen-ai/strategy-builder/search-indicators";
};

export type GenAiSearchIndicatorsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GenAiSearchIndicatorsError =
	GenAiSearchIndicatorsErrors[keyof GenAiSearchIndicatorsErrors];

export type GenAiSearchIndicatorsResponses = {
	/**
	 * Successful Response
	 */
	200: IndicatorSearchResponse;
};

export type GenAiSearchIndicatorsResponse =
	GenAiSearchIndicatorsResponses[keyof GenAiSearchIndicatorsResponses];

export type SystemServiceHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/system/health/";
};

export type SystemServiceHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: HealthCheckResponse;
};

export type SystemServiceHealthCheckResponse =
	SystemServiceHealthCheckResponses[keyof SystemServiceHealthCheckResponses];

export type SystemRunStockDeltaUpdateData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/system/tasks/stock-update/delta";
};

export type SystemRunStockDeltaUpdateResponses = {
	/**
	 * Successful Response
	 */
	200: TaskResult;
};

export type SystemRunStockDeltaUpdateResponse =
	SystemRunStockDeltaUpdateResponses[keyof SystemRunStockDeltaUpdateResponses];

export type SystemRunStockForceUpdateData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/system/tasks/stock-update/force-all";
};

export type SystemRunStockForceUpdateResponses = {
	/**
	 * Successful Response
	 */
	200: TaskResult;
};

export type SystemRunStockForceUpdateResponse =
	SystemRunStockForceUpdateResponses[keyof SystemRunStockForceUpdateResponses];

export type SystemGetStockUpdateStatusData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/system/tasks/stock-update/status";
};

export type SystemGetStockUpdateStatusResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};
