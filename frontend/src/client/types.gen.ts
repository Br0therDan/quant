// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
	baseUrl: `${string}://${string}` | (string & {});
};

/**
 * BacktestConfig
 * 백테스트 설정 내장 모델
 */
export type BacktestConfig = {
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date: Date;
	/**
	 * End Date
	 * 종료일
	 */
	end_date: Date;
	/**
	 * Symbols
	 * 대상 심볼 목록
	 */
	symbols: Array<string>;
	/**
	 * Initial Cash
	 * 초기 자본금
	 */
	initial_cash?: number;
	/**
	 * Max Position Size
	 * 최대 포지션 크기 (비율)
	 */
	max_position_size?: number;
	/**
	 * Commission Rate
	 * 수수료율
	 */
	commission_rate?: number;
	/**
	 * Slippage Rate
	 * 슬리피지율
	 */
	slippage_rate?: number;
	/**
	 * Rebalance Frequency
	 * 리밸런싱 주기 (daily, weekly, monthly)
	 */
	rebalance_frequency?: string | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * BacktestCreateRequest
 * 백테스트 생성 요청
 */
export type BacktestCreateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * 백테스트 설정
	 */
	config: BacktestConfig;
};

/**
 * BacktestExecutionListResponse
 * 백테스트 실행 목록 응답
 */
export type BacktestExecutionListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Executions
	 * 실행 목록
	 */
	executions: Array<BacktestExecutionResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * BacktestExecutionRequest
 * 백테스트 실행 요청
 */
export type BacktestExecutionRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Signals
	 * 트레이딩 시그널 목록
	 */
	signals: Array<{
		[key: string]: unknown;
	}>;
};

/**
 * BacktestExecutionResponse
 * 백테스트 실행 응답
 */
export type BacktestExecutionResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 실행 ID
	 */
	id: string;
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id: string;
	/**
	 * Execution Id
	 * 실행 ID
	 */
	execution_id: string;
	/**
	 * Start Time
	 * 실행 시작 시간
	 */
	start_time: Date;
	/**
	 * End Time
	 * 실행 종료 시간
	 */
	end_time?: Date | null;
	/**
	 * 실행 상태
	 */
	status: BacktestStatus;
	/**
	 * Portfolio Values
	 * 포트폴리오 가치 히스토리
	 */
	portfolio_values: Array<number>;
	/**
	 * Trades
	 * 거래 내역
	 */
	trades: Array<Trade>;
	/**
	 * Positions
	 * 최종 포지션
	 */
	positions: {
		[key: string]: Position;
	};
	/**
	 * Error Message
	 * 오류 메시지
	 */
	error_message?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
};

/**
 * BacktestListResponse
 * 백테스트 목록 응답
 */
export type BacktestListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Backtests
	 * 백테스트 목록
	 */
	backtests: Array<BacktestResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * BacktestResponse
 * 백테스트 응답
 */
export type BacktestResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 백테스트 ID
	 */
	id: string;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description: string;
	/**
	 * 백테스트 설정
	 */
	config: BacktestConfig;
	/**
	 * 실행 상태
	 */
	status: BacktestStatus;
	/**
	 * Start Time
	 * 실행 시작 시간
	 */
	start_time?: Date | null;
	/**
	 * End Time
	 * 실행 종료 시간
	 */
	end_time?: Date | null;
	/**
	 * Duration Seconds
	 * 실행 시간(초)
	 */
	duration_seconds?: number | null;
	/**
	 * 성과 지표
	 */
	performance?: PerformanceMetrics | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at?: Date | null;
};

/**
 * BacktestStatus
 * 백테스트 상태
 */
export type BacktestStatus =
	| "pending"
	| "running"
	| "completed"
	| "failed"
	| "cancelled";

/**
 * BacktestUpdateRequest
 * 백테스트 수정 요청
 */
export type BacktestUpdateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string | null;
	/**
	 * 백테스트 설정
	 */
	config?: BacktestConfig | null;
};

/**
 * BalanceSheetData
 * 재무상태표 응답 모델
 */
export type BalanceSheetData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Currency
	 * 보고 통화
	 */
	reported_currency?: string;
	/**
	 * Total Assets
	 * 총자산
	 */
	total_assets?: string | null;
	/**
	 * Total Current Assets
	 * 총 유동자산
	 */
	total_current_assets?: string | null;
	/**
	 * Cash And Cash Equivalents
	 * 현금 및 현금성자산
	 */
	cash_and_cash_equivalents?: string | null;
	/**
	 * Inventory
	 * 재고자산
	 */
	inventory?: string | null;
	/**
	 * Current Net Receivables
	 * 유동 순매출채권
	 */
	current_net_receivables?: string | null;
	/**
	 * Property Plant Equipment
	 * 유형자산
	 */
	property_plant_equipment?: string | null;
	/**
	 * Goodwill
	 * 영업권
	 */
	goodwill?: string | null;
	/**
	 * Intangible Assets
	 * 무형자산
	 */
	intangible_assets?: string | null;
	/**
	 * Total Liabilities
	 * 총부채
	 */
	total_liabilities?: string | null;
	/**
	 * Total Current Liabilities
	 * 총 유동부채
	 */
	total_current_liabilities?: string | null;
	/**
	 * Current Accounts Payable
	 * 유동 매입채무
	 */
	current_accounts_payable?: string | null;
	/**
	 * Current Debt
	 * 유동부채
	 */
	current_debt?: string | null;
	/**
	 * Long Term Debt
	 * 장기부채
	 */
	long_term_debt?: string | null;
	/**
	 * Total Shareholder Equity
	 * 총 자기자본
	 */
	total_shareholder_equity?: string | null;
	/**
	 * Retained Earnings
	 * 이익잉여금
	 */
	retained_earnings?: string | null;
	/**
	 * Common Stock
	 * 보통주
	 */
	common_stock?: string | null;
	/**
	 * Treasury Stock
	 * 자기주식
	 */
	treasury_stock?: string | null;
	/**
	 * Common Stock Shares Outstanding
	 * 보통주 발행주식수
	 */
	common_stock_shares_outstanding?: number | null;
};

/**
 * BalanceSheetResponse
 * 재무상태표 조회 응답 스키마
 */
export type BalanceSheetResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<BalanceSheetData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * Body_Auth-forgot_password
 */
export type BodyAuthForgotPassword = {
	/**
	 * Email
	 */
	email: string;
};

/**
 * Body_Auth-login
 */
export type BodyAuthLogin = {
	/**
	 * Grant Type
	 */
	grant_type?: string | null;
	/**
	 * Username
	 */
	username: string;
	/**
	 * Password
	 */
	password: string;
	/**
	 * Scope
	 */
	scope?: string;
	/**
	 * Client Id
	 */
	client_id?: string | null;
	/**
	 * Client Secret
	 */
	client_secret?: string | null;
};

/**
 * Body_Auth-request_verify_token
 */
export type BodyAuthRequestVerifyToken = {
	/**
	 * Email
	 */
	email: string;
};

/**
 * Body_Auth-reset_password
 */
export type BodyAuthResetPassword = {
	/**
	 * Token
	 */
	token: string;
	/**
	 * Password
	 */
	password: string;
};

/**
 * Body_Auth-verify
 */
export type BodyAuthVerify = {
	/**
	 * Token
	 */
	token: string;
};

/**
 * CacheInfo
 * 캐시 정보
 */
export type CacheInfo = {
	/**
	 * Cached
	 * 캐시된 데이터 여부
	 */
	cached: boolean;
	/**
	 * Cache Hit
	 * 캐시 히트 여부
	 */
	cache_hit: boolean;
	/**
	 * Cache Timestamp
	 * 캐시 생성 시간
	 */
	cache_timestamp?: Date | null;
	/**
	 * Cache Ttl
	 * 캐시 TTL (초)
	 */
	cache_ttl?: number | null;
};

/**
 * CashFlowData
 * 현금흐름표 응답 모델
 */
export type CashFlowData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Currency
	 * 보고 통화
	 */
	reported_currency?: string;
	/**
	 * Operating Cashflow
	 * 영업활동 현금흐름
	 */
	operating_cashflow?: string | null;
	/**
	 * Payments For Operating Activities
	 * 영업활동 현금지출
	 */
	payments_for_operating_activities?: string | null;
	/**
	 * Proceeds From Operating Activities
	 * 영업활동 현금수입
	 */
	proceeds_from_operating_activities?: string | null;
	/**
	 * Capital Expenditures
	 * 자본적지출
	 */
	capital_expenditures?: string | null;
	/**
	 * Cashflow From Investment
	 * 투자활동 현금흐름
	 */
	cashflow_from_investment?: string | null;
	/**
	 * Cashflow From Financing
	 * 재무활동 현금흐름
	 */
	cashflow_from_financing?: string | null;
	/**
	 * Dividend Payments
	 * 배당금 지급
	 */
	dividend_payments?: string | null;
	/**
	 * Payments For Repurchase Of Common Stock
	 * 자기주식 취득지출
	 */
	payments_for_repurchase_of_common_stock?: string | null;
	/**
	 * Change In Cash And Cash Equivalents
	 * 현금 및 현금성자산 변동
	 */
	change_in_cash_and_cash_equivalents?: string | null;
};

/**
 * CashFlowResponse
 * 현금흐름표 조회 응답 스키마
 */
export type CashFlowResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<CashFlowData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * CompanyOverviewData
 * 기업 개요 응답 모델
 */
export type CompanyOverviewData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Name
	 * 회사명
	 */
	name: string;
	/**
	 * Exchange
	 * 거래소
	 */
	exchange: string;
	/**
	 * Sector
	 * 섹터
	 */
	sector?: string | null;
	/**
	 * Industry
	 * 산업
	 */
	industry?: string | null;
	/**
	 * Description
	 * 회사 설명
	 */
	description?: string | null;
	/**
	 * Currency
	 * 통화
	 */
	currency?: string;
	/**
	 * Country
	 * 국가
	 */
	country?: string | null;
	/**
	 * Fiscal Year End
	 * 회계연도 종료월
	 */
	fiscal_year_end?: string | null;
	/**
	 * Latest Quarter
	 * 최근 분기
	 */
	latest_quarter?: Date | null;
	/**
	 * Market Capitalization
	 * 시가총액
	 */
	market_capitalization?: string | null;
	/**
	 * Ebitda
	 * EBITDA
	 */
	ebitda?: string | null;
	/**
	 * Pe Ratio
	 * PER
	 */
	pe_ratio?: string | null;
	/**
	 * Peg Ratio
	 * PEG 비율
	 */
	peg_ratio?: string | null;
	/**
	 * Book Value
	 * 장부가치
	 */
	book_value?: string | null;
	/**
	 * Dividend Per Share
	 * 주당 배당금
	 */
	dividend_per_share?: string | null;
	/**
	 * Dividend Yield
	 * 배당 수익률 (%)
	 */
	dividend_yield?: string | null;
	/**
	 * Eps
	 * 주당 순이익
	 */
	eps?: string | null;
	/**
	 * Revenue Per Share Ttm
	 * 주당 매출(TTM)
	 */
	revenue_per_share_ttm?: string | null;
	/**
	 * Profit Margin
	 * 순이익률 (%)
	 */
	profit_margin?: string | null;
	/**
	 * Operating Margin Ttm
	 * 영업이익률(TTM) (%)
	 */
	operating_margin_ttm?: string | null;
	/**
	 * Return On Assets Ttm
	 * 총자산수익률(TTM) (%)
	 */
	return_on_assets_ttm?: string | null;
	/**
	 * Return On Equity Ttm
	 * 자기자본수익률(TTM) (%)
	 */
	return_on_equity_ttm?: string | null;
	/**
	 * Revenue Ttm
	 * 매출(TTM)
	 */
	revenue_ttm?: string | null;
	/**
	 * Gross Profit Ttm
	 * 매출총이익(TTM)
	 */
	gross_profit_ttm?: string | null;
	/**
	 * Fifty Two Week High
	 * 52주 최고가
	 */
	fifty_two_week_high?: string | null;
	/**
	 * Fifty Two Week Low
	 * 52주 최저가
	 */
	fifty_two_week_low?: string | null;
	/**
	 * Fifty Day Moving Average
	 * 50일 이동평균
	 */
	fifty_day_moving_average?: string | null;
	/**
	 * Two Hundred Day Moving Average
	 * 200일 이동평균
	 */
	two_hundred_day_moving_average?: string | null;
	/**
	 * Shares Outstanding
	 * 발행주식수
	 */
	shares_outstanding?: number | null;
	/**
	 * Beta
	 * 베타
	 */
	beta?: string | null;
	/**
	 * Analyst Target Price
	 * 목표 주가
	 */
	analyst_target_price?: string | null;
};

/**
 * CompanyOverviewResponse
 * 기업 개요 조회 응답 스키마
 */
export type CompanyOverviewResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * 데이터
	 */
	data: CompanyOverviewData;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
};

/**
 * DataQualityInfo
 * 데이터 품질 정보
 */
export type DataQualityInfo = {
	/**
	 * Quality Score
	 * 품질 점수 (0-100)
	 */
	quality_score: string;
	/**
	 * Last Updated
	 * 마지막 업데이트 시간
	 */
	last_updated: Date;
	/**
	 * Data Source
	 * 데이터 출처
	 */
	data_source: string;
	/**
	 * Confidence Level
	 * 신뢰도 수준
	 */
	confidence_level?: string | null;
};

/**
 * EarningsData
 * 실적 발표 응답 모델
 */
export type EarningsData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Date
	 * 발표일
	 */
	reported_date: Date;
	/**
	 * Reported Eps
	 * 발표 EPS
	 */
	reported_eps?: string | null;
	/**
	 * Estimated Eps
	 * 예상 EPS
	 */
	estimated_eps?: string | null;
	/**
	 * Surprise
	 * 서프라이즈
	 */
	surprise?: string | null;
	/**
	 * Surprise Percentage
	 * 서프라이즈 비율 (%)
	 */
	surprise_percentage?: string | null;
};

/**
 * EarningsResponse
 * 실적 데이터 조회 응답 스키마
 */
export type EarningsResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<EarningsData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * ExecutionListResponse
 * Execution list response
 */
export type ExecutionListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Executions
	 * 실행 목록
	 */
	executions: Array<ExecutionResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * ExecutionResponse
 * Execution response
 */
export type ExecutionResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 실행 ID
	 */
	id: string;
	/**
	 * Strategy Id
	 * 전략 ID
	 */
	strategy_id: string;
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	signal_type: SignalType;
	/**
	 * Signal Strength
	 * 신호 강도
	 */
	signal_strength: number;
	/**
	 * Price
	 * 가격
	 */
	price: number;
	/**
	 * Timestamp
	 * 실행 시간
	 */
	timestamp: Date;
	/**
	 * Metadata
	 * 메타데이터
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
	/**
	 * Detail
	 */
	detail?: Array<ValidationError>;
};

/**
 * HealthResponse
 * Health check response model.
 */
export type HealthResponse = {
	/**
	 * Status
	 */
	status: string;
	/**
	 * Timestamp
	 */
	timestamp: Date;
	/**
	 * Service
	 */
	service: string;
	/**
	 * Version
	 */
	version: string;
	/**
	 * Uptime
	 */
	uptime: number;
	/**
	 * Checks
	 */
	checks: {
		[key: string]: {
			[key: string]: unknown;
		};
	};
};

/**
 * HistoricalDataResponse
 */
export type HistoricalDataResponse = {
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Data
	 */
	data: Array<{
		[key: string]: unknown;
	}>;
	/**
	 * Count
	 */
	count: number;
	/**
	 * Start Date
	 */
	start_date?: Date | null;
	/**
	 * End Date
	 */
	end_date?: Date | null;
	/**
	 * Frequency
	 */
	frequency: string;
};

/**
 * IncomeStatementData
 * 손익계산서 응답 모델
 */
export type IncomeStatementData = {
	/**
	 * Symbol
	 * 주식 심볼
	 */
	symbol: string;
	/**
	 * Fiscal Date Ending
	 * 회계연도 종료일
	 */
	fiscal_date_ending: Date;
	/**
	 * Reported Currency
	 * 보고 통화
	 */
	reported_currency?: string;
	/**
	 * Total Revenue
	 * 총 매출
	 */
	total_revenue?: string | null;
	/**
	 * Cost Of Revenue
	 * 매출원가
	 */
	cost_of_revenue?: string | null;
	/**
	 * Gross Profit
	 * 매출총이익
	 */
	gross_profit?: string | null;
	/**
	 * Research And Development
	 * 연구개발비
	 */
	research_and_development?: string | null;
	/**
	 * Selling General Administrative
	 * 판매관리비
	 */
	selling_general_administrative?: string | null;
	/**
	 * Operating Expenses
	 * 영업비용
	 */
	operating_expenses?: string | null;
	/**
	 * Operating Income
	 * 영업이익
	 */
	operating_income?: string | null;
	/**
	 * Interest Income
	 * 이자수익
	 */
	interest_income?: string | null;
	/**
	 * Interest Expense
	 * 이자비용
	 */
	interest_expense?: string | null;
	/**
	 * Income Before Tax
	 * 세전이익
	 */
	income_before_tax?: string | null;
	/**
	 * Income Tax Expense
	 * 법인세비용
	 */
	income_tax_expense?: string | null;
	/**
	 * Net Income
	 * 순이익
	 */
	net_income?: string | null;
	/**
	 * Basic Shares Outstanding
	 * 기본 주식수
	 */
	basic_shares_outstanding?: number | null;
	/**
	 * Diluted Shares Outstanding
	 * 희석 주식수
	 */
	diluted_shares_outstanding?: number | null;
	/**
	 * Basic Eps
	 * 기본 주당순이익
	 */
	basic_eps?: string | null;
	/**
	 * Diluted Eps
	 * 희석 주당순이익
	 */
	diluted_eps?: string | null;
};

/**
 * IncomeStatementResponse
 * 손익계산서 조회 응답 스키마
 */
export type IncomeStatementResponse = {
	/**
	 * Success
	 * 요청 성공 여부
	 */
	success?: boolean;
	/**
	 * Message
	 * 응답 메시지
	 */
	message?: string | null;
	/**
	 * Timestamp
	 * 응답 시간
	 */
	timestamp?: Date;
	/**
	 * Data
	 * 데이터 목록
	 */
	data: Array<IncomeStatementData>;
	/**
	 * 메타데이터
	 */
	metadata: MetadataInfo;
	/**
	 * Count
	 * 데이터 개수
	 */
	count: number;
};

/**
 * IntegratedBacktestRequest
 * 통합 백테스트 요청
 */
export type IntegratedBacktestRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 백테스트 이름
	 */
	name: string;
	/**
	 * Description
	 * 백테스트 설명
	 */
	description?: string;
	/**
	 * Symbols
	 * 심볼 목록
	 */
	symbols: Array<string>;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date: Date;
	/**
	 * End Date
	 * 종료일
	 */
	end_date: Date;
	/**
	 * Strategy Type
	 * 전략 타입
	 */
	strategy_type: string;
	/**
	 * Strategy Params
	 * 전략 매개변수
	 */
	strategy_params?: {
		[key: string]: unknown;
	};
	/**
	 * Initial Capital
	 * 초기 자본
	 */
	initial_capital?: number;
};

/**
 * IntegratedBacktestResponse
 * 통합 백테스트 응답
 */
export type IntegratedBacktestResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Backtest Id
	 * 백테스트 ID
	 */
	backtest_id: string;
	/**
	 * Execution Id
	 * 실행 ID
	 */
	execution_id?: string | null;
	/**
	 * Result Id
	 * 결과 ID
	 */
	result_id?: string | null;
	/**
	 * 상태
	 */
	status: BacktestStatus;
	/**
	 * Message
	 * 메시지
	 */
	message: string;
	/**
	 * 성과 지표
	 */
	performance?: PerformanceMetrics | null;
	/**
	 * Start Time
	 * 시작 시간
	 */
	start_time?: Date | null;
	/**
	 * End Time
	 * 종료 시간
	 */
	end_time?: Date | null;
};

/**
 * LoginResponse
 */
export type LoginResponse = {
	/**
	 * Access Token
	 */
	access_token?: string | null;
	/**
	 * Refresh Token
	 */
	refresh_token?: string | null;
	/**
	 * Token Type
	 */
	token_type?: string | null;
	user_info: UserResponse;
};

/**
 * MetadataInfo
 * 메타데이터 정보
 */
export type MetadataInfo = {
	data_quality: DataQualityInfo;
	cache_info: CacheInfo;
	/**
	 * Processing Time Ms
	 * 처리 시간 (밀리초)
	 */
	processing_time_ms?: number | null;
};

/**
 * OAuth2AuthorizeResponse
 */
export type OAuth2AuthorizeResponse = {
	/**
	 * Authorization Url
	 */
	authorization_url: string;
};

/**
 * OAuthAccount
 * Base OAuth account model.
 */
export type OAuthAccount = {
	/**
	 * Oauth Name
	 */
	oauth_name: string;
	/**
	 * Access Token
	 */
	access_token: string;
	/**
	 * Expires At
	 */
	expires_at?: number | null;
	/**
	 * Refresh Token
	 */
	refresh_token?: string | null;
	/**
	 * Account Id
	 */
	account_id: string;
	/**
	 * Account Email
	 */
	account_email: string;
};

/**
 * OrderType
 * 주문 타입
 */
export type OrderType = "MARKET" | "LIMIT" | "STOP" | "STOP_LIMIT";

/**
 * PerformanceMetrics
 * 성과 지표 내장 모델
 */
export type PerformanceMetrics = {
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return: number;
	/**
	 * Annualized Return
	 * 연환산 수익률
	 */
	annualized_return: number;
	/**
	 * Volatility
	 * 변동성
	 */
	volatility: number;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio: number;
	/**
	 * Max Drawdown
	 * 최대 낙폭
	 */
	max_drawdown: number;
	/**
	 * Total Trades
	 * 총 거래 수
	 */
	total_trades: number;
	/**
	 * Winning Trades
	 * 승리 거래 수
	 */
	winning_trades: number;
	/**
	 * Losing Trades
	 * 패배 거래 수
	 */
	losing_trades: number;
	/**
	 * Win Rate
	 * 승률
	 */
	win_rate: number;
};

/**
 * PerformanceResponse
 * Performance response
 */
export type PerformanceResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 성과 ID
	 */
	id: string;
	/**
	 * Strategy Id
	 * 전략 ID
	 */
	strategy_id: string;
	/**
	 * Strategy Name
	 * 전략 이름
	 */
	strategy_name: string;
	/**
	 * Total Signals
	 * 총 신호 수
	 */
	total_signals: number;
	/**
	 * Buy Signals
	 * 매수 신호 수
	 */
	buy_signals: number;
	/**
	 * Sell Signals
	 * 매도 신호 수
	 */
	sell_signals: number;
	/**
	 * Hold Signals
	 * 보유 신호 수
	 */
	hold_signals: number;
	/**
	 * Total Return
	 * 총 수익률
	 */
	total_return?: number | null;
	/**
	 * Win Rate
	 * 승률
	 */
	win_rate?: number | null;
	/**
	 * Avg Return Per Trade
	 * 거래당 평균 수익률
	 */
	avg_return_per_trade?: number | null;
	/**
	 * Max Drawdown
	 * 최대 낙폭
	 */
	max_drawdown?: number | null;
	/**
	 * Sharpe Ratio
	 * 샤프 비율
	 */
	sharpe_ratio?: number | null;
	/**
	 * Calmar Ratio
	 * 칼마 비율
	 */
	calmar_ratio?: number | null;
	/**
	 * Volatility
	 * 변동성
	 */
	volatility?: number | null;
	/**
	 * Start Date
	 * 시작일
	 */
	start_date?: Date | null;
	/**
	 * End Date
	 * 종료일
	 */
	end_date?: Date | null;
	/**
	 * Accuracy
	 * 정확도
	 */
	accuracy?: number | null;
	/**
	 * Avg Signal Strength
	 * 평균 신호 강도
	 */
	avg_signal_strength?: number | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: Date;
};

/**
 * Position
 * 포지션 정보 내장 모델
 */
export type Position = {
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	/**
	 * Quantity
	 * 보유 수량
	 */
	quantity: number;
	/**
	 * Avg Price
	 * 평균 단가
	 */
	avg_price: number;
	/**
	 * Current Price
	 * 현재 가격
	 */
	current_price: number;
	/**
	 * Unrealized Pnl
	 * 미실현 손익
	 */
	unrealized_pnl: number;
	/**
	 * Realized Pnl
	 * 실현 손익
	 */
	realized_pnl?: number;
	/**
	 * First Buy Date
	 * 최초 매수일
	 */
	first_buy_date: Date;
	/**
	 * Last Update
	 * 마지막 업데이트
	 */
	last_update?: Date;
};

export type PydanticObjectId = string;

/**
 * SignalType
 * 신호 타입
 */
export type SignalType = "BUY" | "SELL" | "HOLD";

/**
 * StrategyCreateRequest
 * Strategy creation request
 */
export type StrategyCreateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Parameters
	 * 전략 파라미터
	 */
	parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * StrategyExecuteRequest
 * Strategy execution request
 */
export type StrategyExecuteRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbol
	 * 대상 심볼
	 */
	symbol: string;
	/**
	 * Market Data
	 * 시장 데이터
	 */
	market_data: {
		[key: string]: unknown;
	};
};

/**
 * StrategyFromTemplateRequest
 * Create strategy from template request
 */
export type StrategyFromTemplateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * Parameter Overrides
	 * 파라미터 오버라이드
	 */
	parameter_overrides?: {
		[key: string]: unknown | null;
	} | null;
};

/**
 * StrategyListResponse
 * Strategy list response
 */
export type StrategyListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Strategies
	 * 전략 목록
	 */
	strategies: Array<StrategyResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * StrategyResponse
 * Strategy response
 */
export type StrategyResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 전략 ID
	 */
	id: string;
	/**
	 * Name
	 * 전략 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Parameters
	 * 전략 파라미터
	 */
	parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Is Active
	 * 활성화 상태
	 */
	is_active: boolean;
	/**
	 * Is Template
	 * 템플릿 여부
	 */
	is_template: boolean;
	/**
	 * Created By
	 * 생성자
	 */
	created_by?: string | null;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: Date;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * StrategyType
 * 지원되는 전략 타입
 */
export type StrategyType =
	| "sma_crossover"
	| "rsi_mean_reversion"
	| "momentum"
	| "buy_and_hold";

/**
 * StrategyUpdateRequest
 * Strategy update request
 */
export type StrategyUpdateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 전략 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 전략 설명
	 */
	description?: string | null;
	/**
	 * Parameters
	 * 전략 파라미터
	 */
	parameters?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Is Active
	 * 활성화 상태
	 */
	is_active?: boolean | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string | null> | null;
};

/**
 * TemplateCreateRequest
 * Template creation request
 */
export type TemplateCreateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description: string;
	/**
	 * Default Parameters
	 * 기본 파라미터
	 */
	default_parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Parameter Schema
	 * 파라미터 스키마
	 */
	parameter_schema?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * TemplateListResponse
 * Template list response
 */
export type TemplateListResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Templates
	 * 템플릿 목록
	 */
	templates: Array<TemplateResponse>;
	/**
	 * Total
	 * 총 개수
	 */
	total: number;
};

/**
 * TemplateResponse
 * Template response
 */
export type TemplateResponse = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Id
	 * 템플릿 ID
	 */
	id: string;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name: string;
	/**
	 * 전략 타입
	 */
	strategy_type: StrategyType;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description: string;
	/**
	 * Default Parameters
	 * 기본 파라미터
	 */
	default_parameters?: {
		[key: string]: unknown;
	};
	/**
	 * Parameter Schema
	 * 파라미터 스키마
	 */
	parameter_schema?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Usage Count
	 * 사용 횟수
	 */
	usage_count: number;
	/**
	 * Created At
	 * 생성 시간
	 */
	created_at: Date;
	/**
	 * Updated At
	 * 수정 시간
	 */
	updated_at: Date;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string>;
};

/**
 * TemplateUpdateRequest
 * Template update request
 */
export type TemplateUpdateRequest = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 * 템플릿 이름
	 */
	name?: string | null;
	/**
	 * Description
	 * 템플릿 설명
	 */
	description?: string | null;
	/**
	 * Default Parameters
	 * 기본 파라미터
	 */
	default_parameters?: {
		[key: string]: unknown;
	} | null;
	/**
	 * Parameter Schema
	 * 파라미터 스키마
	 */
	parameter_schema?: {
		[key: string]: unknown | null;
	} | null;
	/**
	 * Tags
	 * 태그
	 */
	tags?: Array<string> | null;
};

/**
 * Trade
 * 거래 기록 내장 모델
 */
export type Trade = {
	/**
	 * Trade Id
	 * 거래 ID
	 */
	trade_id: string;
	/**
	 * Symbol
	 * 심볼
	 */
	symbol: string;
	trade_type: TradeType;
	order_type?: OrderType;
	/**
	 * Quantity
	 * 수량
	 */
	quantity: number;
	/**
	 * Price
	 * 체결 가격
	 */
	price: number;
	/**
	 * Timestamp
	 * 거래 시간
	 */
	timestamp: Date;
	/**
	 * Commission
	 * 수수료
	 */
	commission?: number;
	/**
	 * Slippage
	 * 슬리피지
	 */
	slippage?: number;
	/**
	 * Strategy Signal Id
	 * 전략 신호 ID
	 */
	strategy_signal_id?: string | null;
	/**
	 * Notes
	 * 메모
	 */
	notes?: string | null;
};

/**
 * TradeType
 * 거래 타입
 */
export type TradeType = "BUY" | "SELL";

/**
 * UserCreate
 */
export type UserCreate = {
	/**
	 * Email
	 */
	email: string;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Password
	 */
	password: string;
	/**
	 * Is Active
	 */
	is_active?: boolean | null;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean | null;
	/**
	 * Is Verified
	 */
	is_verified?: boolean | null;
	/**
	 * Avatar Url
	 */
	avatar_url?: string | null;
};

/**
 * UserResponse
 * Base User model.
 */
export type UserResponse = {
	/**
	 * Email
	 */
	email: string;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Is Active
	 */
	is_active?: boolean;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean;
	/**
	 * Is Verified
	 */
	is_verified?: boolean;
	/**
	 * Avatar Url
	 */
	avatar_url?: string | null;
	/**
	 * Oauth Accounts
	 */
	oauth_accounts?: Array<OAuthAccount>;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
	/**
	 * Password
	 */
	password?: string | null;
	/**
	 * Email
	 */
	email?: string | null;
	/**
	 * Full Name
	 */
	full_name?: string | null;
	/**
	 * Is Active
	 */
	is_active?: boolean | null;
	/**
	 * Is Superuser
	 */
	is_superuser?: boolean | null;
	/**
	 * Is Verified
	 */
	is_verified?: boolean | null;
	/**
	 * Avatar Url
	 */
	avatar_url?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
	/**
	 * Location
	 */
	loc: Array<string | number>;
	/**
	 * Message
	 */
	msg: string;
	/**
	 * Error Type
	 */
	type: string;
};

/**
 * WatchlistCreate
 * 워치리스트 생성 모델
 */
export type WatchlistCreate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Description
	 */
	description?: string;
};

/**
 * WatchlistUpdate
 * 워치리스트 업데이트 모델
 */
export type WatchlistUpdate = {
	/**
	 * User Id
	 */
	user_id?: string | null;
	/**
	 * Symbols
	 */
	symbols: Array<string>;
	/**
	 * Name
	 */
	name?: string | null;
	/**
	 * Description
	 */
	description?: string | null;
};

export type HealthHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/";
};

export type HealthHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: HealthResponse;
};

export type HealthHealthCheckResponse =
	HealthHealthCheckResponses[keyof HealthHealthCheckResponses];

export type HealthLivenessProbeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/live";
};

export type HealthLivenessProbeResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type HealthReadinessProbeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health/ready";
};

export type HealthReadinessProbeResponses = {
	/**
	 * Response Health-Readiness Probe
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type HealthReadinessProbeResponse =
	HealthReadinessProbeResponses[keyof HealthReadinessProbeResponses];

export type AuthLoginData = {
	body: BodyAuthLogin;
	path?: never;
	query?: never;
	url: "/api/v1/auth/login";
};

export type AuthLoginErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthLoginError = AuthLoginErrors[keyof AuthLoginErrors];

export type AuthLoginResponses = {
	/**
	 * Successful Response
	 */
	200: LoginResponse;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthLogoutData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/logout";
};

export type AuthLogoutErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthLogoutError = AuthLogoutErrors[keyof AuthLogoutErrors];

export type AuthLogoutResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type AuthLogoutResponse = AuthLogoutResponses[keyof AuthLogoutResponses];

export type AuthRefreshTokenData = {
	body?: never;
	headers?: {
		/**
		 * X-Refresh-Token
		 */
		"X-Refresh-Token"?: string | null;
	};
	path?: never;
	query?: never;
	url: "/api/v1/auth/refresh";
};

export type AuthRefreshTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRefreshTokenError =
	AuthRefreshTokenErrors[keyof AuthRefreshTokenErrors];

export type AuthRefreshTokenResponses = {
	/**
	 * Successful Response
	 */
	200: LoginResponse;
};

export type AuthRefreshTokenResponse =
	AuthRefreshTokenResponses[keyof AuthRefreshTokenResponses];

export type AuthVerifyTokenData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/token/verify";
};

export type AuthVerifyTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthVerifyTokenError =
	AuthVerifyTokenErrors[keyof AuthVerifyTokenErrors];

export type AuthVerifyTokenResponses = {
	/**
	 * Response Auth-Verify Token
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type AuthVerifyTokenResponse =
	AuthVerifyTokenResponses[keyof AuthVerifyTokenResponses];

export type AuthRegisterData = {
	body: UserCreate;
	path?: never;
	query?: never;
	url: "/api/v1/auth/register";
};

export type AuthRegisterErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRegisterError = AuthRegisterErrors[keyof AuthRegisterErrors];

export type AuthRegisterResponses = {
	/**
	 * Successful Response
	 */
	201: UserResponse;
};

export type AuthRegisterResponse =
	AuthRegisterResponses[keyof AuthRegisterResponses];

export type AuthForgotPasswordData = {
	body: BodyAuthForgotPassword;
	path?: never;
	query?: never;
	url: "/api/v1/auth/forgot-password";
};

export type AuthForgotPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthForgotPasswordError =
	AuthForgotPasswordErrors[keyof AuthForgotPasswordErrors];

export type AuthForgotPasswordResponses = {
	/**
	 * Successful Response
	 */
	202: unknown;
};

export type AuthResetPasswordData = {
	body: BodyAuthResetPassword;
	path?: never;
	query?: never;
	url: "/api/v1/auth/reset-password";
};

export type AuthResetPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthResetPasswordError =
	AuthResetPasswordErrors[keyof AuthResetPasswordErrors];

export type AuthResetPasswordResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type AuthRequestVerifyTokenData = {
	body: BodyAuthRequestVerifyToken;
	path?: never;
	query?: never;
	url: "/api/v1/auth/request-verify-token";
};

export type AuthRequestVerifyTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthRequestVerifyTokenError =
	AuthRequestVerifyTokenErrors[keyof AuthRequestVerifyTokenErrors];

export type AuthRequestVerifyTokenResponses = {
	/**
	 * Successful Response
	 */
	202: unknown;
};

export type AuthVerifyData = {
	body: BodyAuthVerify;
	path?: never;
	query?: never;
	url: "/api/v1/auth/verify";
};

export type AuthVerifyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AuthVerifyError = AuthVerifyErrors[keyof AuthVerifyErrors];

export type AuthVerifyResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type AuthVerifyResponse = AuthVerifyResponses[keyof AuthVerifyResponses];

export type UserGetUserMeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/users/me";
};

export type UserGetUserMeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserMeError = UserGetUserMeErrors[keyof UserGetUserMeErrors];

export type UserGetUserMeResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserGetUserMeResponse =
	UserGetUserMeResponses[keyof UserGetUserMeResponses];

export type UserUpdateUserMeData = {
	body: UserUpdate;
	path?: never;
	query?: never;
	url: "/api/v1/users/me";
};

export type UserUpdateUserMeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserUpdateUserMeError =
	UserUpdateUserMeErrors[keyof UserUpdateUserMeErrors];

export type UserUpdateUserMeResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserUpdateUserMeResponse =
	UserUpdateUserMeResponses[keyof UserUpdateUserMeResponses];

export type UserDeleteUserData = {
	body?: never;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserDeleteUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserDeleteUserError =
	UserDeleteUserErrors[keyof UserDeleteUserErrors];

export type UserDeleteUserResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type UserDeleteUserResponse =
	UserDeleteUserResponses[keyof UserDeleteUserResponses];

export type UserGetUserData = {
	body?: never;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserGetUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserError = UserGetUserErrors[keyof UserGetUserErrors];

export type UserGetUserResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserGetUserResponse =
	UserGetUserResponses[keyof UserGetUserResponses];

export type UserUpdateUserData = {
	body: UserUpdate;
	path: {
		id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{id}";
};

export type UserUpdateUserErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserUpdateUserError =
	UserUpdateUserErrors[keyof UserUpdateUserErrors];

export type UserUpdateUserResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type UserUpdateUserResponse =
	UserUpdateUserResponses[keyof UserUpdateUserResponses];

export type OAuth2AuthorizeData = {
	body?: never;
	path: {
		/**
		 * Provider
		 */
		provider: string;
	};
	query?: {
		/**
		 * Redirect Url
		 */
		redirect_url?: string | null;
		/**
		 * State
		 */
		state?: string | null;
	};
	url: "/api/v1/oauth2/{provider}/authorize";
};

export type OAuth2AuthorizeErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type OAuth2AuthorizeError =
	OAuth2AuthorizeErrors[keyof OAuth2AuthorizeErrors];

export type OAuth2AuthorizeResponses = {
	/**
	 * Successful Response
	 */
	200: OAuth2AuthorizeResponse;
};

export type OAuth2AuthorizeResponse2 =
	OAuth2AuthorizeResponses[keyof OAuth2AuthorizeResponses];

export type OAuth2CallbackData = {
	body?: never;
	path: {
		/**
		 * Provider
		 */
		provider: string;
	};
	query: {
		/**
		 * Code
		 */
		code: string;
	};
	url: "/api/v1/oauth2/{provider}/callback";
};

export type OAuth2CallbackErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type OAuth2CallbackError =
	OAuth2CallbackErrors[keyof OAuth2CallbackErrors];

export type OAuth2CallbackResponses = {
	/**
	 * Successful Response
	 */
	200: UserResponse;
};

export type OAuth2CallbackResponse =
	OAuth2CallbackResponses[keyof OAuth2CallbackResponses];

export type UserGetMyOauthAccountsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/users/me/oauth-accounts";
};

export type UserGetMyOauthAccountsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetMyOauthAccountsError =
	UserGetMyOauthAccountsErrors[keyof UserGetMyOauthAccountsErrors];

export type UserGetMyOauthAccountsResponses = {
	/**
	 * Response User-Get My Oauth Accounts
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type UserGetMyOauthAccountsResponse =
	UserGetMyOauthAccountsResponses[keyof UserGetMyOauthAccountsResponses];

export type UserRemoveOauthAccountData = {
	body?: never;
	path: {
		/**
		 * Oauth Name
		 */
		oauth_name: string;
		/**
		 * Account Id
		 */
		account_id: string;
	};
	query?: never;
	url: "/api/v1/users/me/oauth-accounts/{oauth_name}/{account_id}";
};

export type UserRemoveOauthAccountErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserRemoveOauthAccountError =
	UserRemoveOauthAccountErrors[keyof UserRemoveOauthAccountErrors];

export type UserRemoveOauthAccountResponses = {
	/**
	 * Successful Response
	 */
	204: void;
};

export type UserRemoveOauthAccountResponse =
	UserRemoveOauthAccountResponses[keyof UserRemoveOauthAccountResponses];

export type UserGetUserOauthAccountsData = {
	body?: never;
	path: {
		user_id: PydanticObjectId;
	};
	query?: never;
	url: "/api/v1/users/{user_id}/oauth-accounts";
};

export type UserGetUserOauthAccountsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UserGetUserOauthAccountsError =
	UserGetUserOauthAccountsErrors[keyof UserGetUserOauthAccountsErrors];

export type UserGetUserOauthAccountsResponses = {
	/**
	 * Response User-Get User Oauth Accounts
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type UserGetUserOauthAccountsResponse =
	UserGetUserOauthAccountsResponses[keyof UserGetUserOauthAccountsResponses];

export type MarketDataGetDailyPricesData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Outputsize
		 * 데이터 크기 (compact: 최근 100일, full: 전체)
		 */
		outputsize?: string;
	};
	url: "/api/v1/market-data/stock/daily/{symbol}";
};

export type MarketDataGetDailyPricesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetDailyPricesError =
	MarketDataGetDailyPricesErrors[keyof MarketDataGetDailyPricesErrors];

export type MarketDataGetDailyPricesResponses = {
	/**
	 * Response Market Data-Get Daily Prices
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetDailyPricesResponse =
	MarketDataGetDailyPricesResponses[keyof MarketDataGetDailyPricesResponses];

export type MarketDataGetQuoteData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/stock/quote/{symbol}";
};

export type MarketDataGetQuoteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetQuoteError =
	MarketDataGetQuoteErrors[keyof MarketDataGetQuoteErrors];

export type MarketDataGetQuoteResponses = {
	/**
	 * Response Market Data-Get Quote
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetQuoteResponse =
	MarketDataGetQuoteResponses[keyof MarketDataGetQuoteResponses];

export type MarketDataGetIntradayDataData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Interval
		 * 데이터 간격 (1min, 5min, 15min, 30min, 60min)
		 */
		interval?: string;
		/**
		 * Outputsize
		 * 데이터 크기 (compact/full)
		 */
		outputsize?: string;
	};
	url: "/api/v1/market-data/stock/intraday/{symbol}";
};

export type MarketDataGetIntradayDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetIntradayDataError =
	MarketDataGetIntradayDataErrors[keyof MarketDataGetIntradayDataErrors];

export type MarketDataGetIntradayDataResponses = {
	/**
	 * Response Market Data-Get Intraday Data
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetIntradayDataResponse =
	MarketDataGetIntradayDataResponses[keyof MarketDataGetIntradayDataResponses];

export type MarketDataGetHistoricalDataData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Start Date
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		end_date?: Date | null;
		/**
		 * Frequency
		 * 데이터 주기 (daily, weekly, monthly)
		 */
		frequency?: string;
	};
	url: "/api/v1/market-data/stock/historical/{symbol}";
};

export type MarketDataGetHistoricalDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetHistoricalDataError =
	MarketDataGetHistoricalDataErrors[keyof MarketDataGetHistoricalDataErrors];

export type MarketDataGetHistoricalDataResponses = {
	/**
	 * Successful Response
	 */
	200: HistoricalDataResponse;
};

export type MarketDataGetHistoricalDataResponse =
	MarketDataGetHistoricalDataResponses[keyof MarketDataGetHistoricalDataResponses];

export type MarketDataGetCompanyOverviewData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/fundamental/overview/{symbol}";
};

export type MarketDataGetCompanyOverviewErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetCompanyOverviewError =
	MarketDataGetCompanyOverviewErrors[keyof MarketDataGetCompanyOverviewErrors];

export type MarketDataGetCompanyOverviewResponses = {
	/**
	 * Successful Response
	 */
	200: CompanyOverviewResponse;
};

export type MarketDataGetCompanyOverviewResponse =
	MarketDataGetCompanyOverviewResponses[keyof MarketDataGetCompanyOverviewResponses];

export type MarketDataGetIncomeStatementData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Period
		 * 보고 주기 (annual, quarterly)
		 */
		period?: string;
	};
	url: "/api/v1/market-data/fundamental/income-statement/{symbol}";
};

export type MarketDataGetIncomeStatementErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetIncomeStatementError =
	MarketDataGetIncomeStatementErrors[keyof MarketDataGetIncomeStatementErrors];

export type MarketDataGetIncomeStatementResponses = {
	/**
	 * Successful Response
	 */
	200: IncomeStatementResponse;
};

export type MarketDataGetIncomeStatementResponse =
	MarketDataGetIncomeStatementResponses[keyof MarketDataGetIncomeStatementResponses];

export type MarketDataGetBalanceSheetData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Period
		 * 보고 주기 (annual, quarterly)
		 */
		period?: string;
	};
	url: "/api/v1/market-data/fundamental/balance-sheet/{symbol}";
};

export type MarketDataGetBalanceSheetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetBalanceSheetError =
	MarketDataGetBalanceSheetErrors[keyof MarketDataGetBalanceSheetErrors];

export type MarketDataGetBalanceSheetResponses = {
	/**
	 * Successful Response
	 */
	200: BalanceSheetResponse;
};

export type MarketDataGetBalanceSheetResponse =
	MarketDataGetBalanceSheetResponses[keyof MarketDataGetBalanceSheetResponses];

export type MarketDataGetCashFlowData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Period
		 * 보고 주기 (annual, quarterly)
		 */
		period?: string;
	};
	url: "/api/v1/market-data/fundamental/cash-flow/{symbol}";
};

export type MarketDataGetCashFlowErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetCashFlowError =
	MarketDataGetCashFlowErrors[keyof MarketDataGetCashFlowErrors];

export type MarketDataGetCashFlowResponses = {
	/**
	 * Successful Response
	 */
	200: CashFlowResponse;
};

export type MarketDataGetCashFlowResponse =
	MarketDataGetCashFlowResponses[keyof MarketDataGetCashFlowResponses];

export type MarketDataGetEarningsData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/fundamental/earnings/{symbol}";
};

export type MarketDataGetEarningsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetEarningsError =
	MarketDataGetEarningsErrors[keyof MarketDataGetEarningsErrors];

export type MarketDataGetEarningsResponses = {
	/**
	 * Successful Response
	 */
	200: EarningsResponse;
};

export type MarketDataGetEarningsResponse =
	MarketDataGetEarningsResponses[keyof MarketDataGetEarningsResponses];

export type MarketDataGetGdpDataData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Interval
		 * 데이터 간격 (annual, quarterly)
		 */
		interval?: string;
	};
	url: "/api/v1/market-data/economic/gdp";
};

export type MarketDataGetGdpDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetGdpDataError =
	MarketDataGetGdpDataErrors[keyof MarketDataGetGdpDataErrors];

export type MarketDataGetGdpDataResponses = {
	/**
	 * Response Market Data-Get Gdp Data
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetGdpDataResponse =
	MarketDataGetGdpDataResponses[keyof MarketDataGetGdpDataResponses];

export type MarketDataGetInflationDataData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Interval
		 * 데이터 간격 (monthly, annual)
		 */
		interval?: string;
	};
	url: "/api/v1/market-data/economic/inflation";
};

export type MarketDataGetInflationDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetInflationDataError =
	MarketDataGetInflationDataErrors[keyof MarketDataGetInflationDataErrors];

export type MarketDataGetInflationDataResponses = {
	/**
	 * Response Market Data-Get Inflation Data
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetInflationDataResponse =
	MarketDataGetInflationDataResponses[keyof MarketDataGetInflationDataResponses];

export type MarketDataGetInterestRatesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Maturity
		 * 만기 (3month, 2year, 5year, 10year, 30year)
		 */
		maturity?: string;
	};
	url: "/api/v1/market-data/economic/interest-rates";
};

export type MarketDataGetInterestRatesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetInterestRatesError =
	MarketDataGetInterestRatesErrors[keyof MarketDataGetInterestRatesErrors];

export type MarketDataGetInterestRatesResponses = {
	/**
	 * Response Market Data-Get Interest Rates
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetInterestRatesResponse =
	MarketDataGetInterestRatesResponses[keyof MarketDataGetInterestRatesResponses];

export type MarketDataGetEmploymentDataData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/economic/employment";
};

export type MarketDataGetEmploymentDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetEmploymentDataError =
	MarketDataGetEmploymentDataErrors[keyof MarketDataGetEmploymentDataErrors];

export type MarketDataGetEmploymentDataResponses = {
	/**
	 * Response Market Data-Get Employment Data
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetEmploymentDataResponse =
	MarketDataGetEmploymentDataResponses[keyof MarketDataGetEmploymentDataResponses];

export type MarketDataGetConsumerSentimentData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/economic/consumer-sentiment";
};

export type MarketDataGetConsumerSentimentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetConsumerSentimentError =
	MarketDataGetConsumerSentimentErrors[keyof MarketDataGetConsumerSentimentErrors];

export type MarketDataGetConsumerSentimentResponses = {
	/**
	 * Response Market Data-Get Consumer Sentiment
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetConsumerSentimentResponse =
	MarketDataGetConsumerSentimentResponses[keyof MarketDataGetConsumerSentimentResponses];

export type MarketDataGetNewsData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Topics
		 * 관심 주제 (쉼표로 구분)
		 */
		topics?: string | null;
		/**
		 * Time From
		 * 시작 날짜 (YYYY-MM-DD)
		 */
		time_from?: Date | null;
		/**
		 * Time To
		 * 종료 날짜 (YYYY-MM-DD)
		 */
		time_to?: Date | null;
		/**
		 * Limit
		 * 결과 개수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/market-data/intelligence/news/{symbol}";
};

export type MarketDataGetNewsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetNewsError =
	MarketDataGetNewsErrors[keyof MarketDataGetNewsErrors];

export type MarketDataGetNewsResponses = {
	/**
	 * Response Market Data-Get News
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetNewsResponse =
	MarketDataGetNewsResponses[keyof MarketDataGetNewsResponses];

export type MarketDataGetSentimentAnalysisData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Time Range
		 * 시간 범위 (1week, 1month, 3months, 6months)
		 */
		time_range?: string;
		/**
		 * Sources
		 * 분석 소스 (쉼표로 구분)
		 */
		sources?: string | null;
	};
	url: "/api/v1/market-data/intelligence/sentiment/{symbol}";
};

export type MarketDataGetSentimentAnalysisErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetSentimentAnalysisError =
	MarketDataGetSentimentAnalysisErrors[keyof MarketDataGetSentimentAnalysisErrors];

export type MarketDataGetSentimentAnalysisResponses = {
	/**
	 * Response Market Data-Get Sentiment Analysis
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetSentimentAnalysisResponse =
	MarketDataGetSentimentAnalysisResponses[keyof MarketDataGetSentimentAnalysisResponses];

export type MarketDataGetAnalystRecommendationsData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Time Range
		 * 시간 범위 (1month, 3months, 6months, 1year)
		 */
		time_range?: string;
		/**
		 * Brokers
		 * 증권사 리스트 (쉼표로 구분)
		 */
		brokers?: string | null;
	};
	url: "/api/v1/market-data/intelligence/analyst-recommendations/{symbol}";
};

export type MarketDataGetAnalystRecommendationsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetAnalystRecommendationsError =
	MarketDataGetAnalystRecommendationsErrors[keyof MarketDataGetAnalystRecommendationsErrors];

export type MarketDataGetAnalystRecommendationsResponses = {
	/**
	 * Response Market Data-Get Analyst Recommendations
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetAnalystRecommendationsResponse =
	MarketDataGetAnalystRecommendationsResponses[keyof MarketDataGetAnalystRecommendationsResponses];

export type MarketDataGetSocialSentimentData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL, TSLA)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Platforms
		 * 소셜 미디어 플랫폼 (twitter,reddit,stocktwits)
		 */
		platforms?: string | null;
		/**
		 * Time Range
		 * 시간 범위 (1day, 1week, 1month)
		 */
		time_range?: string;
	};
	url: "/api/v1/market-data/intelligence/social-sentiment/{symbol}";
};

export type MarketDataGetSocialSentimentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetSocialSentimentError =
	MarketDataGetSocialSentimentErrors[keyof MarketDataGetSocialSentimentErrors];

export type MarketDataGetSocialSentimentResponses = {
	/**
	 * Response Market Data-Get Social Sentiment
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type MarketDataGetSocialSentimentResponse =
	MarketDataGetSocialSentimentResponses[keyof MarketDataGetSocialSentimentResponses];

export type MarketDataCollectCompanyInfoData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/management/collect/company-info/{symbol}";
};

export type MarketDataCollectCompanyInfoErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataCollectCompanyInfoError =
	MarketDataCollectCompanyInfoErrors[keyof MarketDataCollectCompanyInfoErrors];

export type MarketDataCollectCompanyInfoResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataCollectMarketDataData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL)
		 */
		symbol: string;
	};
	query?: {
		/**
		 * Start Date
		 * 시작일
		 */
		start_date?: Date | null;
		/**
		 * End Date
		 * 종료일
		 */
		end_date?: Date | null;
		/**
		 * Outputsize
		 * 데이터 크기 (compact/full)
		 */
		outputsize?: string;
	};
	url: "/api/v1/market-data/management/collect/market-data/{symbol}";
};

export type MarketDataCollectMarketDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataCollectMarketDataError =
	MarketDataCollectMarketDataErrors[keyof MarketDataCollectMarketDataErrors];

export type MarketDataCollectMarketDataResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataCollectBulkDataData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Symbols
		 * 수집할 심볼 목록
		 */
		symbols: Array<string>;
		/**
		 * Include Company Info
		 * 기업 정보 포함 여부
		 */
		include_company_info?: boolean;
		/**
		 * Include Market Data
		 * 주가 데이터 포함 여부
		 */
		include_market_data?: boolean;
	};
	url: "/api/v1/market-data/management/collect/bulk";
};

export type MarketDataCollectBulkDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataCollectBulkDataError =
	MarketDataCollectBulkDataErrors[keyof MarketDataCollectBulkDataErrors];

export type MarketDataCollectBulkDataResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataGetDataCoverageData = {
	body?: never;
	path: {
		/**
		 * Symbol
		 * 종목 심볼 (예: AAPL)
		 */
		symbol: string;
	};
	query?: never;
	url: "/api/v1/market-data/management/coverage/{symbol}";
};

export type MarketDataGetDataCoverageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetDataCoverageError =
	MarketDataGetDataCoverageErrors[keyof MarketDataGetDataCoverageErrors];

export type MarketDataGetDataCoverageResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataGetSystemStatusData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/management/status";
};

export type MarketDataGetSystemStatusErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetSystemStatusError =
	MarketDataGetSystemStatusErrors[keyof MarketDataGetSystemStatusErrors];

export type MarketDataGetSystemStatusResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataGetMarketDataInfoData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/";
};

export type MarketDataGetMarketDataInfoErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataGetMarketDataInfoError =
	MarketDataGetMarketDataInfoErrors[keyof MarketDataGetMarketDataInfoErrors];

export type MarketDataGetMarketDataInfoResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type MarketDataHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/market-data/health";
};

export type MarketDataHealthCheckErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type MarketDataHealthCheckError =
	MarketDataHealthCheckErrors[keyof MarketDataHealthCheckErrors];

export type MarketDataHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetStrategiesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Strategy Type
		 * 전략 타입 필터
		 */
		strategy_type?: StrategyType | null;
		/**
		 * Is Active
		 * 활성화 상태 필터
		 */
		is_active?: boolean | null;
		/**
		 * Is Template
		 * 템플릿 여부 필터
		 */
		is_template?: boolean | null;
		/**
		 * Limit
		 * 결과 수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/strategies/";
};

export type StrategyGetStrategiesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategiesError =
	StrategyGetStrategiesErrors[keyof StrategyGetStrategiesErrors];

export type StrategyGetStrategiesResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyListResponse;
};

export type StrategyGetStrategiesResponse =
	StrategyGetStrategiesResponses[keyof StrategyGetStrategiesResponses];

export type StrategyCreateStrategyData = {
	body: StrategyCreateRequest;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/";
};

export type StrategyCreateStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateStrategyError =
	StrategyCreateStrategyErrors[keyof StrategyCreateStrategyErrors];

export type StrategyCreateStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyCreateStrategyResponse =
	StrategyCreateStrategyResponses[keyof StrategyCreateStrategyResponses];

export type StrategyDeleteStrategyData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyDeleteStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyDeleteStrategyError =
	StrategyDeleteStrategyErrors[keyof StrategyDeleteStrategyErrors];

export type StrategyDeleteStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetStrategyData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyGetStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyError =
	StrategyGetStrategyErrors[keyof StrategyGetStrategyErrors];

export type StrategyGetStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyGetStrategyResponse =
	StrategyGetStrategyResponses[keyof StrategyGetStrategyResponses];

export type StrategyUpdateStrategyData = {
	body: StrategyUpdateRequest;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}";
};

export type StrategyUpdateStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyUpdateStrategyError =
	StrategyUpdateStrategyErrors[keyof StrategyUpdateStrategyErrors];

export type StrategyUpdateStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyUpdateStrategyResponse =
	StrategyUpdateStrategyResponses[keyof StrategyUpdateStrategyResponses];

export type StrategyExecuteStrategyData = {
	body: StrategyExecuteRequest;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}/execute";
};

export type StrategyExecuteStrategyErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyExecuteStrategyError =
	StrategyExecuteStrategyErrors[keyof StrategyExecuteStrategyErrors];

export type StrategyExecuteStrategyResponses = {
	/**
	 * Successful Response
	 */
	200: ExecutionResponse;
};

export type StrategyExecuteStrategyResponse =
	StrategyExecuteStrategyResponses[keyof StrategyExecuteStrategyResponses];

export type StrategyGetStrategyExecutionsData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: {
		/**
		 * Limit
		 * 결과 수 제한
		 */
		limit?: number;
	};
	url: "/api/v1/strategies/{strategy_id}/executions";
};

export type StrategyGetStrategyExecutionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyExecutionsError =
	StrategyGetStrategyExecutionsErrors[keyof StrategyGetStrategyExecutionsErrors];

export type StrategyGetStrategyExecutionsResponses = {
	/**
	 * Successful Response
	 */
	200: ExecutionListResponse;
};

export type StrategyGetStrategyExecutionsResponse =
	StrategyGetStrategyExecutionsResponses[keyof StrategyGetStrategyExecutionsResponses];

export type StrategyGetStrategyPerformanceData = {
	body?: never;
	path: {
		/**
		 * Strategy Id
		 */
		strategy_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/{strategy_id}/performance";
};

export type StrategyGetStrategyPerformanceErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetStrategyPerformanceError =
	StrategyGetStrategyPerformanceErrors[keyof StrategyGetStrategyPerformanceErrors];

export type StrategyGetStrategyPerformanceResponses = {
	/**
	 * Successful Response
	 */
	200: PerformanceResponse;
};

export type StrategyGetStrategyPerformanceResponse =
	StrategyGetStrategyPerformanceResponses[keyof StrategyGetStrategyPerformanceResponses];

export type StrategyGetTemplatesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Strategy Type
		 * 전략 타입 필터
		 */
		strategy_type?: StrategyType | null;
	};
	url: "/api/v1/strategies/templates/";
};

export type StrategyGetTemplatesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplatesError =
	StrategyGetTemplatesErrors[keyof StrategyGetTemplatesErrors];

export type StrategyGetTemplatesResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateListResponse;
};

export type StrategyGetTemplatesResponse =
	StrategyGetTemplatesResponses[keyof StrategyGetTemplatesResponses];

export type StrategyCreateTemplateData = {
	body: TemplateCreateRequest;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/templates/";
};

export type StrategyCreateTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateTemplateError =
	StrategyCreateTemplateErrors[keyof StrategyCreateTemplateErrors];

export type StrategyCreateTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyCreateTemplateResponse =
	StrategyCreateTemplateResponses[keyof StrategyCreateTemplateResponses];

export type StrategyDeleteTemplateData = {
	body?: never;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyDeleteTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyDeleteTemplateError =
	StrategyDeleteTemplateErrors[keyof StrategyDeleteTemplateErrors];

export type StrategyDeleteTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type StrategyGetTemplateData = {
	body?: never;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyGetTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplateError =
	StrategyGetTemplateErrors[keyof StrategyGetTemplateErrors];

export type StrategyGetTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyGetTemplateResponse =
	StrategyGetTemplateResponses[keyof StrategyGetTemplateResponses];

export type StrategyUpdateTemplateData = {
	body: TemplateUpdateRequest;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}";
};

export type StrategyUpdateTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyUpdateTemplateError =
	StrategyUpdateTemplateErrors[keyof StrategyUpdateTemplateErrors];

export type StrategyUpdateTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: TemplateResponse;
};

export type StrategyUpdateTemplateResponse =
	StrategyUpdateTemplateResponses[keyof StrategyUpdateTemplateResponses];

export type StrategyCreateStrategyFromTemplateData = {
	body: StrategyFromTemplateRequest;
	path: {
		/**
		 * Template Id
		 */
		template_id: string;
	};
	query?: never;
	url: "/api/v1/strategies/templates/{template_id}/create-strategy";
};

export type StrategyCreateStrategyFromTemplateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyCreateStrategyFromTemplateError =
	StrategyCreateStrategyFromTemplateErrors[keyof StrategyCreateStrategyFromTemplateErrors];

export type StrategyCreateStrategyFromTemplateResponses = {
	/**
	 * Successful Response
	 */
	200: StrategyResponse;
};

export type StrategyCreateStrategyFromTemplateResponse =
	StrategyCreateStrategyFromTemplateResponses[keyof StrategyCreateStrategyFromTemplateResponses];

export type StrategyGetTemplateUsageStatsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/strategies/templates/analytics/usage-stats";
};

export type StrategyGetTemplateUsageStatsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type StrategyGetTemplateUsageStatsError =
	StrategyGetTemplateUsageStatsErrors[keyof StrategyGetTemplateUsageStatsErrors];

export type StrategyGetTemplateUsageStatsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetBacktestsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Status
		 * 실행 상태 필터
		 */
		status?: BacktestStatus | null;
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/";
};

export type BacktestsGetBacktestsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestsError =
	BacktestsGetBacktestsErrors[keyof BacktestsGetBacktestsErrors];

export type BacktestsGetBacktestsResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestListResponse;
};

export type BacktestsGetBacktestsResponse =
	BacktestsGetBacktestsResponses[keyof BacktestsGetBacktestsResponses];

export type BacktestsCreateBacktestData = {
	body: BacktestCreateRequest;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/";
};

export type BacktestsCreateBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsCreateBacktestError =
	BacktestsCreateBacktestErrors[keyof BacktestsCreateBacktestErrors];

export type BacktestsCreateBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestsCreateBacktestResponse =
	BacktestsCreateBacktestResponses[keyof BacktestsCreateBacktestResponses];

export type BacktestsDeleteBacktestData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsDeleteBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsDeleteBacktestError =
	BacktestsDeleteBacktestErrors[keyof BacktestsDeleteBacktestErrors];

export type BacktestsDeleteBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetBacktestData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsGetBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestError =
	BacktestsGetBacktestErrors[keyof BacktestsGetBacktestErrors];

export type BacktestsGetBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestsGetBacktestResponse =
	BacktestsGetBacktestResponses[keyof BacktestsGetBacktestResponses];

export type BacktestsUpdateBacktestData = {
	body: BacktestUpdateRequest;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}";
};

export type BacktestsUpdateBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsUpdateBacktestError =
	BacktestsUpdateBacktestErrors[keyof BacktestsUpdateBacktestErrors];

export type BacktestsUpdateBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestResponse;
};

export type BacktestsUpdateBacktestResponse =
	BacktestsUpdateBacktestResponses[keyof BacktestsUpdateBacktestResponses];

export type BacktestsExecuteBacktestData = {
	body: BacktestExecutionRequest;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: never;
	url: "/api/v1/backtests/{backtest_id}/execute";
};

export type BacktestsExecuteBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsExecuteBacktestError =
	BacktestsExecuteBacktestErrors[keyof BacktestsExecuteBacktestErrors];

export type BacktestsExecuteBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestExecutionResponse;
};

export type BacktestsExecuteBacktestResponse =
	BacktestsExecuteBacktestResponses[keyof BacktestsExecuteBacktestResponses];

export type BacktestsGetBacktestExecutionsData = {
	body?: never;
	path: {
		/**
		 * Backtest Id
		 */
		backtest_id: string;
	};
	query?: {
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/{backtest_id}/executions";
};

export type BacktestsGetBacktestExecutionsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestExecutionsError =
	BacktestsGetBacktestExecutionsErrors[keyof BacktestsGetBacktestExecutionsErrors];

export type BacktestsGetBacktestExecutionsResponses = {
	/**
	 * Successful Response
	 */
	200: BacktestExecutionListResponse;
};

export type BacktestsGetBacktestExecutionsResponse =
	BacktestsGetBacktestExecutionsResponses[keyof BacktestsGetBacktestExecutionsResponses];

export type BacktestsGetBacktestResultsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Backtest Id
		 * 백테스트 ID 필터
		 */
		backtest_id?: string | null;
		/**
		 * Execution Id
		 * 실행 ID 필터
		 */
		execution_id?: string | null;
		/**
		 * Skip
		 * 건너뛸 개수
		 */
		skip?: number;
		/**
		 * Limit
		 * 조회할 개수
		 */
		limit?: number;
	};
	url: "/api/v1/backtests/results/";
};

export type BacktestsGetBacktestResultsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestResultsError =
	BacktestsGetBacktestResultsErrors[keyof BacktestsGetBacktestResultsErrors];

export type BacktestsGetBacktestResultsResponses = {
	/**
	 * Response Backtests-Get Backtest Results
	 * Successful Response
	 */
	200: {
		[key: string]: unknown;
	};
};

export type BacktestsGetBacktestResultsResponse =
	BacktestsGetBacktestResultsResponses[keyof BacktestsGetBacktestResultsResponses];

export type BacktestsCreateAndRunIntegratedBacktestData = {
	body: IntegratedBacktestRequest;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/integrated";
};

export type BacktestsCreateAndRunIntegratedBacktestErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsCreateAndRunIntegratedBacktestError =
	BacktestsCreateAndRunIntegratedBacktestErrors[keyof BacktestsCreateAndRunIntegratedBacktestErrors];

export type BacktestsCreateAndRunIntegratedBacktestResponses = {
	/**
	 * Successful Response
	 */
	200: IntegratedBacktestResponse;
};

export type BacktestsCreateAndRunIntegratedBacktestResponse =
	BacktestsCreateAndRunIntegratedBacktestResponses[keyof BacktestsCreateAndRunIntegratedBacktestResponses];

export type BacktestsHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/health";
};

export type BacktestsHealthCheckErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsHealthCheckError =
	BacktestsHealthCheckErrors[keyof BacktestsHealthCheckErrors];

export type BacktestsHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetPerformanceAnalyticsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/analytics/performance-stats";
};

export type BacktestsGetPerformanceAnalyticsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetPerformanceAnalyticsError =
	BacktestsGetPerformanceAnalyticsErrors[keyof BacktestsGetPerformanceAnalyticsErrors];

export type BacktestsGetPerformanceAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetTradesAnalyticsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Execution Id
		 * 특정 실행 ID 필터
		 */
		execution_id?: string | null;
		/**
		 * Symbol
		 * 심볼 필터
		 */
		symbol?: string | null;
	};
	url: "/api/v1/backtests/analytics/trades";
};

export type BacktestsGetTradesAnalyticsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetTradesAnalyticsError =
	BacktestsGetTradesAnalyticsErrors[keyof BacktestsGetTradesAnalyticsErrors];

export type BacktestsGetTradesAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type BacktestsGetBacktestSummaryAnalyticsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backtests/analytics/summary";
};

export type BacktestsGetBacktestSummaryAnalyticsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type BacktestsGetBacktestSummaryAnalyticsError =
	BacktestsGetBacktestSummaryAnalyticsErrors[keyof BacktestsGetBacktestSummaryAnalyticsErrors];

export type BacktestsGetBacktestSummaryAnalyticsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsListWatchlistsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/";
};

export type WatchlistsListWatchlistsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsListWatchlistsError =
	WatchlistsListWatchlistsErrors[keyof WatchlistsListWatchlistsErrors];

export type WatchlistsListWatchlistsResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsCreateOrUpdateWatchlistData = {
	body: WatchlistUpdate;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/";
};

export type WatchlistsCreateOrUpdateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsCreateOrUpdateWatchlistError =
	WatchlistsCreateOrUpdateWatchlistErrors[keyof WatchlistsCreateOrUpdateWatchlistErrors];

export type WatchlistsCreateOrUpdateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsCreateWatchlistData = {
	body: WatchlistCreate;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/create";
};

export type WatchlistsCreateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsCreateWatchlistError =
	WatchlistsCreateWatchlistErrors[keyof WatchlistsCreateWatchlistErrors];

export type WatchlistsCreateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsDeleteWatchlistData = {
	body?: never;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}";
};

export type WatchlistsDeleteWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsDeleteWatchlistError =
	WatchlistsDeleteWatchlistErrors[keyof WatchlistsDeleteWatchlistErrors];

export type WatchlistsDeleteWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsGetWatchlistData = {
	body?: never;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}";
};

export type WatchlistsGetWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsGetWatchlistError =
	WatchlistsGetWatchlistErrors[keyof WatchlistsGetWatchlistErrors];

export type WatchlistsGetWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsUpdateWatchlistData = {
	body: WatchlistUpdate;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}";
};

export type WatchlistsUpdateWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsUpdateWatchlistError =
	WatchlistsUpdateWatchlistErrors[keyof WatchlistsUpdateWatchlistErrors];

export type WatchlistsUpdateWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsGetWatchlistCoverageData = {
	body?: never;
	path: {
		/**
		 * Name
		 * 워치리스트 이름
		 */
		name: string;
	};
	query?: never;
	url: "/api/v1/watchlists/{name}/coverage";
};

export type WatchlistsGetWatchlistCoverageErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsGetWatchlistCoverageError =
	WatchlistsGetWatchlistCoverageErrors[keyof WatchlistsGetWatchlistCoverageErrors];

export type WatchlistsGetWatchlistCoverageResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type WatchlistsSetupDefaultWatchlistData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/watchlists/setup-default";
};

export type WatchlistsSetupDefaultWatchlistErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type WatchlistsSetupDefaultWatchlistError =
	WatchlistsSetupDefaultWatchlistErrors[keyof WatchlistsSetupDefaultWatchlistErrors];

export type WatchlistsSetupDefaultWatchlistResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};
