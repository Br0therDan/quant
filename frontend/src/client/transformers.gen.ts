// This file is auto-generated by @hey-api/openapi-ts

import type {
	BacktestCreateAndRunIntegratedBacktestResponse,
	BacktestCreateBacktestResponse,
	BacktestExecuteBacktestResponse,
	BacktestGetBacktestExecutionsResponse,
	BacktestGetBacktestResponse,
	BacktestGetBacktestsResponse,
	BacktestUpdateBacktestResponse,
	DashboardGetDashboardSummaryResponse,
	DashboardGetEconomicCalendarResponse,
	DashboardGetNewsFeedResponse,
	DashboardGetPortfolioPerformanceResponse,
	DashboardGetRecentTradesResponse,
	DashboardGetStrategyComparisonResponse,
	DashboardGetWatchlistQuotesResponse,
	FundamentalGetBalanceSheetResponse,
	FundamentalGetCashFlowResponse,
	FundamentalGetCompanyOverviewResponse,
	FundamentalGetEarningsResponse,
	FundamentalGetIncomeStatementResponse,
	HealthHealthCheckResponse,
	StockGetDailyPricesResponse,
	StockGetIntradayDataResponse,
	StockGetMonthlyPricesResponse,
	StockGetQuoteResponse,
	StockGetWeeklyPricesResponse,
	StrategyCreateStrategyResponse,
	StrategyExecuteStrategyResponse,
	StrategyGetStrategiesResponse,
	StrategyGetStrategyExecutionsResponse,
	StrategyGetStrategyPerformanceResponse,
	StrategyGetStrategyResponse,
	StrategyUpdateStrategyResponse,
	TemplateCreateStrategyFromTemplateResponse,
	TemplateCreateTemplateResponse,
	TemplateGetTemplateResponse,
	TemplateGetTemplatesResponse,
	TemplateUpdateTemplateResponse,
	WatchlistCreateOrUpdateWatchlistResponse,
	WatchlistCreateWatchlistResponse,
	WatchlistGetWatchlistResponse,
	WatchlistListWatchlistsResponse,
	WatchlistUpdateWatchlistResponse,
} from "./types.gen";

export const healthHealthCheckResponseTransformer = async (
	data: any,
): Promise<HealthHealthCheckResponse> => {
	data = healthResponseSchemaResponseTransformer(data);
	return data;
};

const healthResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const stockGetDailyPricesResponseTransformer = async (
	data: any,
): Promise<StockGetDailyPricesResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

const historicalDataResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_date) {
		data.start_date = new Date(data.start_date);
	}
	if (data.end_date) {
		data.end_date = new Date(data.end_date);
	}
	return data;
};

export const stockGetWeeklyPricesResponseTransformer = async (
	data: any,
): Promise<StockGetWeeklyPricesResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const stockGetMonthlyPricesResponseTransformer = async (
	data: any,
): Promise<StockGetMonthlyPricesResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const stockGetQuoteResponseTransformer = async (
	data: any,
): Promise<StockGetQuoteResponse> => {
	data = quoteResponseSchemaResponseTransformer(data);
	return data;
};

const quoteResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = quoteDataSchemaResponseTransformer(data.data);
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const quoteDataSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

const metadataInfoSchemaResponseTransformer = (data: any) => {
	data.data_quality = dataQualityInfoSchemaResponseTransformer(
		data.data_quality,
	);
	data.cache_info = cacheInfoSchemaResponseTransformer(data.cache_info);
	return data;
};

const dataQualityInfoSchemaResponseTransformer = (data: any) => {
	data.last_updated = new Date(data.last_updated);
	return data;
};

const cacheInfoSchemaResponseTransformer = (data: any) => {
	if (data.cache_timestamp) {
		data.cache_timestamp = new Date(data.cache_timestamp);
	}
	return data;
};

export const stockGetIntradayDataResponseTransformer = async (
	data: any,
): Promise<StockGetIntradayDataResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const fundamentalGetCompanyOverviewResponseTransformer = async (
	data: any,
): Promise<FundamentalGetCompanyOverviewResponse> => {
	data = companyOverviewResponseSchemaResponseTransformer(data);
	return data;
};

const companyOverviewResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = companyOverviewDataSchemaResponseTransformer(data.data);
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const companyOverviewDataSchemaResponseTransformer = (data: any) => {
	if (data.latest_quarter) {
		data.latest_quarter = new Date(data.latest_quarter);
	}
	return data;
};

export const fundamentalGetIncomeStatementResponseTransformer = async (
	data: any,
): Promise<FundamentalGetIncomeStatementResponse> => {
	data = incomeStatementResponseSchemaResponseTransformer(data);
	return data;
};

const incomeStatementResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return incomeStatementDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const incomeStatementDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	return data;
};

export const fundamentalGetBalanceSheetResponseTransformer = async (
	data: any,
): Promise<FundamentalGetBalanceSheetResponse> => {
	data = balanceSheetResponseSchemaResponseTransformer(data);
	return data;
};

const balanceSheetResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return balanceSheetDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const balanceSheetDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	return data;
};

export const fundamentalGetCashFlowResponseTransformer = async (
	data: any,
): Promise<FundamentalGetCashFlowResponse> => {
	data = cashFlowResponseSchemaResponseTransformer(data);
	return data;
};

const cashFlowResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return cashFlowDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const cashFlowDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	return data;
};

export const fundamentalGetEarningsResponseTransformer = async (
	data: any,
): Promise<FundamentalGetEarningsResponse> => {
	data = earningsResponseSchemaResponseTransformer(data);
	return data;
};

const earningsResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return earningsDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const earningsDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	data.reported_date = new Date(data.reported_date);
	return data;
};

export const strategyGetStrategiesResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategiesResponse> => {
	data = strategyListResponseSchemaResponseTransformer(data);
	return data;
};

const strategyListResponseSchemaResponseTransformer = (data: any) => {
	data.strategies = data.strategies.map((item: any) => {
		return strategyResponseSchemaResponseTransformer(item);
	});
	return data;
};

const strategyResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const strategyCreateStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyCreateStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyGetStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyUpdateStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyUpdateStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyExecuteStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyExecuteStrategyResponse> => {
	data = executionResponseSchemaResponseTransformer(data);
	return data;
};

const executionResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	data.created_at = new Date(data.created_at);
	return data;
};

export const strategyGetStrategyExecutionsResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyExecutionsResponse> => {
	data = executionListResponseSchemaResponseTransformer(data);
	return data;
};

const executionListResponseSchemaResponseTransformer = (data: any) => {
	data.executions = data.executions.map((item: any) => {
		return executionResponseSchemaResponseTransformer(item);
	});
	return data;
};

export const strategyGetStrategyPerformanceResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyPerformanceResponse> => {
	data = performanceResponseSchemaResponseTransformer(data);
	return data;
};

const performanceResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_date) {
		data.start_date = new Date(data.start_date);
	}
	if (data.end_date) {
		data.end_date = new Date(data.end_date);
	}
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const templateGetTemplatesResponseTransformer = async (
	data: any,
): Promise<TemplateGetTemplatesResponse> => {
	data = templateListResponseSchemaResponseTransformer(data);
	return data;
};

const templateListResponseSchemaResponseTransformer = (data: any) => {
	data.templates = data.templates.map((item: any) => {
		return templateResponseSchemaResponseTransformer(item);
	});
	return data;
};

const templateResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const templateCreateTemplateResponseTransformer = async (
	data: any,
): Promise<TemplateCreateTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const templateGetTemplateResponseTransformer = async (
	data: any,
): Promise<TemplateGetTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const templateUpdateTemplateResponseTransformer = async (
	data: any,
): Promise<TemplateUpdateTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const templateCreateStrategyFromTemplateResponseTransformer = async (
	data: any,
): Promise<TemplateCreateStrategyFromTemplateResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestGetBacktestsResponseTransformer = async (
	data: any,
): Promise<BacktestGetBacktestsResponse> => {
	data = backtestListResponseSchemaResponseTransformer(data);
	return data;
};

const backtestListResponseSchemaResponseTransformer = (data: any) => {
	data.backtests = data.backtests.map((item: any) => {
		return backtestResponseSchemaResponseTransformer(item);
	});
	return data;
};

const backtestResponseSchemaResponseTransformer = (data: any) => {
	data.config = backtestConfigSchemaResponseTransformer(data.config);
	if (data.start_time) {
		data.start_time = new Date(data.start_time);
	}
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	data.created_at = new Date(data.created_at);
	if (data.updated_at) {
		data.updated_at = new Date(data.updated_at);
	}
	return data;
};

const backtestConfigSchemaResponseTransformer = (data: any) => {
	data.start_date = new Date(data.start_date);
	data.end_date = new Date(data.end_date);
	return data;
};

export const backtestCreateBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestCreateBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestGetBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestGetBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestUpdateBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestUpdateBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestExecuteBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestExecuteBacktestResponse> => {
	data = backtestExecutionResponseSchemaResponseTransformer(data);
	return data;
};

const backtestExecutionResponseSchemaResponseTransformer = (data: any) => {
	data.start_time = new Date(data.start_time);
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	data.trades = data.trades.map((item: any) => {
		return tradeSchemaResponseTransformer(item);
	});
	data.created_at = new Date(data.created_at);
	return data;
};

const tradeSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const backtestGetBacktestExecutionsResponseTransformer = async (
	data: any,
): Promise<BacktestGetBacktestExecutionsResponse> => {
	data = backtestExecutionListResponseSchemaResponseTransformer(data);
	return data;
};

const backtestExecutionListResponseSchemaResponseTransformer = (data: any) => {
	data.executions = data.executions.map((item: any) => {
		return backtestExecutionResponseSchemaResponseTransformer(item);
	});
	return data;
};

export const backtestCreateAndRunIntegratedBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestCreateAndRunIntegratedBacktestResponse> => {
	data = integratedBacktestResponseSchemaResponseTransformer(data);
	return data;
};

const integratedBacktestResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_time) {
		data.start_time = new Date(data.start_time);
	}
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	return data;
};

export const watchlistListWatchlistsResponseTransformer = async (
	data: any,
): Promise<WatchlistListWatchlistsResponse> => {
	data = watchlistListResponseSchemaResponseTransformer(data);
	return data;
};

const watchlistListResponseSchemaResponseTransformer = (data: any) => {
	if (data.watchlists) {
		data.watchlists = data.watchlists.map((item: any) => {
			return watchlistResponseSchemaResponseTransformer(item);
		});
	}
	return data;
};

const watchlistResponseSchemaResponseTransformer = (data: any) => {
	if (data.created_at) {
		data.created_at = new Date(data.created_at);
	}
	if (data.updated_at) {
		data.updated_at = new Date(data.updated_at);
	}
	return data;
};

export const watchlistCreateOrUpdateWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistCreateOrUpdateWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const watchlistCreateWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistCreateWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const watchlistGetWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistGetWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const watchlistUpdateWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistUpdateWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const dashboardGetDashboardSummaryResponseTransformer = async (
	data: any,
): Promise<DashboardGetDashboardSummaryResponse> => {
	data = dashboardSummaryResponseSchemaResponseTransformer(data);
	return data;
};

const dashboardSummaryResponseSchemaResponseTransformer = (data: any) => {
	data.data = dashboardSummarySchemaResponseTransformer(data.data);
	return data;
};

const dashboardSummarySchemaResponseTransformer = (data: any) => {
	data.recent_activity = recentActivitySchemaResponseTransformer(
		data.recent_activity,
	);
	return data;
};

const recentActivitySchemaResponseTransformer = (data: any) => {
	if (data.last_login) {
		data.last_login = new Date(data.last_login);
	}
	return data;
};

export const dashboardGetPortfolioPerformanceResponseTransformer = async (
	data: any,
): Promise<DashboardGetPortfolioPerformanceResponse> => {
	data = portfolioPerformanceResponseSchemaResponseTransformer(data);
	return data;
};

const portfolioPerformanceResponseSchemaResponseTransformer = (data: any) => {
	data.data = portfolioPerformanceSchemaResponseTransformer(data.data);
	return data;
};

const portfolioPerformanceSchemaResponseTransformer = (data: any) => {
	data.data_points = data.data_points.map((item: any) => {
		return portfolioDataPointSchemaResponseTransformer(item);
	});
	return data;
};

const portfolioDataPointSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const dashboardGetStrategyComparisonResponseTransformer = async (
	data: any,
): Promise<DashboardGetStrategyComparisonResponse> => {
	data = strategyComparisonResponseSchemaResponseTransformer(data);
	return data;
};

const strategyComparisonResponseSchemaResponseTransformer = (data: any) => {
	data.data = strategyComparisonSchemaResponseTransformer(data.data);
	return data;
};

const strategyComparisonSchemaResponseTransformer = (data: any) => {
	data.strategies = data.strategies.map((item: any) => {
		return strategyPerformanceItemSchemaResponseTransformer(item);
	});
	return data;
};

const strategyPerformanceItemSchemaResponseTransformer = (data: any) => {
	if (data.last_execution) {
		data.last_execution = new Date(data.last_execution);
	}
	return data;
};

export const dashboardGetRecentTradesResponseTransformer = async (
	data: any,
): Promise<DashboardGetRecentTradesResponse> => {
	data = recentTradesResponseSchemaResponseTransformer(data);
	return data;
};

const recentTradesResponseSchemaResponseTransformer = (data: any) => {
	data.data = recentTradesSchemaResponseTransformer(data.data);
	return data;
};

const recentTradesSchemaResponseTransformer = (data: any) => {
	data.trades = data.trades.map((item: any) => {
		return tradeItemSchemaResponseTransformer(item);
	});
	return data;
};

const tradeItemSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const dashboardGetWatchlistQuotesResponseTransformer = async (
	data: any,
): Promise<DashboardGetWatchlistQuotesResponse> => {
	data = watchlistQuotesResponseSchemaResponseTransformer(data);
	return data;
};

const watchlistQuotesResponseSchemaResponseTransformer = (data: any) => {
	data.data = watchlistQuotesSchemaResponseTransformer(data.data);
	return data;
};

const watchlistQuotesSchemaResponseTransformer = (data: any) => {
	data.last_updated = new Date(data.last_updated);
	return data;
};

export const dashboardGetNewsFeedResponseTransformer = async (
	data: any,
): Promise<DashboardGetNewsFeedResponse> => {
	data = newsFeedResponseSchemaResponseTransformer(data);
	return data;
};

const newsFeedResponseSchemaResponseTransformer = (data: any) => {
	data.data = newsFeedSchemaResponseTransformer(data.data);
	return data;
};

const newsFeedSchemaResponseTransformer = (data: any) => {
	data.articles = data.articles.map((item: any) => {
		return newsArticleSchemaResponseTransformer(item);
	});
	return data;
};

const newsArticleSchemaResponseTransformer = (data: any) => {
	data.published_at = new Date(data.published_at);
	return data;
};

export const dashboardGetEconomicCalendarResponseTransformer = async (
	data: any,
): Promise<DashboardGetEconomicCalendarResponse> => {
	data = economicCalendarResponseSchemaResponseTransformer(data);
	return data;
};

const economicCalendarResponseSchemaResponseTransformer = (data: any) => {
	data.data = economicCalendarSchemaResponseTransformer(data.data);
	return data;
};

const economicCalendarSchemaResponseTransformer = (data: any) => {
	data.events = data.events.map((item: any) => {
		return economicEventSchemaResponseTransformer(item);
	});
	return data;
};

const economicEventSchemaResponseTransformer = (data: any) => {
	data.release_time = new Date(data.release_time);
	return data;
};
