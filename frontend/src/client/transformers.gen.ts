// This file is auto-generated by @hey-api/openapi-ts

import type {
	BacktestCreateBacktestResponse,
	BacktestExecuteBacktestResponse,
	BacktestGetBacktestExecutionsResponse,
	BacktestGetBacktestResponse,
	BacktestGetBacktestsResponse,
	BacktestListOptimizationStudiesResponse,
	BacktestUpdateBacktestResponse,
	DashboardGetDashboardSummaryResponse,
	DashboardGetEconomicCalendarResponse,
	DashboardGetNewsFeedResponse,
	DashboardGetPortfolioForecastResponse,
	DashboardGetPortfolioPerformanceResponse,
	DashboardGetPredictiveOverviewResponse,
	DashboardGetRecentTradesResponse,
	DashboardGetStrategyComparisonResponse,
	DashboardGetWatchlistQuotesResponse,
	GenAiApprovePromptResponse,
	GenAiApproveStrategyResponse,
	GenAiCreatePromptTemplateResponse,
	GenAiEvaluatePromptResponse,
	GenAiExecuteChatopsResponse,
	GenAiGenerateNarrativeReportResponse,
	GenAiGenerateStrategyResponse,
	GenAiGenerateStrategyWithRagEndpointResponse,
	GenAiListPromptAuditLogsResponse,
	GenAiListPromptTemplatesResponse,
	GenAiLogPromptUsageResponse,
	GenAiRejectPromptResponse,
	GenAiSubmitPromptForReviewResponse,
	GenAiUpdatePromptTemplateResponse,
	HealthHealthCheckResponse,
	MarketDataGetAdxResponse,
	MarketDataGetAtrResponse,
	MarketDataGetBalanceSheetResponse,
	MarketDataGetBbandsResponse,
	MarketDataGetBitcoinPriceResponse,
	MarketDataGetCashFlowResponse,
	MarketDataGetCompanyOverviewResponse,
	MarketDataGetDailyPrices2Response,
	MarketDataGetDailyPricesResponse,
	MarketDataGetDemaResponse,
	MarketDataGetEarningsResponse,
	MarketDataGetEmaResponse,
	MarketDataGetEthereumPriceResponse,
	MarketDataGetIncomeStatementResponse,
	MarketDataGetIndicatorListResponse,
	MarketDataGetIntradayDataResponse,
	MarketDataGetMacdResponse,
	MarketDataGetMarketRegimeResponse,
	MarketDataGetMonthlyPrices2Response,
	MarketDataGetMonthlyPricesResponse,
	MarketDataGetQuoteResponse,
	MarketDataGetRsiResponse,
	MarketDataGetSmaResponse,
	MarketDataGetStochResponse,
	MarketDataGetTemaResponse,
	MarketDataGetWeeklyPrices2Response,
	MarketDataGetWeeklyPricesResponse,
	MarketDataGetWmaResponse,
	MlActivateFeatureResponse,
	MlCreateAbTestResponse,
	MlCreateBenchmarkResponse,
	MlCreateDeploymentResponse,
	MlCreateExperimentResponse,
	MlCreateFeatureResponse,
	MlCreateVersionResponse,
	MlDeprecateFeatureResponse,
	MlGetAbTestResponse,
	MlGetDeploymentResponse,
	MlGetExperimentResponse,
	MlGetFairnessReportResponse,
	MlGetFeatureResponse,
	MlGetFeatureStatisticsResponse,
	MlGetFeatureVersionsResponse,
	MlGetModelVersionResponse,
	MlGetRunResponse,
	MlListAbTestsResponse,
	MlListBenchmarksResponse,
	MlListDeploymentsResponse,
	MlListDriftEventsResponse,
	MlListEvaluationRunsResponse,
	MlListExperimentsResponse,
	MlListFairnessReportsResponse,
	MlListFeaturesResponse,
	MlListModelVersionsResponse,
	MlListRunsResponse,
	MlListScenariosResponse,
	MlLogRunResponse,
	MlRecordDriftEventResponse,
	MlRecordFeatureUsageResponse,
	MlRegisterModelVersionResponse,
	MlRegisterScenarioResponse,
	MlRequestFairnessAuditResponse,
	MlRollbackVersionResponse,
	MlRunBenchmarkResponse,
	MlRunEvaluationResponse,
	MlUpdateDeploymentResponse,
	MlUpdateExperimentResponse,
	MlUpdateFeatureResponse,
	MlUpdateModelVersionResponse,
	MlUpdateRunResponse,
	MlUpdateScenarioResponse,
	SignalsGetMlSignalResponse,
	StrategyCreateStrategyFromTemplateResponse,
	StrategyCreateStrategyResponse,
	StrategyCreateTemplateResponse,
	StrategyExecuteStrategyResponse,
	StrategyGetStrategiesResponse,
	StrategyGetStrategyExecutionsResponse,
	StrategyGetStrategyPerformanceResponse,
	StrategyGetStrategyResponse,
	StrategyGetTemplateResponse,
	StrategyGetTemplatesResponse,
	StrategyUpdateStrategyResponse,
	StrategyUpdateTemplateResponse,
	SystemServiceHealthCheckResponse,
	WatchlistCreateOrUpdateWatchlistResponse,
	WatchlistCreateWatchlistResponse,
	WatchlistGetWatchlistResponse,
	WatchlistListWatchlistsResponse,
	WatchlistUpdateWatchlistResponse,
} from "./types.gen";

export const healthHealthCheckResponseTransformer = async (
	data: any,
): Promise<HealthHealthCheckResponse> => {
	data = healthResponseSchemaResponseTransformer(data);
	return data;
};

const healthResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const marketDataGetDailyPricesResponseTransformer = async (
	data: any,
): Promise<MarketDataGetDailyPricesResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

const historicalDataResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_date) {
		data.start_date = new Date(data.start_date);
	}
	if (data.end_date) {
		data.end_date = new Date(data.end_date);
	}
	return data;
};

export const marketDataGetWeeklyPricesResponseTransformer = async (
	data: any,
): Promise<MarketDataGetWeeklyPricesResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetMonthlyPricesResponseTransformer = async (
	data: any,
): Promise<MarketDataGetMonthlyPricesResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetQuoteResponseTransformer = async (
	data: any,
): Promise<MarketDataGetQuoteResponse> => {
	data = quoteResponseSchemaResponseTransformer(data);
	return data;
};

const quoteResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = quoteDataSchemaResponseTransformer(data.data);
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const quoteDataSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

const metadataInfoSchemaResponseTransformer = (data: any) => {
	data.data_quality = dataQualityInfoSchemaResponseTransformer(
		data.data_quality,
	);
	data.cache_info = cacheInfoSchemaResponseTransformer(data.cache_info);
	return data;
};

const dataQualityInfoSchemaResponseTransformer = (data: any) => {
	data.last_updated = new Date(data.last_updated);
	return data;
};

const cacheInfoSchemaResponseTransformer = (data: any) => {
	if (data.cache_timestamp) {
		data.cache_timestamp = new Date(data.cache_timestamp);
	}
	return data;
};

export const marketDataGetIntradayDataResponseTransformer = async (
	data: any,
): Promise<MarketDataGetIntradayDataResponse> => {
	data = historicalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetDailyPrices2ResponseTransformer = async (
	data: any,
): Promise<MarketDataGetDailyPrices2Response> => {
	data = cryptoHistoricalDataResponseSchemaResponseTransformer(data);
	return data;
};

const cryptoHistoricalDataResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_date) {
		data.start_date = new Date(data.start_date);
	}
	if (data.end_date) {
		data.end_date = new Date(data.end_date);
	}
	return data;
};

export const marketDataGetWeeklyPrices2ResponseTransformer = async (
	data: any,
): Promise<MarketDataGetWeeklyPrices2Response> => {
	data = cryptoHistoricalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetMonthlyPrices2ResponseTransformer = async (
	data: any,
): Promise<MarketDataGetMonthlyPrices2Response> => {
	data = cryptoHistoricalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetBitcoinPriceResponseTransformer = async (
	data: any,
): Promise<MarketDataGetBitcoinPriceResponse> => {
	data = cryptoHistoricalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetEthereumPriceResponseTransformer = async (
	data: any,
): Promise<MarketDataGetEthereumPriceResponse> => {
	data = cryptoHistoricalDataResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetCompanyOverviewResponseTransformer = async (
	data: any,
): Promise<MarketDataGetCompanyOverviewResponse> => {
	data = companyOverviewResponseSchemaResponseTransformer(data);
	return data;
};

const companyOverviewResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = companyOverviewDataSchemaResponseTransformer(data.data);
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const companyOverviewDataSchemaResponseTransformer = (data: any) => {
	if (data.latest_quarter) {
		data.latest_quarter = new Date(data.latest_quarter);
	}
	return data;
};

export const marketDataGetIncomeStatementResponseTransformer = async (
	data: any,
): Promise<MarketDataGetIncomeStatementResponse> => {
	data = incomeStatementResponseSchemaResponseTransformer(data);
	return data;
};

const incomeStatementResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return incomeStatementDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const incomeStatementDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	return data;
};

export const marketDataGetBalanceSheetResponseTransformer = async (
	data: any,
): Promise<MarketDataGetBalanceSheetResponse> => {
	data = balanceSheetResponseSchemaResponseTransformer(data);
	return data;
};

const balanceSheetResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return balanceSheetDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const balanceSheetDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	return data;
};

export const marketDataGetCashFlowResponseTransformer = async (
	data: any,
): Promise<MarketDataGetCashFlowResponse> => {
	data = cashFlowResponseSchemaResponseTransformer(data);
	return data;
};

const cashFlowResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return cashFlowDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const cashFlowDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	return data;
};

export const marketDataGetEarningsResponseTransformer = async (
	data: any,
): Promise<MarketDataGetEarningsResponse> => {
	data = earningsResponseSchemaResponseTransformer(data);
	return data;
};

const earningsResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = data.data.map((item: any) => {
		return earningsDataSchemaResponseTransformer(item);
	});
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const earningsDataSchemaResponseTransformer = (data: any) => {
	data.fiscal_date_ending = new Date(data.fiscal_date_ending);
	data.reported_date = new Date(data.reported_date);
	return data;
};

export const marketDataGetIndicatorListResponseTransformer = async (
	data: any,
): Promise<MarketDataGetIndicatorListResponse> => {
	data = indicatorListResponseSchemaResponseTransformer(data);
	return data;
};

const indicatorListResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

export const marketDataGetSmaResponseTransformer = async (
	data: any,
): Promise<MarketDataGetSmaResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

const technicalIndicatorResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	if (data.data) {
		data.data = technicalIndicatorDataSchemaResponseTransformer(data.data);
	}
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const technicalIndicatorDataSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return indicatorDataPointSchemaResponseTransformer(item);
		});
	}
	if (data.latest_date) {
		data.latest_date = new Date(data.latest_date);
	}
	return data;
};

const indicatorDataPointSchemaResponseTransformer = (data: any) => {
	if (data.date) {
		data.date = new Date(data.date);
	}
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	return data;
};

export const marketDataGetWmaResponseTransformer = async (
	data: any,
): Promise<MarketDataGetWmaResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetDemaResponseTransformer = async (
	data: any,
): Promise<MarketDataGetDemaResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetTemaResponseTransformer = async (
	data: any,
): Promise<MarketDataGetTemaResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetEmaResponseTransformer = async (
	data: any,
): Promise<MarketDataGetEmaResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetRsiResponseTransformer = async (
	data: any,
): Promise<MarketDataGetRsiResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetMacdResponseTransformer = async (
	data: any,
): Promise<MarketDataGetMacdResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetBbandsResponseTransformer = async (
	data: any,
): Promise<MarketDataGetBbandsResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetAdxResponseTransformer = async (
	data: any,
): Promise<MarketDataGetAdxResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetAtrResponseTransformer = async (
	data: any,
): Promise<MarketDataGetAtrResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetStochResponseTransformer = async (
	data: any,
): Promise<MarketDataGetStochResponse> => {
	data = technicalIndicatorResponseSchemaResponseTransformer(data);
	return data;
};

export const marketDataGetMarketRegimeResponseTransformer = async (
	data: any,
): Promise<MarketDataGetMarketRegimeResponse> => {
	data = marketRegimeResponseSchemaResponseTransformer(data);
	return data;
};

const marketRegimeResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = marketRegimeSnapshotSchemaResponseTransformer(data.data);
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

const marketRegimeSnapshotSchemaResponseTransformer = (data: any) => {
	data.as_of = new Date(data.as_of);
	return data;
};

export const watchlistListWatchlistsResponseTransformer = async (
	data: any,
): Promise<WatchlistListWatchlistsResponse> => {
	data = watchlistListResponseSchemaResponseTransformer(data);
	return data;
};

const watchlistListResponseSchemaResponseTransformer = (data: any) => {
	if (data.watchlists) {
		data.watchlists = data.watchlists.map((item: any) => {
			return watchlistResponseSchemaResponseTransformer(item);
		});
	}
	return data;
};

const watchlistResponseSchemaResponseTransformer = (data: any) => {
	if (data.created_at) {
		data.created_at = new Date(data.created_at);
	}
	if (data.updated_at) {
		data.updated_at = new Date(data.updated_at);
	}
	return data;
};

export const watchlistCreateOrUpdateWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistCreateOrUpdateWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const watchlistCreateWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistCreateWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const watchlistGetWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistGetWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const watchlistUpdateWatchlistResponseTransformer = async (
	data: any,
): Promise<WatchlistUpdateWatchlistResponse> => {
	data = watchlistResponseSchemaResponseTransformer(data);
	return data;
};

export const dashboardGetDashboardSummaryResponseTransformer = async (
	data: any,
): Promise<DashboardGetDashboardSummaryResponse> => {
	data = dashboardSummaryResponseSchemaResponseTransformer(data);
	return data;
};

const dashboardSummaryResponseSchemaResponseTransformer = (data: any) => {
	data.data = dashboardSummarySchemaResponseTransformer(data.data);
	return data;
};

const dashboardSummarySchemaResponseTransformer = (data: any) => {
	data.recent_activity = recentActivitySchemaResponseTransformer(
		data.recent_activity,
	);
	if (data.data_quality) {
		data.data_quality = dataQualitySummarySchemaResponseTransformer(
			data.data_quality,
		);
	}
	return data;
};

const recentActivitySchemaResponseTransformer = (data: any) => {
	if (data.last_login) {
		data.last_login = new Date(data.last_login);
	}
	return data;
};

const dataQualitySummarySchemaResponseTransformer = (data: any) => {
	data.last_updated = new Date(data.last_updated);
	if (data.recent_alerts) {
		data.recent_alerts = data.recent_alerts.map((item: any) => {
			return dataQualityAlertSchemaResponseTransformer(item);
		});
	}
	return data;
};

const dataQualityAlertSchemaResponseTransformer = (data: any) => {
	data.occurred_at = new Date(data.occurred_at);
	return data;
};

export const dashboardGetPortfolioPerformanceResponseTransformer = async (
	data: any,
): Promise<DashboardGetPortfolioPerformanceResponse> => {
	data = portfolioPerformanceResponseSchemaResponseTransformer(data);
	return data;
};

const portfolioPerformanceResponseSchemaResponseTransformer = (data: any) => {
	data.data = portfolioPerformanceSchemaResponseTransformer(data.data);
	return data;
};

const portfolioPerformanceSchemaResponseTransformer = (data: any) => {
	data.data_points = data.data_points.map((item: any) => {
		return portfolioDataPointSchemaResponseTransformer(item);
	});
	return data;
};

const portfolioDataPointSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const dashboardGetStrategyComparisonResponseTransformer = async (
	data: any,
): Promise<DashboardGetStrategyComparisonResponse> => {
	data = strategyComparisonResponseSchemaResponseTransformer(data);
	return data;
};

const strategyComparisonResponseSchemaResponseTransformer = (data: any) => {
	data.data = strategyComparisonSchemaResponseTransformer(data.data);
	return data;
};

const strategyComparisonSchemaResponseTransformer = (data: any) => {
	data.strategies = data.strategies.map((item: any) => {
		return strategyPerformanceItemSchemaResponseTransformer(item);
	});
	return data;
};

const strategyPerformanceItemSchemaResponseTransformer = (data: any) => {
	if (data.last_execution) {
		data.last_execution = new Date(data.last_execution);
	}
	return data;
};

export const dashboardGetRecentTradesResponseTransformer = async (
	data: any,
): Promise<DashboardGetRecentTradesResponse> => {
	data = recentTradesResponseSchemaResponseTransformer(data);
	return data;
};

const recentTradesResponseSchemaResponseTransformer = (data: any) => {
	data.data = recentTradesSchemaResponseTransformer(data.data);
	return data;
};

const recentTradesSchemaResponseTransformer = (data: any) => {
	data.trades = data.trades.map((item: any) => {
		return tradeItemSchemaResponseTransformer(item);
	});
	return data;
};

const tradeItemSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const dashboardGetWatchlistQuotesResponseTransformer = async (
	data: any,
): Promise<DashboardGetWatchlistQuotesResponse> => {
	data = watchlistQuotesResponseSchemaResponseTransformer(data);
	return data;
};

const watchlistQuotesResponseSchemaResponseTransformer = (data: any) => {
	data.data = watchlistQuotesSchemaResponseTransformer(data.data);
	return data;
};

const watchlistQuotesSchemaResponseTransformer = (data: any) => {
	data.last_updated = new Date(data.last_updated);
	return data;
};

export const dashboardGetNewsFeedResponseTransformer = async (
	data: any,
): Promise<DashboardGetNewsFeedResponse> => {
	data = newsFeedResponseSchemaResponseTransformer(data);
	return data;
};

const newsFeedResponseSchemaResponseTransformer = (data: any) => {
	data.data = newsFeedSchemaResponseTransformer(data.data);
	return data;
};

const newsFeedSchemaResponseTransformer = (data: any) => {
	data.articles = data.articles.map((item: any) => {
		return newsArticleSchemaResponseTransformer(item);
	});
	return data;
};

const newsArticleSchemaResponseTransformer = (data: any) => {
	data.published_at = new Date(data.published_at);
	return data;
};

export const dashboardGetEconomicCalendarResponseTransformer = async (
	data: any,
): Promise<DashboardGetEconomicCalendarResponse> => {
	data = economicCalendarResponseSchemaResponseTransformer(data);
	return data;
};

const economicCalendarResponseSchemaResponseTransformer = (data: any) => {
	data.data = economicCalendarSchemaResponseTransformer(data.data);
	return data;
};

const economicCalendarSchemaResponseTransformer = (data: any) => {
	data.events = data.events.map((item: any) => {
		return economicEventSchemaResponseTransformer(item);
	});
	return data;
};

const economicEventSchemaResponseTransformer = (data: any) => {
	data.release_time = new Date(data.release_time);
	return data;
};

export const dashboardGetPredictiveOverviewResponseTransformer = async (
	data: any,
): Promise<DashboardGetPredictiveOverviewResponse> => {
	data = predictiveInsightsResponseSchemaResponseTransformer(data);
	return data;
};

const predictiveInsightsResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = predictiveDashboardInsightsSchemaResponseTransformer(data.data);
	if (data.metadata) {
		data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	}
	return data;
};

const predictiveDashboardInsightsSchemaResponseTransformer = (data: any) => {
	data.signal = mlSignalInsightSchemaResponseTransformer(data.signal);
	data.regime = marketRegimeSnapshotSchemaResponseTransformer(data.regime);
	data.forecast = portfolioForecastDistributionSchemaResponseTransformer(
		data.forecast,
	);
	return data;
};

const mlSignalInsightSchemaResponseTransformer = (data: any) => {
	data.as_of = new Date(data.as_of);
	return data;
};

const portfolioForecastDistributionSchemaResponseTransformer = (data: any) => {
	data.as_of = new Date(data.as_of);
	return data;
};

export const dashboardGetPortfolioForecastResponseTransformer = async (
	data: any,
): Promise<DashboardGetPortfolioForecastResponse> => {
	data = portfolioForecastResponseSchemaResponseTransformer(data);
	return data;
};

const portfolioForecastResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = portfolioForecastDistributionSchemaResponseTransformer(data.data);
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

export const backtestGetBacktestsResponseTransformer = async (
	data: any,
): Promise<BacktestGetBacktestsResponse> => {
	data = backtestListResponseSchemaResponseTransformer(data);
	return data;
};

const backtestListResponseSchemaResponseTransformer = (data: any) => {
	data.backtests = data.backtests.map((item: any) => {
		return backtestResponseSchemaResponseTransformer(item);
	});
	return data;
};

const backtestResponseSchemaResponseTransformer = (data: any) => {
	data.config = backtestConfigSchemaResponseTransformer(data.config);
	if (data.start_time) {
		data.start_time = new Date(data.start_time);
	}
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	data.created_at = new Date(data.created_at);
	if (data.updated_at) {
		data.updated_at = new Date(data.updated_at);
	}
	return data;
};

const backtestConfigSchemaResponseTransformer = (data: any) => {
	data.start_date = new Date(data.start_date);
	data.end_date = new Date(data.end_date);
	return data;
};

export const backtestCreateBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestCreateBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestGetBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestGetBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestUpdateBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestUpdateBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestExecuteBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestExecuteBacktestResponse> => {
	data = backtestExecutionResponseSchemaResponseTransformer(data);
	return data;
};

const backtestExecutionResponseSchemaResponseTransformer = (data: any) => {
	data.start_time = new Date(data.start_time);
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	data.trades = data.trades.map((item: any) => {
		return tradeSchemaResponseTransformer(item);
	});
	data.created_at = new Date(data.created_at);
	return data;
};

const tradeSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const backtestGetBacktestExecutionsResponseTransformer = async (
	data: any,
): Promise<BacktestGetBacktestExecutionsResponse> => {
	data = backtestExecutionListResponseSchemaResponseTransformer(data);
	return data;
};

const backtestExecutionListResponseSchemaResponseTransformer = (data: any) => {
	data.executions = data.executions.map((item: any) => {
		return backtestExecutionResponseSchemaResponseTransformer(item);
	});
	return data;
};

export const backtestListOptimizationStudiesResponseTransformer = async (
	data: any,
): Promise<BacktestListOptimizationStudiesResponse> => {
	data = studyListResponseSchemaResponseTransformer(data);
	return data;
};

const studyListResponseSchemaResponseTransformer = (data: any) => {
	data.studies = data.studies.map((item: any) => {
		return studyListItemSchemaResponseTransformer(item);
	});
	return data;
};

const studyListItemSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	if (data.completed_at) {
		data.completed_at = new Date(data.completed_at);
	}
	return data;
};

export const strategyGetStrategiesResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategiesResponse> => {
	data = strategyListResponseSchemaResponseTransformer(data);
	return data;
};

const strategyListResponseSchemaResponseTransformer = (data: any) => {
	data.strategies = data.strategies.map((item: any) => {
		return strategyResponseSchemaResponseTransformer(item);
	});
	return data;
};

const strategyResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const strategyCreateStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyCreateStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyGetStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyUpdateStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyUpdateStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyExecuteStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyExecuteStrategyResponse> => {
	data = executionResponseSchemaResponseTransformer(data);
	return data;
};

const executionResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	data.created_at = new Date(data.created_at);
	return data;
};

export const strategyGetStrategyExecutionsResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyExecutionsResponse> => {
	data = executionListResponseSchemaResponseTransformer(data);
	return data;
};

const executionListResponseSchemaResponseTransformer = (data: any) => {
	data.executions = data.executions.map((item: any) => {
		return executionResponseSchemaResponseTransformer(item);
	});
	return data;
};

export const strategyGetStrategyPerformanceResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyPerformanceResponse> => {
	data = performanceResponseSchemaResponseTransformer(data);
	return data;
};

const performanceResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_date) {
		data.start_date = new Date(data.start_date);
	}
	if (data.end_date) {
		data.end_date = new Date(data.end_date);
	}
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const strategyGetTemplatesResponseTransformer = async (
	data: any,
): Promise<StrategyGetTemplatesResponse> => {
	data = templateListResponseSchemaResponseTransformer(data);
	return data;
};

const templateListResponseSchemaResponseTransformer = (data: any) => {
	data.templates = data.templates.map((item: any) => {
		return templateResponseSchemaResponseTransformer(item);
	});
	return data;
};

const templateResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const strategyCreateTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyCreateTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyGetTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyGetTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyUpdateTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyUpdateTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyCreateStrategyFromTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyCreateStrategyFromTemplateResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const signalsGetMlSignalResponseTransformer = async (
	data: any,
): Promise<SignalsGetMlSignalResponse> => {
	data = mlSignalResponseSchemaResponseTransformer(data);
	return data;
};

const mlSignalResponseSchemaResponseTransformer = (data: any) => {
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	data.data = mlSignalInsightSchemaResponseTransformer(data.data);
	data.metadata = metadataInfoSchemaResponseTransformer(data.metadata);
	return data;
};

export const mlListScenariosResponseTransformer = async (
	data: any,
): Promise<MlListScenariosResponse> => {
	data = data.map((item: any) => {
		return scenarioResponseSchemaResponseTransformer(item);
	});
	return data;
};

const scenarioResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_date) {
		data.start_date = new Date(data.start_date);
	}
	if (data.end_date) {
		data.end_date = new Date(data.end_date);
	}
	data.stress_events = data.stress_events.map((item: any) => {
		return scenarioEventSchemaResponseTransformer(item);
	});
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

const scenarioEventSchemaResponseTransformer = (data: any) => {
	data.start = new Date(data.start);
	data.end = new Date(data.end);
	return data;
};

export const mlRegisterScenarioResponseTransformer = async (
	data: any,
): Promise<MlRegisterScenarioResponse> => {
	data = scenarioResponseSchemaResponseTransformer(data);
	return data;
};

export const mlUpdateScenarioResponseTransformer = async (
	data: any,
): Promise<MlUpdateScenarioResponse> => {
	data = scenarioResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListEvaluationRunsResponseTransformer = async (
	data: any,
): Promise<MlListEvaluationRunsResponse> => {
	data = data.map((item: any) => {
		return evaluationRunResponseSchemaResponseTransformer(item);
	});
	return data;
};

const evaluationRunResponseSchemaResponseTransformer = (data: any) => {
	data.started_at = new Date(data.started_at);
	if (data.completed_at) {
		data.completed_at = new Date(data.completed_at);
	}
	return data;
};

export const mlRunEvaluationResponseTransformer = async (
	data: any,
): Promise<MlRunEvaluationResponse> => {
	data = evaluationRunResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListBenchmarksResponseTransformer = async (
	data: any,
): Promise<MlListBenchmarksResponse> => {
	data = data.map((item: any) => {
		return benchmarkResponseSchemaResponseTransformer(item);
	});
	return data;
};

const benchmarkResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const mlCreateBenchmarkResponseTransformer = async (
	data: any,
): Promise<MlCreateBenchmarkResponse> => {
	data = benchmarkResponseSchemaResponseTransformer(data);
	return data;
};

export const mlRunBenchmarkResponseTransformer = async (
	data: any,
): Promise<MlRunBenchmarkResponse> => {
	data = benchmarkRunResponseSchemaResponseTransformer(data);
	return data;
};

const benchmarkRunResponseSchemaResponseTransformer = (data: any) => {
	data.started_at = new Date(data.started_at);
	if (data.completed_at) {
		data.completed_at = new Date(data.completed_at);
	}
	return data;
};

export const mlListAbTestsResponseTransformer = async (
	data: any,
): Promise<MlListAbTestsResponse> => {
	data = data.map((item: any) => {
		return abTestResponseSchemaResponseTransformer(item);
	});
	return data;
};

const abTestResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	if (data.completed_at) {
		data.completed_at = new Date(data.completed_at);
	}
	return data;
};

export const mlCreateAbTestResponseTransformer = async (
	data: any,
): Promise<MlCreateAbTestResponse> => {
	data = abTestResponseSchemaResponseTransformer(data);
	return data;
};

export const mlGetAbTestResponseTransformer = async (
	data: any,
): Promise<MlGetAbTestResponse> => {
	data = abTestResponseSchemaResponseTransformer(data);
	return data;
};

export const mlRequestFairnessAuditResponseTransformer = async (
	data: any,
): Promise<MlRequestFairnessAuditResponse> => {
	data = fairnessReportResponseSchemaResponseTransformer(data);
	return data;
};

const fairnessReportResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	return data;
};

export const mlListFairnessReportsResponseTransformer = async (
	data: any,
): Promise<MlListFairnessReportsResponse> => {
	data = data.map((item: any) => {
		return fairnessReportResponseSchemaResponseTransformer(item);
	});
	return data;
};

export const mlGetFairnessReportResponseTransformer = async (
	data: any,
): Promise<MlGetFairnessReportResponse> => {
	data = fairnessReportResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListExperimentsResponseTransformer = async (
	data: any,
): Promise<MlListExperimentsResponse> => {
	data = data.map((item: any) => {
		return experimentResponseSchemaResponseTransformer(item);
	});
	return data;
};

const experimentResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const mlCreateExperimentResponseTransformer = async (
	data: any,
): Promise<MlCreateExperimentResponse> => {
	data = experimentResponseSchemaResponseTransformer(data);
	return data;
};

export const mlGetExperimentResponseTransformer = async (
	data: any,
): Promise<MlGetExperimentResponse> => {
	data = experimentResponseSchemaResponseTransformer(data);
	return data;
};

export const mlUpdateExperimentResponseTransformer = async (
	data: any,
): Promise<MlUpdateExperimentResponse> => {
	data = experimentResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListRunsResponseTransformer = async (
	data: any,
): Promise<MlListRunsResponse> => {
	data = data.map((item: any) => {
		return runResponseSchemaResponseTransformer(item);
	});
	return data;
};

const runResponseSchemaResponseTransformer = (data: any) => {
	data.started_at = new Date(data.started_at);
	if (data.completed_at) {
		data.completed_at = new Date(data.completed_at);
	}
	return data;
};

export const mlLogRunResponseTransformer = async (
	data: any,
): Promise<MlLogRunResponse> => {
	data = runResponseSchemaResponseTransformer(data);
	return data;
};

export const mlGetRunResponseTransformer = async (
	data: any,
): Promise<MlGetRunResponse> => {
	data = runResponseSchemaResponseTransformer(data);
	return data;
};

export const mlUpdateRunResponseTransformer = async (
	data: any,
): Promise<MlUpdateRunResponse> => {
	data = runResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListModelVersionsResponseTransformer = async (
	data: any,
): Promise<MlListModelVersionsResponse> => {
	data = data.map((item: any) => {
		return modelVersionResponseSchemaResponseTransformer(item);
	});
	return data;
};

const modelVersionResponseSchemaResponseTransformer = (data: any) => {
	data.approval_checklist = data.approval_checklist.map((item: any) => {
		return deploymentChecklistItemSchemaResponseTransformer(item);
	});
	if (data.approved_at) {
		data.approved_at = new Date(data.approved_at);
	}
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

const deploymentChecklistItemSchemaResponseTransformer = (data: any) => {
	if (data.completed_at) {
		data.completed_at = new Date(data.completed_at);
	}
	return data;
};

export const mlRegisterModelVersionResponseTransformer = async (
	data: any,
): Promise<MlRegisterModelVersionResponse> => {
	data = modelVersionResponseSchemaResponseTransformer(data);
	return data;
};

export const mlGetModelVersionResponseTransformer = async (
	data: any,
): Promise<MlGetModelVersionResponse> => {
	data = modelVersionResponseSchemaResponseTransformer(data);
	return data;
};

export const mlUpdateModelVersionResponseTransformer = async (
	data: any,
): Promise<MlUpdateModelVersionResponse> => {
	data = modelVersionResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListDriftEventsResponseTransformer = async (
	data: any,
): Promise<MlListDriftEventsResponse> => {
	data = data.map((item: any) => {
		return driftEventResponseSchemaResponseTransformer(item);
	});
	return data;
};

const driftEventResponseSchemaResponseTransformer = (data: any) => {
	data.detected_at = new Date(data.detected_at);
	return data;
};

export const mlRecordDriftEventResponseTransformer = async (
	data: any,
): Promise<MlRecordDriftEventResponse> => {
	data = driftEventResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListDeploymentsResponseTransformer = async (
	data: any,
): Promise<MlListDeploymentsResponse> => {
	data = data.map((item: any) => {
		return deploymentResponseSchemaResponseTransformer(item);
	});
	return data;
};

const deploymentResponseSchemaResponseTransformer = (data: any) => {
	if (data.metrics) {
		data.metrics = deploymentMetricsSchemaResponseTransformer(data.metrics);
	}
	data.deployed_at = new Date(data.deployed_at);
	if (data.terminated_at) {
		data.terminated_at = new Date(data.terminated_at);
	}
	return data;
};

const deploymentMetricsSchemaResponseTransformer = (data: any) => {
	if (data.last_updated) {
		data.last_updated = new Date(data.last_updated);
	}
	return data;
};

export const mlCreateDeploymentResponseTransformer = async (
	data: any,
): Promise<MlCreateDeploymentResponse> => {
	data = deploymentResponseSchemaResponseTransformer(data);
	return data;
};

export const mlGetDeploymentResponseTransformer = async (
	data: any,
): Promise<MlGetDeploymentResponse> => {
	data = deploymentResponseSchemaResponseTransformer(data);
	return data;
};

export const mlUpdateDeploymentResponseTransformer = async (
	data: any,
): Promise<MlUpdateDeploymentResponse> => {
	data = deploymentResponseSchemaResponseTransformer(data);
	return data;
};

export const mlListFeaturesResponseTransformer = async (
	data: any,
): Promise<MlListFeaturesResponse> => {
	data = featureListResponseSchemaResponseTransformer(data);
	return data;
};

const featureListResponseSchemaResponseTransformer = (data: any) => {
	data.features = data.features.map((item: any) => {
		return featureResponseSchemaResponseTransformer(item);
	});
	return data;
};

const featureResponseSchemaResponseTransformer = (data: any) => {
	if (data.statistics) {
		data.statistics = featureStatisticsSchemaResponseTransformer(
			data.statistics,
		);
	}
	if (data.last_used_at) {
		data.last_used_at = new Date(data.last_used_at);
	}
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	if (data.deprecated_at) {
		data.deprecated_at = new Date(data.deprecated_at);
	}
	return data;
};

const featureStatisticsSchemaResponseTransformer = (data: any) => {
	if (data.calculated_at) {
		data.calculated_at = new Date(data.calculated_at);
	}
	return data;
};

export const mlCreateFeatureResponseTransformer = async (
	data: any,
): Promise<MlCreateFeatureResponse> => {
	data = featureResponseSchemaResponseTransformer(data);
	return data;
};

export const mlGetFeatureResponseTransformer = async (
	data: any,
): Promise<MlGetFeatureResponse> => {
	data = featureResponseSchemaResponseTransformer(data);
	return data;
};

export const mlUpdateFeatureResponseTransformer = async (
	data: any,
): Promise<MlUpdateFeatureResponse> => {
	data = featureResponseSchemaResponseTransformer(data);
	return data;
};

export const mlActivateFeatureResponseTransformer = async (
	data: any,
): Promise<MlActivateFeatureResponse> => {
	data = featureResponseSchemaResponseTransformer(data);
	return data;
};

export const mlDeprecateFeatureResponseTransformer = async (
	data: any,
): Promise<MlDeprecateFeatureResponse> => {
	data = featureResponseSchemaResponseTransformer(data);
	return data;
};

export const mlGetFeatureVersionsResponseTransformer = async (
	data: any,
): Promise<MlGetFeatureVersionsResponse> => {
	data = featureVersionListResponseSchemaResponseTransformer(data);
	return data;
};

const featureVersionListResponseSchemaResponseTransformer = (data: any) => {
	data.versions = data.versions.map((item: any) => {
		return featureVersionResponseSchemaResponseTransformer(item);
	});
	return data;
};

const featureVersionResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	if (data.rolled_back_at) {
		data.rolled_back_at = new Date(data.rolled_back_at);
	}
	return data;
};

export const mlCreateVersionResponseTransformer = async (
	data: any,
): Promise<MlCreateVersionResponse> => {
	data = featureVersionResponseSchemaResponseTransformer(data);
	return data;
};

export const mlRollbackVersionResponseTransformer = async (
	data: any,
): Promise<MlRollbackVersionResponse> => {
	data = featureVersionResponseSchemaResponseTransformer(data);
	return data;
};

export const mlRecordFeatureUsageResponseTransformer = async (
	data: any,
): Promise<MlRecordFeatureUsageResponse> => {
	data = featureUsageResponseSchemaResponseTransformer(data);
	return data;
};

const featureUsageResponseSchemaResponseTransformer = (data: any) => {
	data.usage_timestamp = new Date(data.usage_timestamp);
	return data;
};

export const mlGetFeatureStatisticsResponseTransformer = async (
	data: any,
): Promise<MlGetFeatureStatisticsResponse> => {
	data = featureStatisticsResponseSchemaResponseTransformer(data);
	return data;
};

const featureStatisticsResponseSchemaResponseTransformer = (data: any) => {
	data.generated_at = new Date(data.generated_at);
	return data;
};

export const genAiExecuteChatopsResponseTransformer = async (
	data: any,
): Promise<GenAiExecuteChatopsResponse> => {
	data = chatOpsResponseSchemaResponseTransformer(data);
	return data;
};

const chatOpsResponseSchemaResponseTransformer = (data: any) => {
	if (data.cache_status) {
		data.cache_status = cacheStatusSnapshotSchemaResponseTransformer(
			data.cache_status,
		);
	}
	if (data.data_quality) {
		data.data_quality = dataQualitySummarySchemaResponseTransformer(
			data.data_quality,
		);
	}
	if (data.recent_failures) {
		data.recent_failures = data.recent_failures.map((item: any) => {
			return failureInsightSchemaResponseTransformer(item);
		});
	}
	return data;
};

const cacheStatusSnapshotSchemaResponseTransformer = (data: any) => {
	if (data.duckdb_last_updated) {
		data.duckdb_last_updated = new Date(data.duckdb_last_updated);
	}
	if (data.mongodb_last_event_at) {
		data.mongodb_last_event_at = new Date(data.mongodb_last_event_at);
	}
	return data;
};

const failureInsightSchemaResponseTransformer = (data: any) => {
	data.occurred_at = new Date(data.occurred_at);
	return data;
};

export const genAiGenerateNarrativeReportResponseTransformer = async (
	data: any,
): Promise<GenAiGenerateNarrativeReportResponse> => {
	data = narrativeReportResponseSchemaResponseTransformer(data);
	return data;
};

const narrativeReportResponseSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = backtestNarrativeReportSchemaResponseTransformer(data.data);
	}
	if (data.timestamp) {
		data.timestamp = new Date(data.timestamp);
	}
	return data;
};

const backtestNarrativeReportSchemaResponseTransformer = (data: any) => {
	data.generated_at = new Date(data.generated_at);
	return data;
};

export const genAiListPromptTemplatesResponseTransformer = async (
	data: any,
): Promise<GenAiListPromptTemplatesResponse> => {
	data = data.map((item: any) => {
		return promptTemplateResponseSchemaResponseTransformer(item);
	});
	return data;
};

const promptTemplateResponseSchemaResponseTransformer = (data: any) => {
	if (data.evaluation) {
		data.evaluation = promptEvaluationSummarySchemaResponseTransformer(
			data.evaluation,
		);
	}
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

const promptEvaluationSummarySchemaResponseTransformer = (data: any) => {
	if (data.evaluated_at) {
		data.evaluated_at = new Date(data.evaluated_at);
	}
	return data;
};

export const genAiCreatePromptTemplateResponseTransformer = async (
	data: any,
): Promise<GenAiCreatePromptTemplateResponse> => {
	data = promptTemplateResponseSchemaResponseTransformer(data);
	return data;
};

export const genAiUpdatePromptTemplateResponseTransformer = async (
	data: any,
): Promise<GenAiUpdatePromptTemplateResponse> => {
	data = promptTemplateResponseSchemaResponseTransformer(data);
	return data;
};

export const genAiSubmitPromptForReviewResponseTransformer = async (
	data: any,
): Promise<GenAiSubmitPromptForReviewResponse> => {
	data = promptTemplateResponseSchemaResponseTransformer(data);
	return data;
};

export const genAiApprovePromptResponseTransformer = async (
	data: any,
): Promise<GenAiApprovePromptResponse> => {
	data = promptTemplateResponseSchemaResponseTransformer(data);
	return data;
};

export const genAiRejectPromptResponseTransformer = async (
	data: any,
): Promise<GenAiRejectPromptResponse> => {
	data = promptTemplateResponseSchemaResponseTransformer(data);
	return data;
};

export const genAiEvaluatePromptResponseTransformer = async (
	data: any,
): Promise<GenAiEvaluatePromptResponse> => {
	data = promptEvaluationResponseSchemaResponseTransformer(data);
	return data;
};

const promptEvaluationResponseSchemaResponseTransformer = (data: any) => {
	data.evaluation = promptEvaluationSummarySchemaResponseTransformer(
		data.evaluation,
	);
	return data;
};

export const genAiLogPromptUsageResponseTransformer = async (
	data: any,
): Promise<GenAiLogPromptUsageResponse> => {
	data = promptUsageLogResponseSchemaResponseTransformer(data);
	return data;
};

const promptUsageLogResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	return data;
};

export const genAiListPromptAuditLogsResponseTransformer = async (
	data: any,
): Promise<GenAiListPromptAuditLogsResponse> => {
	data = data.map((item: any) => {
		return promptAuditLogResponseSchemaResponseTransformer(item);
	});
	return data;
};

const promptAuditLogResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	return data;
};

export const genAiGenerateStrategyResponseTransformer = async (
	data: any,
): Promise<GenAiGenerateStrategyResponse> => {
	data = strategyBuilderResponseSchemaResponseTransformer(data);
	return data;
};

const strategyBuilderResponseSchemaResponseTransformer = (data: any) => {
	data.human_approval = humanApprovalRequestSchemaResponseTransformer(
		data.human_approval,
	);
	if (data.generated_at) {
		data.generated_at = new Date(data.generated_at);
	}
	if (data.rag_contexts) {
		data.rag_contexts = data.rag_contexts.map((item: any) => {
			return ragContextSchemaResponseTransformer(item);
		});
	}
	return data;
};

const humanApprovalRequestSchemaResponseTransformer = (data: any) => {
	if (data.approval_deadline) {
		data.approval_deadline = new Date(data.approval_deadline);
	}
	return data;
};

const ragContextSchemaResponseTransformer = (data: any) => {
	if (data.indexed_at) {
		data.indexed_at = new Date(data.indexed_at);
	}
	return data;
};

export const genAiGenerateStrategyWithRagEndpointResponseTransformer = async (
	data: any,
): Promise<GenAiGenerateStrategyWithRagEndpointResponse> => {
	data = strategyBuilderResponseSchemaResponseTransformer(data);
	return data;
};

export const genAiApproveStrategyResponseTransformer = async (
	data: any,
): Promise<GenAiApproveStrategyResponse> => {
	data = strategyApprovalResponseSchemaResponseTransformer(data);
	return data;
};

const strategyApprovalResponseSchemaResponseTransformer = (data: any) => {
	if (data.approved_at) {
		data.approved_at = new Date(data.approved_at);
	}
	return data;
};

export const systemServiceHealthCheckResponseTransformer = async (
	data: any,
): Promise<SystemServiceHealthCheckResponse> => {
	data = healthCheckResponseSchemaResponseTransformer(data);
	return data;
};

const healthCheckResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};
