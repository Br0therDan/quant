// This file is auto-generated by @hey-api/openapi-ts

import type {
	BacktestsCreateAndRunIntegratedBacktestResponse,
	BacktestsCreateBacktestResponse,
	BacktestsExecuteBacktestResponse,
	BacktestsGetBacktestExecutionsResponse,
	BacktestsGetBacktestResponse,
	BacktestsGetBacktestsResponse,
	BacktestsUpdateBacktestResponse,
	HealthHealthCheckResponse,
	MarketDataAnalyzeDataQualityResponse,
	MarketDataGetMarketDataResponse,
	MarketDataRequestBulkDataResponse,
	MarketDataServiceHealthCheckResponse,
	StrategyCreateStrategyFromTemplateResponse,
	StrategyCreateStrategyResponse,
	StrategyCreateTemplateResponse,
	StrategyExecuteStrategyResponse,
	StrategyGetStrategiesResponse,
	StrategyGetStrategyExecutionsResponse,
	StrategyGetStrategyPerformanceResponse,
	StrategyGetStrategyResponse,
	StrategyGetTemplateResponse,
	StrategyGetTemplatesResponse,
	StrategyUpdateStrategyResponse,
	StrategyUpdateTemplateResponse,
} from "./types.gen";

export const healthHealthCheckResponseTransformer = async (
	data: any,
): Promise<HealthHealthCheckResponse> => {
	data = healthResponseSchemaResponseTransformer(data);
	return data;
};

const healthResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const marketDataGetMarketDataResponseTransformer = async (
	data: any,
): Promise<MarketDataGetMarketDataResponse> => {
	data = data.map((item: any) => {
		return marketDataResponseSchemaResponseTransformer(item);
	});
	return data;
};

const marketDataResponseSchemaResponseTransformer = (data: any) => {
	data.date = new Date(data.date);
	return data;
};

export const marketDataRequestBulkDataResponseTransformer = async (
	data: any,
): Promise<MarketDataRequestBulkDataResponse> => {
	data = data.map((item: any) => {
		return dataRequestStatusSchemaResponseTransformer(item);
	});
	return data;
};

const dataRequestStatusSchemaResponseTransformer = (data: any) => {
	data.start_date = new Date(data.start_date);
	data.end_date = new Date(data.end_date);
	data.requested_at = new Date(data.requested_at);
	if (data.completed_at) {
		data.completed_at = new Date(data.completed_at);
	}
	return data;
};

export const marketDataAnalyzeDataQualityResponseTransformer = async (
	data: any,
): Promise<MarketDataAnalyzeDataQualityResponse> => {
	data = dataQualityResponseSchemaResponseTransformer(data);
	return data;
};

const dataQualityResponseSchemaResponseTransformer = (data: any) => {
	data.date_range_start = new Date(data.date_range_start);
	data.date_range_end = new Date(data.date_range_end);
	data.analyzed_at = new Date(data.analyzed_at);
	return data;
};

export const marketDataServiceHealthCheckResponseTransformer = async (
	data: any,
): Promise<MarketDataServiceHealthCheckResponse> => {
	data = healthCheckResponseSchemaResponseTransformer(data);
	return data;
};

const healthCheckResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	if (data.last_update) {
		data.last_update = new Date(data.last_update);
	}
	return data;
};

export const strategyGetStrategiesResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategiesResponse> => {
	data = strategyListResponseSchemaResponseTransformer(data);
	return data;
};

const strategyListResponseSchemaResponseTransformer = (data: any) => {
	data.strategies = data.strategies.map((item: any) => {
		return strategyResponseSchemaResponseTransformer(item);
	});
	return data;
};

const strategyResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const strategyCreateStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyCreateStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyGetStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyUpdateStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyUpdateStrategyResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyExecuteStrategyResponseTransformer = async (
	data: any,
): Promise<StrategyExecuteStrategyResponse> => {
	data = executionResponseSchemaResponseTransformer(data);
	return data;
};

const executionResponseSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	data.created_at = new Date(data.created_at);
	return data;
};

export const strategyGetStrategyExecutionsResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyExecutionsResponse> => {
	data = executionListResponseSchemaResponseTransformer(data);
	return data;
};

const executionListResponseSchemaResponseTransformer = (data: any) => {
	data.executions = data.executions.map((item: any) => {
		return executionResponseSchemaResponseTransformer(item);
	});
	return data;
};

export const strategyGetStrategyPerformanceResponseTransformer = async (
	data: any,
): Promise<StrategyGetStrategyPerformanceResponse> => {
	data = performanceResponseSchemaResponseTransformer(data);
	return data;
};

const performanceResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_date) {
		data.start_date = new Date(data.start_date);
	}
	if (data.end_date) {
		data.end_date = new Date(data.end_date);
	}
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const strategyGetTemplatesResponseTransformer = async (
	data: any,
): Promise<StrategyGetTemplatesResponse> => {
	data = templateListResponseSchemaResponseTransformer(data);
	return data;
};

const templateListResponseSchemaResponseTransformer = (data: any) => {
	data.templates = data.templates.map((item: any) => {
		return templateResponseSchemaResponseTransformer(item);
	});
	return data;
};

const templateResponseSchemaResponseTransformer = (data: any) => {
	data.created_at = new Date(data.created_at);
	data.updated_at = new Date(data.updated_at);
	return data;
};

export const strategyCreateTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyCreateTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyGetTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyGetTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyUpdateTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyUpdateTemplateResponse> => {
	data = templateResponseSchemaResponseTransformer(data);
	return data;
};

export const strategyCreateStrategyFromTemplateResponseTransformer = async (
	data: any,
): Promise<StrategyCreateStrategyFromTemplateResponse> => {
	data = strategyResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestsGetBacktestsResponseTransformer = async (
	data: any,
): Promise<BacktestsGetBacktestsResponse> => {
	data = backtestListResponseSchemaResponseTransformer(data);
	return data;
};

const backtestListResponseSchemaResponseTransformer = (data: any) => {
	data.backtests = data.backtests.map((item: any) => {
		return backtestResponseSchemaResponseTransformer(item);
	});
	return data;
};

const backtestResponseSchemaResponseTransformer = (data: any) => {
	data.config = backtestConfigSchemaResponseTransformer(data.config);
	if (data.start_time) {
		data.start_time = new Date(data.start_time);
	}
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	data.created_at = new Date(data.created_at);
	if (data.updated_at) {
		data.updated_at = new Date(data.updated_at);
	}
	return data;
};

const backtestConfigSchemaResponseTransformer = (data: any) => {
	data.start_date = new Date(data.start_date);
	data.end_date = new Date(data.end_date);
	return data;
};

export const backtestsCreateBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestsCreateBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestsGetBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestsGetBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestsUpdateBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestsUpdateBacktestResponse> => {
	data = backtestResponseSchemaResponseTransformer(data);
	return data;
};

export const backtestsExecuteBacktestResponseTransformer = async (
	data: any,
): Promise<BacktestsExecuteBacktestResponse> => {
	data = backtestExecutionResponseSchemaResponseTransformer(data);
	return data;
};

const backtestExecutionResponseSchemaResponseTransformer = (data: any) => {
	data.start_time = new Date(data.start_time);
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	data.trades = data.trades.map((item: any) => {
		return tradeSchemaResponseTransformer(item);
	});
	data.created_at = new Date(data.created_at);
	return data;
};

const tradeSchemaResponseTransformer = (data: any) => {
	data.timestamp = new Date(data.timestamp);
	return data;
};

export const backtestsGetBacktestExecutionsResponseTransformer = async (
	data: any,
): Promise<BacktestsGetBacktestExecutionsResponse> => {
	data = backtestExecutionListResponseSchemaResponseTransformer(data);
	return data;
};

const backtestExecutionListResponseSchemaResponseTransformer = (data: any) => {
	data.executions = data.executions.map((item: any) => {
		return backtestExecutionResponseSchemaResponseTransformer(item);
	});
	return data;
};

export const backtestsCreateAndRunIntegratedBacktestResponseTransformer =
	async (
		data: any,
	): Promise<BacktestsCreateAndRunIntegratedBacktestResponse> => {
		data = integratedBacktestResponseSchemaResponseTransformer(data);
		return data;
	};

const integratedBacktestResponseSchemaResponseTransformer = (data: any) => {
	if (data.start_time) {
		data.start_time = new Date(data.start_time);
	}
	if (data.end_time) {
		data.end_time = new Date(data.end_time);
	}
	return data;
};
