// This file is auto-generated by @hey-api/openapi-ts

export const BacktestConfigSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			type: "string",
			title: "Description",
			description: "백테스트 설명",
			default: "",
		},
		start_date: {
			type: "string",
			format: "date-time",
			title: "Start Date",
			description: "시작일",
		},
		end_date: {
			type: "string",
			format: "date-time",
			title: "End Date",
			description: "종료일",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
			description: "대상 심볼 목록",
		},
		initial_cash: {
			type: "number",
			title: "Initial Cash",
			description: "초기 자본금",
			default: 100000,
		},
		max_position_size: {
			type: "number",
			title: "Max Position Size",
			description: "최대 포지션 크기 (비율)",
			default: 0.2,
		},
		commission_rate: {
			type: "number",
			title: "Commission Rate",
			description: "수수료율",
			default: 0.001,
		},
		slippage_rate: {
			type: "number",
			title: "Slippage Rate",
			description: "슬리피지율",
			default: 0.0005,
		},
		rebalance_frequency: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Rebalance Frequency",
			description: "리밸런싱 주기 (daily, weekly, monthly)",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: ["name", "start_date", "end_date", "symbols"],
	title: "BacktestConfig",
	description: "백테스트 설정 내장 모델",
} as const;

export const BacktestCreateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			type: "string",
			title: "Description",
			description: "백테스트 설명",
			default: "",
		},
		config: {
			$ref: "#/components/schemas/BacktestConfig",
			description: "백테스트 설정",
		},
	},
	type: "object",
	required: ["name", "config"],
	title: "BacktestCreateRequest",
	description: "백테스트 생성 요청",
} as const;

export const BacktestExecutionListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		executions: {
			items: {
				$ref: "#/components/schemas/BacktestExecutionResponse",
			},
			type: "array",
			title: "Executions",
			description: "실행 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["executions", "total"],
	title: "BacktestExecutionListResponse",
	description: "백테스트 실행 목록 응답",
} as const;

export const BacktestExecutionRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		signals: {
			items: {
				additionalProperties: true,
				type: "object",
			},
			type: "array",
			title: "Signals",
			description: "트레이딩 시그널 목록",
		},
	},
	type: "object",
	required: ["signals"],
	title: "BacktestExecutionRequest",
	description: "백테스트 실행 요청",
	example: {
		signals: [
			{
				action: "BUY",
				quantity: 10,
				symbol: "AAPL",
				timestamp: "2023-01-01T00:00:00",
			},
			{
				action: "SELL",
				quantity: 5,
				symbol: "AAPL",
				timestamp: "2023-01-02T00:00:00",
			},
		],
	},
} as const;

export const BacktestExecutionResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "실행 ID",
		},
		backtest_id: {
			type: "string",
			title: "Backtest Id",
			description: "백테스트 ID",
		},
		execution_id: {
			type: "string",
			title: "Execution Id",
			description: "실행 ID",
		},
		start_time: {
			type: "string",
			format: "date-time",
			title: "Start Time",
			description: "실행 시작 시간",
		},
		end_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Time",
			description: "실행 종료 시간",
		},
		status: {
			$ref: "#/components/schemas/BacktestStatus",
			description: "실행 상태",
		},
		portfolio_values: {
			items: {
				type: "number",
			},
			type: "array",
			title: "Portfolio Values",
			description: "포트폴리오 가치 히스토리",
		},
		trades: {
			items: {
				$ref: "#/components/schemas/Trade",
			},
			type: "array",
			title: "Trades",
			description: "거래 내역",
		},
		positions: {
			additionalProperties: {
				$ref: "#/components/schemas/Position",
			},
			type: "object",
			title: "Positions",
			description: "최종 포지션",
		},
		error_message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Error Message",
			description: "오류 메시지",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"backtest_id",
		"execution_id",
		"start_time",
		"status",
		"portfolio_values",
		"trades",
		"positions",
		"created_at",
	],
	title: "BacktestExecutionResponse",
	description: "백테스트 실행 응답",
} as const;

export const BacktestListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		backtests: {
			items: {
				$ref: "#/components/schemas/BacktestResponse",
			},
			type: "array",
			title: "Backtests",
			description: "백테스트 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["backtests", "total"],
	title: "BacktestListResponse",
	description: "백테스트 목록 응답",
} as const;

export const BacktestResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "백테스트 ID",
		},
		name: {
			type: "string",
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			type: "string",
			title: "Description",
			description: "백테스트 설명",
		},
		config: {
			$ref: "#/components/schemas/BacktestConfig",
			description: "백테스트 설정",
		},
		status: {
			$ref: "#/components/schemas/BacktestStatus",
			description: "실행 상태",
		},
		start_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Time",
			description: "실행 시작 시간",
		},
		end_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Time",
			description: "실행 종료 시간",
		},
		duration_seconds: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Duration Seconds",
			description: "실행 시간(초)",
		},
		performance: {
			anyOf: [
				{
					$ref: "#/components/schemas/PerformanceMetrics",
				},
				{
					type: "null",
				},
			],
			description: "성과 지표",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Updated At",
			description: "수정 시간",
		},
	},
	type: "object",
	required: ["id", "name", "description", "config", "status", "created_at"],
	title: "BacktestResponse",
	description: "백테스트 응답",
} as const;

export const BacktestStatusSchema = {
	type: "string",
	enum: ["pending", "running", "completed", "failed", "cancelled"],
	title: "BacktestStatus",
	description: "백테스트 상태",
} as const;

export const BacktestUpdateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "백테스트 설명",
		},
		config: {
			anyOf: [
				{
					$ref: "#/components/schemas/BacktestConfig",
				},
				{
					type: "null",
				},
			],
			description: "백테스트 설정",
		},
	},
	type: "object",
	title: "BacktestUpdateRequest",
	description: "백테스트 수정 요청",
} as const;

export const Body_Auth_forgot_passwordSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
	},
	type: "object",
	required: ["email"],
	title: "Body_Auth-forgot_password",
} as const;

export const Body_Auth_loginSchema = {
	properties: {
		grant_type: {
			anyOf: [
				{
					type: "string",
					pattern: "^password$",
				},
				{
					type: "null",
				},
			],
			title: "Grant Type",
		},
		username: {
			type: "string",
			title: "Username",
		},
		password: {
			type: "string",
			format: "password",
			title: "Password",
		},
		scope: {
			type: "string",
			title: "Scope",
			default: "",
		},
		client_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Client Id",
		},
		client_secret: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			format: "password",
			title: "Client Secret",
		},
	},
	type: "object",
	required: ["username", "password"],
	title: "Body_Auth-login",
} as const;

export const Body_Auth_request_verify_tokenSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
	},
	type: "object",
	required: ["email"],
	title: "Body_Auth-request_verify_token",
} as const;

export const Body_Auth_reset_passwordSchema = {
	properties: {
		token: {
			type: "string",
			title: "Token",
		},
		password: {
			type: "string",
			title: "Password",
		},
	},
	type: "object",
	required: ["token", "password"],
	title: "Body_Auth-reset_password",
} as const;

export const Body_Auth_verifySchema = {
	properties: {
		token: {
			type: "string",
			title: "Token",
		},
	},
	type: "object",
	required: ["token"],
	title: "Body_Auth-verify",
} as const;

export const BulkDataRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
			description: "List of symbols",
		},
		start_date: {
			type: "string",
			format: "date-time",
			title: "Start Date",
			description: "Start date",
		},
		end_date: {
			type: "string",
			format: "date-time",
			title: "End Date",
			description: "End date",
		},
		interval: {
			type: "string",
			title: "Interval",
			description: "Data interval",
			default: "daily",
		},
	},
	type: "object",
	required: ["symbols", "start_date", "end_date"],
	title: "BulkDataRequest",
	description: "Request model for bulk data operations",
} as const;

export const DataQualityResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbol: {
			type: "string",
			title: "Symbol",
		},
		date_range_start: {
			type: "string",
			format: "date-time",
			title: "Date Range Start",
		},
		date_range_end: {
			type: "string",
			format: "date-time",
			title: "Date Range End",
		},
		total_records: {
			type: "integer",
			title: "Total Records",
		},
		missing_days: {
			type: "integer",
			title: "Missing Days",
		},
		duplicate_records: {
			type: "integer",
			title: "Duplicate Records",
		},
		price_anomalies: {
			type: "integer",
			title: "Price Anomalies",
		},
		quality_score: {
			type: "number",
			title: "Quality Score",
		},
		analyzed_at: {
			type: "string",
			format: "date-time",
			title: "Analyzed At",
		},
	},
	type: "object",
	required: [
		"symbol",
		"date_range_start",
		"date_range_end",
		"total_records",
		"missing_days",
		"duplicate_records",
		"price_anomalies",
		"quality_score",
		"analyzed_at",
	],
	title: "DataQualityResponse",
	description: "Response model for data quality metrics",
} as const;

export const DataRequestStatusSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
		},
		symbol: {
			type: "string",
			title: "Symbol",
		},
		start_date: {
			type: "string",
			format: "date-time",
			title: "Start Date",
		},
		end_date: {
			type: "string",
			format: "date-time",
			title: "End Date",
		},
		status: {
			type: "string",
			title: "Status",
		},
		error_message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Error Message",
		},
		records_count: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Records Count",
		},
		requested_at: {
			type: "string",
			format: "date-time",
			title: "Requested At",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
		},
	},
	type: "object",
	required: [
		"id",
		"symbol",
		"start_date",
		"end_date",
		"status",
		"requested_at",
	],
	title: "DataRequestStatus",
	description: "Response model for data request status",
} as const;

export const ExecutionListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		executions: {
			items: {
				$ref: "#/components/schemas/ExecutionResponse",
			},
			type: "array",
			title: "Executions",
			description: "실행 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["executions", "total"],
	title: "ExecutionListResponse",
	description: "Execution list response",
} as const;

export const ExecutionResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "실행 ID",
		},
		strategy_id: {
			type: "string",
			title: "Strategy Id",
			description: "전략 ID",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
			description: "전략 이름",
		},
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		signal_type: {
			$ref: "#/components/schemas/SignalType",
		},
		signal_strength: {
			type: "number",
			title: "Signal Strength",
			description: "신호 강도",
		},
		price: {
			type: "number",
			title: "Price",
			description: "가격",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "실행 시간",
		},
		metadata: {
			additionalProperties: true,
			type: "object",
			title: "Metadata",
			description: "메타데이터",
		},
		backtest_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Backtest Id",
			description: "백테스트 ID",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"strategy_id",
		"strategy_name",
		"symbol",
		"signal_type",
		"signal_strength",
		"price",
		"timestamp",
		"created_at",
	],
	title: "ExecutionResponse",
	description: "Execution response",
} as const;

export const HTTPValidationErrorSchema = {
	properties: {
		detail: {
			items: {
				$ref: "#/components/schemas/ValidationError",
			},
			type: "array",
			title: "Detail",
		},
	},
	type: "object",
	title: "HTTPValidationError",
} as const;

export const HealthCheckResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		status: {
			type: "string",
			title: "Status",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
		},
		database_connected: {
			type: "boolean",
			title: "Database Connected",
		},
		alpha_vantage_available: {
			type: "boolean",
			title: "Alpha Vantage Available",
		},
		total_symbols: {
			type: "integer",
			title: "Total Symbols",
		},
		last_update: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Last Update",
		},
	},
	type: "object",
	required: [
		"status",
		"timestamp",
		"database_connected",
		"alpha_vantage_available",
		"total_symbols",
	],
	title: "HealthCheckResponse",
	description: "Health check response model",
} as const;

export const HealthResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
		},
		service: {
			type: "string",
			title: "Service",
		},
		version: {
			type: "string",
			title: "Version",
		},
		uptime: {
			type: "number",
			title: "Uptime",
		},
		checks: {
			additionalProperties: {
				additionalProperties: true,
				type: "object",
			},
			type: "object",
			title: "Checks",
		},
	},
	type: "object",
	required: ["status", "timestamp", "service", "version", "uptime", "checks"],
	title: "HealthResponse",
	description: "Health check response model.",
} as const;

export const IntegratedBacktestRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			type: "string",
			title: "Description",
			description: "백테스트 설명",
			default: "",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
			description: "심볼 목록",
		},
		start_date: {
			type: "string",
			format: "date-time",
			title: "Start Date",
			description: "시작일",
		},
		end_date: {
			type: "string",
			format: "date-time",
			title: "End Date",
			description: "종료일",
		},
		strategy_type: {
			type: "string",
			title: "Strategy Type",
			description: "전략 타입",
		},
		strategy_params: {
			additionalProperties: true,
			type: "object",
			title: "Strategy Params",
			description: "전략 매개변수",
		},
		initial_capital: {
			type: "number",
			title: "Initial Capital",
			description: "초기 자본",
			default: 100000,
		},
	},
	type: "object",
	required: ["name", "symbols", "start_date", "end_date", "strategy_type"],
	title: "IntegratedBacktestRequest",
	description: "통합 백테스트 요청",
} as const;

export const IntegratedBacktestResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		backtest_id: {
			type: "string",
			title: "Backtest Id",
			description: "백테스트 ID",
		},
		execution_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Execution Id",
			description: "실행 ID",
		},
		result_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Result Id",
			description: "결과 ID",
		},
		status: {
			$ref: "#/components/schemas/BacktestStatus",
			description: "상태",
		},
		message: {
			type: "string",
			title: "Message",
			description: "메시지",
		},
		performance: {
			anyOf: [
				{
					$ref: "#/components/schemas/PerformanceMetrics",
				},
				{
					type: "null",
				},
			],
			description: "성과 지표",
		},
		start_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Time",
			description: "시작 시간",
		},
		end_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Time",
			description: "종료 시간",
		},
	},
	type: "object",
	required: ["backtest_id", "status", "message"],
	title: "IntegratedBacktestResponse",
	description: "통합 백테스트 응답",
} as const;

export const LoginResponseSchema = {
	properties: {
		access_token: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Access Token",
		},
		refresh_token: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Refresh Token",
		},
		token_type: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Token Type",
		},
		user_info: {
			$ref: "#/components/schemas/UserResponse",
		},
	},
	type: "object",
	required: ["user_info"],
	title: "LoginResponse",
	example: {
		access_token: "string",
		refresh_token: "string",
		token_type: "bearer",
		user_info: {
			email: "user@example.com",
			full_name: "string",
			id: "string",
			is_active: true,
			is_superuser: false,
			is_verified: false,
		},
	},
} as const;

export const MarketDataResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbol: {
			type: "string",
			title: "Symbol",
		},
		date: {
			type: "string",
			format: "date-time",
			title: "Date",
		},
		open: {
			type: "number",
			title: "Open",
		},
		high: {
			type: "number",
			title: "High",
		},
		low: {
			type: "number",
			title: "Low",
		},
		close: {
			type: "number",
			title: "Close",
		},
		volume: {
			type: "integer",
			title: "Volume",
		},
		adjusted_close: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Adjusted Close",
		},
		dividend_amount: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Dividend Amount",
		},
		split_coefficient: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Split Coefficient",
		},
	},
	type: "object",
	required: ["symbol", "date", "open", "high", "low", "close", "volume"],
	title: "MarketDataResponse",
	description: "Response model for market data",
} as const;

export const OAuth2AuthorizeResponseSchema = {
	properties: {
		authorization_url: {
			type: "string",
			title: "Authorization Url",
		},
	},
	type: "object",
	required: ["authorization_url"],
	title: "OAuth2AuthorizeResponse",
	example: {
		authorization_url:
			"https://example.com/oauth/authorize?response_type=code&client_id=your_client_id&redirect_uri=your_redirect_uri&scope=your_scope",
	},
} as const;

export const OAuthAccountSchema = {
	properties: {
		oauth_name: {
			type: "string",
			title: "Oauth Name",
		},
		access_token: {
			type: "string",
			title: "Access Token",
		},
		expires_at: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Expires At",
		},
		refresh_token: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Refresh Token",
		},
		account_id: {
			type: "string",
			title: "Account Id",
		},
		account_email: {
			type: "string",
			title: "Account Email",
		},
	},
	type: "object",
	required: ["oauth_name", "access_token", "account_id", "account_email"],
	title: "OAuthAccount",
	description: "Base OAuth account model.",
	example: {
		_id: "string",
		access_token: "string",
		account_email: "user@example.com",
		account_id: "string",
		expires_at: 1234567890,
		oauth_name: "string",
		refresh_token: "string",
	},
} as const;

export const OrderTypeSchema = {
	type: "string",
	enum: ["MARKET", "LIMIT", "STOP", "STOP_LIMIT"],
	title: "OrderType",
	description: "주문 타입",
} as const;

export const PerformanceMetricsSchema = {
	properties: {
		total_return: {
			type: "number",
			title: "Total Return",
			description: "총 수익률",
		},
		annualized_return: {
			type: "number",
			title: "Annualized Return",
			description: "연환산 수익률",
		},
		volatility: {
			type: "number",
			title: "Volatility",
			description: "변동성",
		},
		sharpe_ratio: {
			type: "number",
			title: "Sharpe Ratio",
			description: "샤프 비율",
		},
		max_drawdown: {
			type: "number",
			title: "Max Drawdown",
			description: "최대 낙폭",
		},
		total_trades: {
			type: "integer",
			title: "Total Trades",
			description: "총 거래 수",
		},
		winning_trades: {
			type: "integer",
			title: "Winning Trades",
			description: "승리 거래 수",
		},
		losing_trades: {
			type: "integer",
			title: "Losing Trades",
			description: "패배 거래 수",
		},
		win_rate: {
			type: "number",
			title: "Win Rate",
			description: "승률",
		},
	},
	type: "object",
	required: [
		"total_return",
		"annualized_return",
		"volatility",
		"sharpe_ratio",
		"max_drawdown",
		"total_trades",
		"winning_trades",
		"losing_trades",
		"win_rate",
	],
	title: "PerformanceMetrics",
	description: "성과 지표 내장 모델",
} as const;

export const PerformanceResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "성과 ID",
		},
		strategy_id: {
			type: "string",
			title: "Strategy Id",
			description: "전략 ID",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
			description: "전략 이름",
		},
		total_signals: {
			type: "integer",
			title: "Total Signals",
			description: "총 신호 수",
		},
		buy_signals: {
			type: "integer",
			title: "Buy Signals",
			description: "매수 신호 수",
		},
		sell_signals: {
			type: "integer",
			title: "Sell Signals",
			description: "매도 신호 수",
		},
		hold_signals: {
			type: "integer",
			title: "Hold Signals",
			description: "보유 신호 수",
		},
		total_return: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Total Return",
			description: "총 수익률",
		},
		win_rate: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Win Rate",
			description: "승률",
		},
		avg_return_per_trade: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Avg Return Per Trade",
			description: "거래당 평균 수익률",
		},
		max_drawdown: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Max Drawdown",
			description: "최대 낙폭",
		},
		sharpe_ratio: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Sharpe Ratio",
			description: "샤프 비율",
		},
		calmar_ratio: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Calmar Ratio",
			description: "칼마 비율",
		},
		volatility: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Volatility",
			description: "변동성",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
			description: "시작일",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
			description: "종료일",
		},
		accuracy: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Accuracy",
			description: "정확도",
		},
		avg_signal_strength: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Avg Signal Strength",
			description: "평균 신호 강도",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
			description: "수정 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"strategy_id",
		"strategy_name",
		"total_signals",
		"buy_signals",
		"sell_signals",
		"hold_signals",
		"created_at",
		"updated_at",
	],
	title: "PerformanceResponse",
	description: "Performance response",
} as const;

export const PositionSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		quantity: {
			type: "number",
			title: "Quantity",
			description: "보유 수량",
		},
		avg_price: {
			type: "number",
			title: "Avg Price",
			description: "평균 단가",
		},
		current_price: {
			type: "number",
			title: "Current Price",
			description: "현재 가격",
		},
		unrealized_pnl: {
			type: "number",
			title: "Unrealized Pnl",
			description: "미실현 손익",
		},
		realized_pnl: {
			type: "number",
			title: "Realized Pnl",
			description: "실현 손익",
			default: 0,
		},
		first_buy_date: {
			type: "string",
			format: "date-time",
			title: "First Buy Date",
			description: "최초 매수일",
		},
		last_update: {
			type: "string",
			format: "date-time",
			title: "Last Update",
			description: "마지막 업데이트",
		},
	},
	type: "object",
	required: [
		"symbol",
		"quantity",
		"avg_price",
		"current_price",
		"unrealized_pnl",
		"first_buy_date",
	],
	title: "Position",
	description: "포지션 정보 내장 모델",
} as const;

export const PydanticObjectIdSchema = {
	type: "string",
	maxLength: 24,
	minLength: 24,
	pattern: "^[0-9a-f]{24}$",
	example: "5eb7cf5a86d9755df3a6c593",
} as const;

export const SignalTypeSchema = {
	type: "string",
	enum: ["BUY", "SELL", "HOLD"],
	title: "SignalType",
	description: "신호 타입",
} as const;

export const StrategyCreateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "전략 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "전략 설명",
		},
		parameters: {
			additionalProperties: true,
			type: "object",
			title: "Parameters",
			description: "전략 파라미터",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: ["name", "strategy_type"],
	title: "StrategyCreateRequest",
	description: "Strategy creation request",
} as const;

export const StrategyExecuteRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbol: {
			type: "string",
			title: "Symbol",
			description: "대상 심볼",
		},
		market_data: {
			additionalProperties: true,
			type: "object",
			title: "Market Data",
			description: "시장 데이터",
		},
	},
	type: "object",
	required: ["symbol", "market_data"],
	title: "StrategyExecuteRequest",
	description: "Strategy execution request",
} as const;

export const StrategyFromTemplateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "전략 이름",
		},
		parameter_overrides: {
			anyOf: [
				{
					additionalProperties: {
						anyOf: [
							{},
							{
								type: "null",
							},
						],
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Parameter Overrides",
			description: "파라미터 오버라이드",
		},
	},
	type: "object",
	required: ["name"],
	title: "StrategyFromTemplateRequest",
	description: "Create strategy from template request",
} as const;

export const StrategyListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		strategies: {
			items: {
				$ref: "#/components/schemas/StrategyResponse",
			},
			type: "array",
			title: "Strategies",
			description: "전략 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["strategies", "total"],
	title: "StrategyListResponse",
	description: "Strategy list response",
} as const;

export const StrategyResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "전략 ID",
		},
		name: {
			type: "string",
			title: "Name",
			description: "전략 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "전략 설명",
		},
		parameters: {
			additionalProperties: true,
			type: "object",
			title: "Parameters",
			description: "전략 파라미터",
		},
		is_active: {
			type: "boolean",
			title: "Is Active",
			description: "활성화 상태",
		},
		is_template: {
			type: "boolean",
			title: "Is Template",
			description: "템플릿 여부",
		},
		created_by: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Created By",
			description: "생성자",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
			description: "수정 시간",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: [
		"id",
		"name",
		"strategy_type",
		"is_active",
		"is_template",
		"created_at",
		"updated_at",
	],
	title: "StrategyResponse",
	description: "Strategy response",
} as const;

export const StrategyTypeSchema = {
	type: "string",
	enum: ["sma_crossover", "rsi_mean_reversion", "momentum", "buy_and_hold"],
	title: "StrategyType",
	description: "지원되는 전략 타입",
} as const;

export const StrategyUpdateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			description: "전략 이름",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "전략 설명",
		},
		parameters: {
			anyOf: [
				{
					additionalProperties: {
						anyOf: [
							{},
							{
								type: "null",
							},
						],
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Parameters",
			description: "전략 파라미터",
		},
		is_active: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Active",
			description: "활성화 상태",
		},
		tags: {
			anyOf: [
				{
					items: {
						anyOf: [
							{
								type: "string",
							},
							{
								type: "null",
							},
						],
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	title: "StrategyUpdateRequest",
	description: "Strategy update request",
} as const;

export const TemplateCreateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "템플릿 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			type: "string",
			title: "Description",
			description: "템플릿 설명",
		},
		default_parameters: {
			additionalProperties: true,
			type: "object",
			title: "Default Parameters",
			description: "기본 파라미터",
		},
		parameter_schema: {
			anyOf: [
				{
					additionalProperties: {
						anyOf: [
							{},
							{
								type: "null",
							},
						],
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Parameter Schema",
			description: "파라미터 스키마",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: ["name", "strategy_type", "description"],
	title: "TemplateCreateRequest",
	description: "Template creation request",
} as const;

export const TemplateListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		templates: {
			items: {
				$ref: "#/components/schemas/TemplateResponse",
			},
			type: "array",
			title: "Templates",
			description: "템플릿 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["templates", "total"],
	title: "TemplateListResponse",
	description: "Template list response",
} as const;

export const TemplateResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "템플릿 ID",
		},
		name: {
			type: "string",
			title: "Name",
			description: "템플릿 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			type: "string",
			title: "Description",
			description: "템플릿 설명",
		},
		default_parameters: {
			additionalProperties: true,
			type: "object",
			title: "Default Parameters",
			description: "기본 파라미터",
		},
		parameter_schema: {
			anyOf: [
				{
					additionalProperties: {
						anyOf: [
							{},
							{
								type: "null",
							},
						],
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Parameter Schema",
			description: "파라미터 스키마",
		},
		usage_count: {
			type: "integer",
			title: "Usage Count",
			description: "사용 횟수",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
			description: "수정 시간",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: [
		"id",
		"name",
		"strategy_type",
		"description",
		"usage_count",
		"created_at",
		"updated_at",
	],
	title: "TemplateResponse",
	description: "Template response",
} as const;

export const TemplateUpdateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			description: "템플릿 이름",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "템플릿 설명",
		},
		default_parameters: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Default Parameters",
			description: "기본 파라미터",
		},
		parameter_schema: {
			anyOf: [
				{
					additionalProperties: {
						anyOf: [
							{},
							{
								type: "null",
							},
						],
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Parameter Schema",
			description: "파라미터 스키마",
		},
		tags: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	title: "TemplateUpdateRequest",
	description: "Template update request",
} as const;

export const TradeSchema = {
	properties: {
		trade_id: {
			type: "string",
			title: "Trade Id",
			description: "거래 ID",
		},
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		trade_type: {
			$ref: "#/components/schemas/TradeType",
		},
		order_type: {
			$ref: "#/components/schemas/OrderType",
			default: "MARKET",
		},
		quantity: {
			type: "number",
			title: "Quantity",
			description: "수량",
		},
		price: {
			type: "number",
			title: "Price",
			description: "체결 가격",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "거래 시간",
		},
		commission: {
			type: "number",
			title: "Commission",
			description: "수수료",
			default: 0,
		},
		slippage: {
			type: "number",
			title: "Slippage",
			description: "슬리피지",
			default: 0,
		},
		strategy_signal_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Strategy Signal Id",
			description: "전략 신호 ID",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
			description: "메모",
		},
	},
	type: "object",
	required: [
		"trade_id",
		"symbol",
		"trade_type",
		"quantity",
		"price",
		"timestamp",
	],
	title: "Trade",
	description: "거래 기록 내장 모델",
} as const;

export const TradeTypeSchema = {
	type: "string",
	enum: ["BUY", "SELL"],
	title: "TradeType",
	description: "거래 타입",
} as const;

export const UpdateRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbols: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Symbols",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
		},
	},
	type: "object",
	title: "UpdateRequest",
	description: "Update request model",
} as const;

export const UserCreateSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
		full_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Full Name",
		},
		password: {
			type: "string",
			title: "Password",
		},
		is_active: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Active",
			default: true,
		},
		is_superuser: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Superuser",
			default: false,
		},
		is_verified: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Verified",
			default: false,
		},
	},
	type: "object",
	required: ["email", "password"],
	title: "UserCreate",
	example: {
		email: "user@example.com",
		full_name: "string",
		is_active: true,
		is_superuser: false,
		is_verified: false,
		password: "string",
	},
} as const;

export const UserResponseSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
		full_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Full Name",
		},
		is_active: {
			type: "boolean",
			title: "Is Active",
			default: true,
		},
		is_superuser: {
			type: "boolean",
			title: "Is Superuser",
			default: false,
		},
		is_verified: {
			type: "boolean",
			title: "Is Verified",
			default: false,
		},
		oauth_accounts: {
			items: {
				$ref: "#/components/schemas/OAuthAccount",
			},
			type: "array",
			title: "Oauth Accounts",
		},
	},
	type: "object",
	required: ["email"],
	title: "UserResponse",
	description: "Base User model.",
	example: {
		_id: "string",
		email: "user@example.com",
		full_name: "string",
		is_active: true,
		is_superuser: false,
		is_verified: false,
		oauth_accounts: [
			{
				_id: "string",
				access_token: "string",
				account_email: "user@example.com",
				account_id: "string",
				expires_at: 1234567890,
				oauth_name: "string",
				refresh_token: "string",
			},
		],
	},
} as const;

export const UserUpdateSchema = {
	properties: {
		password: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Password",
		},
		email: {
			anyOf: [
				{
					type: "string",
					format: "email",
				},
				{
					type: "null",
				},
			],
			title: "Email",
		},
		full_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Full Name",
		},
		is_active: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Active",
		},
		is_superuser: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Superuser",
		},
		is_verified: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Verified",
		},
	},
	type: "object",
	title: "UserUpdate",
	example: {
		email: "user@example.com",
		full_name: "string",
		is_active: true,
		is_superuser: false,
		is_verified: false,
		password: "string",
	},
} as const;

export const ValidationErrorSchema = {
	properties: {
		loc: {
			items: {
				anyOf: [
					{
						type: "string",
					},
					{
						type: "integer",
					},
				],
			},
			type: "array",
			title: "Location",
		},
		msg: {
			type: "string",
			title: "Message",
		},
		type: {
			type: "string",
			title: "Error Type",
		},
	},
	type: "object",
	required: ["loc", "msg", "type"],
	title: "ValidationError",
} as const;

export const WatchlistCreateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
		},
		description: {
			type: "string",
			title: "Description",
			default: "",
		},
	},
	type: "object",
	required: ["name", "symbols"],
	title: "WatchlistCreate",
	description: "Watchlist creation model",
} as const;

export const WatchlistUpdateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			default: "default",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			default: "",
		},
	},
	type: "object",
	required: ["symbols"],
	title: "WatchlistUpdate",
	description: "Watchlist update model",
} as const;
