// This file is auto-generated by @hey-api/openapi-ts

export const ABTestCreateSchema = {
	properties: {
		name: {
			type: "string",
			minLength: 3,
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		model_a_id: {
			type: "string",
			title: "Model A Id",
		},
		model_b_id: {
			type: "string",
			title: "Model B Id",
		},
		traffic_split_a: {
			type: "number",
			maximum: 100,
			minimum: 0,
			title: "Traffic Split A",
			default: 50,
		},
		sample_size: {
			type: "integer",
			exclusiveMinimum: 0,
			title: "Sample Size",
			default: 1000,
		},
		confidence_level: {
			type: "number",
			exclusiveMaximum: 1,
			exclusiveMinimum: 0,
			title: "Confidence Level",
			default: 0.95,
		},
	},
	type: "object",
	required: ["name", "description", "model_a_id", "model_b_id"],
	title: "ABTestCreate",
	description: "A/B 테스트 생성",
} as const;

export const ABTestResponseSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		model_a_id: {
			type: "string",
			title: "Model A Id",
		},
		model_b_id: {
			type: "string",
			title: "Model B Id",
		},
		traffic_split_a: {
			type: "number",
			title: "Traffic Split A",
		},
		sample_size: {
			type: "integer",
			title: "Sample Size",
		},
		confidence_level: {
			type: "number",
			title: "Confidence Level",
		},
		status: {
			type: "string",
			title: "Status",
		},
		results: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Results",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
		},
	},
	type: "object",
	required: [
		"name",
		"description",
		"model_a_id",
		"model_b_id",
		"traffic_split_a",
		"sample_size",
		"confidence_level",
		"status",
		"results",
		"created_at",
		"completed_at",
	],
	title: "ABTestResponse",
	description: "A/B 테스트 응답",
} as const;

export const ArtifactReferenceSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
			description: "아티팩트 이름",
		},
		uri: {
			type: "string",
			title: "Uri",
			description: "저장 위치 URI",
		},
		artifact_type: {
			type: "string",
			title: "Artifact Type",
			description: "아티팩트 타입 (model, report 등)",
		},
	},
	type: "object",
	required: ["name", "uri", "artifact_type"],
	title: "ArtifactReference",
	description: "Reference to persisted artifacts (MLflow/W&B).",
} as const;

export const AutoBacktestRequestSchema = {
	properties: {
		strategy_config: {
			additionalProperties: true,
			type: "object",
			title: "Strategy Config",
			description: "전략 설정 (JSON)",
		},
		trigger_reason: {
			type: "string",
			title: "Trigger Reason",
			description: "트리거 사유 (예: 'strategy_builder', 'optimization')",
		},
		generate_report: {
			type: "boolean",
			title: "Generate Report",
			description: "내러티브 리포트 자동 생성",
			default: true,
		},
		notify_on_completion: {
			type: "boolean",
			title: "Notify On Completion",
			description: "완료 시 알림",
			default: true,
		},
	},
	type: "object",
	required: ["strategy_config", "trigger_reason"],
	title: "AutoBacktestRequest",
	description: "자동 백테스트 트리거 요청",
} as const;

export const AutoBacktestResponseSchema = {
	properties: {
		backtest_id: {
			type: "string",
			title: "Backtest Id",
			description: "생성된 백테스트 ID",
		},
		status: {
			type: "string",
			title: "Status",
			description: "상태 (pending, running, completed)",
		},
		estimated_duration_seconds: {
			type: "integer",
			title: "Estimated Duration Seconds",
			description: "예상 소요 시간 (초)",
		},
		report_url: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Report Url",
			description: "리포트 URL (완료 후)",
		},
	},
	type: "object",
	required: ["backtest_id", "status", "estimated_duration_seconds"],
	title: "AutoBacktestResponse",
	description: "자동 백테스트 응답",
} as const;

export const BacktestConfigSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			type: "string",
			title: "Description",
			description: "백테스트 설명",
			default: "",
		},
		start_date: {
			type: "string",
			format: "date-time",
			title: "Start Date",
			description: "시작일",
		},
		end_date: {
			type: "string",
			format: "date-time",
			title: "End Date",
			description: "종료일",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
			description: "대상 심볼 목록",
		},
		initial_cash: {
			type: "number",
			title: "Initial Cash",
			description: "초기 자본금",
			default: 100000,
		},
		max_position_size: {
			type: "number",
			title: "Max Position Size",
			description: "최대 포지션 크기 (비율)",
			default: 0.2,
		},
		commission_rate: {
			type: "number",
			title: "Commission Rate",
			description: "수수료율",
			default: 0.001,
		},
		slippage_rate: {
			type: "number",
			title: "Slippage Rate",
			description: "슬리피지율",
			default: 0.0005,
		},
		rebalance_frequency: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Rebalance Frequency",
			description: "리밸런싱 주기 (daily, weekly, monthly)",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: ["name", "start_date", "end_date", "symbols"],
	title: "BacktestConfig",
	description: "백테스트 설정 내장 모델",
} as const;

export const BacktestCreateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			type: "string",
			title: "Description",
			description: "백테스트 설명",
			default: "",
		},
		config: {
			$ref: "#/components/schemas/BacktestConfig",
			description: "백테스트 설정",
		},
	},
	type: "object",
	required: ["name", "config"],
	title: "BacktestCreate",
	description: "백테스트 생성 요청",
} as const;

export const BacktestExecutionListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		executions: {
			items: {
				$ref: "#/components/schemas/BacktestExecutionResponse",
			},
			type: "array",
			title: "Executions",
			description: "실행 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["executions", "total"],
	title: "BacktestExecutionListResponse",
	description: "백테스트 실행 목록 응답",
} as const;

export const BacktestExecutionRequestSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		signals: {
			items: {
				additionalProperties: true,
				type: "object",
			},
			type: "array",
			title: "Signals",
			description: "트레이딩 시그널 목록",
		},
	},
	type: "object",
	required: ["signals"],
	title: "BacktestExecutionRequest",
	description: "백테스트 실행 요청",
	example: {
		signals: [
			{
				action: "BUY",
				quantity: 10,
				symbol: "AAPL",
				timestamp: "2023-01-01T00:00:00",
			},
			{
				action: "SELL",
				quantity: 5,
				symbol: "AAPL",
				timestamp: "2023-01-02T00:00:00",
			},
		],
	},
} as const;

export const BacktestExecutionResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "실행 ID",
		},
		backtest_id: {
			type: "string",
			title: "Backtest Id",
			description: "백테스트 ID",
		},
		execution_id: {
			type: "string",
			title: "Execution Id",
			description: "실행 ID",
		},
		start_time: {
			type: "string",
			format: "date-time",
			title: "Start Time",
			description: "실행 시작 시간",
		},
		end_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Time",
			description: "실행 종료 시간",
		},
		status: {
			$ref: "#/components/schemas/BacktestStatus",
			description: "실행 상태",
		},
		portfolio_values: {
			items: {
				type: "number",
			},
			type: "array",
			title: "Portfolio Values",
			description: "포트폴리오 가치 히스토리",
		},
		trades: {
			items: {
				$ref: "#/components/schemas/Trade",
			},
			type: "array",
			title: "Trades",
			description: "거래 내역",
		},
		positions: {
			additionalProperties: {
				$ref: "#/components/schemas/Position",
			},
			type: "object",
			title: "Positions",
			description: "최종 포지션",
		},
		error_message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Error Message",
			description: "오류 메시지",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"backtest_id",
		"execution_id",
		"start_time",
		"status",
		"portfolio_values",
		"trades",
		"positions",
		"created_at",
	],
	title: "BacktestExecutionResponse",
	description: "백테스트 실행 응답",
} as const;

export const BacktestListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		backtests: {
			items: {
				$ref: "#/components/schemas/BacktestResponse",
			},
			type: "array",
			title: "Backtests",
			description: "백테스트 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["backtests", "total"],
	title: "BacktestListResponse",
	description: "백테스트 목록 응답",
} as const;

export const BacktestNarrativeReportSchema = {
	properties: {
		backtest_id: {
			type: "string",
			title: "Backtest Id",
			description: "백테스트 ID",
		},
		generated_at: {
			type: "string",
			format: "date-time",
			title: "Generated At",
			description: "리포트 생성 시간",
		},
		llm_model: {
			type: "string",
			title: "Llm Model",
			description: "사용된 LLM 모델",
		},
		llm_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Llm Version",
			description: "LLM 버전",
		},
		executive_summary: {
			$ref: "#/components/schemas/ExecutiveSummary",
		},
		performance_analysis: {
			$ref: "#/components/schemas/PerformanceAnalysis",
		},
		strategy_insights: {
			$ref: "#/components/schemas/StrategyInsights",
		},
		risk_assessment: {
			$ref: "#/components/schemas/RiskAssessment",
		},
		market_context: {
			$ref: "#/components/schemas/MarketContext",
			description: "시장 맥락",
		},
		recommendations: {
			$ref: "#/components/schemas/Recommendations",
		},
		fact_check_passed: {
			type: "boolean",
			title: "Fact Check Passed",
			description: "사실 확인 통과 여부",
		},
		validation_errors: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Validation Errors",
			description: "검증 오류 (있는 경우)",
		},
	},
	type: "object",
	required: [
		"backtest_id",
		"generated_at",
		"llm_model",
		"executive_summary",
		"performance_analysis",
		"strategy_insights",
		"risk_assessment",
		"market_context",
		"recommendations",
		"fact_check_passed",
	],
	title: "BacktestNarrativeReport",
	description: "백테스트 내러티브 리포트 (전체)",
} as const;

export const BacktestResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "백테스트 ID",
		},
		name: {
			type: "string",
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			type: "string",
			title: "Description",
			description: "백테스트 설명",
		},
		config: {
			$ref: "#/components/schemas/BacktestConfig",
			description: "백테스트 설정",
		},
		status: {
			$ref: "#/components/schemas/BacktestStatus",
			description: "실행 상태",
		},
		start_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Time",
			description: "실행 시작 시간",
		},
		end_time: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Time",
			description: "실행 종료 시간",
		},
		duration_seconds: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Duration Seconds",
			description: "실행 시간(초)",
		},
		performance: {
			anyOf: [
				{
					$ref: "#/components/schemas/PerformanceMetrics",
				},
				{
					type: "null",
				},
			],
			description: "성과 지표",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Updated At",
			description: "수정 시간",
		},
	},
	type: "object",
	required: ["id", "name", "description", "config", "status", "created_at"],
	title: "BacktestResponse",
	description: "백테스트 응답",
} as const;

export const BacktestStatusSchema = {
	type: "string",
	enum: ["pending", "running", "completed", "failed", "cancelled"],
	title: "BacktestStatus",
	description: "백테스트 상태",
} as const;

export const BacktestUpdateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			description: "백테스트 이름",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "백테스트 설명",
		},
		config: {
			anyOf: [
				{
					$ref: "#/components/schemas/BacktestConfig",
				},
				{
					type: "null",
				},
			],
			description: "백테스트 설정",
		},
	},
	type: "object",
	title: "BacktestUpdate",
	description: "백테스트 수정 요청",
} as const;

export const BalanceSheetDataSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "주식 심볼",
		},
		fiscal_date_ending: {
			type: "string",
			format: "date-time",
			title: "Fiscal Date Ending",
			description: "회계연도 종료일",
		},
		reported_currency: {
			type: "string",
			title: "Reported Currency",
			description: "보고 통화",
			default: "USD",
		},
		total_assets: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Total Assets",
			description: "총자산",
		},
		total_current_assets: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Total Current Assets",
			description: "총 유동자산",
		},
		cash_and_cash_equivalents: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Cash And Cash Equivalents",
			description: "현금 및 현금성자산",
		},
		inventory: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Inventory",
			description: "재고자산",
		},
		current_net_receivables: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Current Net Receivables",
			description: "유동 순매출채권",
		},
		property_plant_equipment: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Property Plant Equipment",
			description: "유형자산",
		},
		goodwill: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Goodwill",
			description: "영업권",
		},
		intangible_assets: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Intangible Assets",
			description: "무형자산",
		},
		total_liabilities: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Total Liabilities",
			description: "총부채",
		},
		total_current_liabilities: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Total Current Liabilities",
			description: "총 유동부채",
		},
		current_accounts_payable: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Current Accounts Payable",
			description: "유동 매입채무",
		},
		current_debt: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Current Debt",
			description: "유동부채",
		},
		long_term_debt: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Long Term Debt",
			description: "장기부채",
		},
		total_shareholder_equity: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Total Shareholder Equity",
			description: "총 자기자본",
		},
		retained_earnings: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Retained Earnings",
			description: "이익잉여금",
		},
		common_stock: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Common Stock",
			description: "보통주",
		},
		treasury_stock: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Treasury Stock",
			description: "자기주식",
		},
		common_stock_shares_outstanding: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Common Stock Shares Outstanding",
			description: "보통주 발행주식수",
		},
	},
	type: "object",
	required: ["symbol", "fiscal_date_ending"],
	title: "BalanceSheetData",
	description: "재무상태표 응답 모델",
} as const;

export const BalanceSheetResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			items: {
				$ref: "#/components/schemas/BalanceSheetData",
			},
			type: "array",
			title: "Data",
			description: "데이터 목록",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
		count: {
			type: "integer",
			title: "Count",
			description: "데이터 개수",
		},
	},
	type: "object",
	required: ["data", "metadata", "count"],
	title: "BalanceSheetResponse",
	description: "재무상태표 조회 응답 스키마",
} as const;

export const BenchmarkCreateSchema = {
	properties: {
		name: {
			type: "string",
			minLength: 3,
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		test_cases: {
			items: {
				$ref: "#/components/schemas/TestCaseCreate",
			},
			type: "array",
			title: "Test Cases",
		},
	},
	type: "object",
	required: ["name", "description"],
	title: "BenchmarkCreate",
	description: "벤치마크 스위트 생성",
} as const;

export const BenchmarkMetricSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
			description: "메트릭 이름",
		},
		threshold: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Threshold",
			description: "임계값",
		},
		higher_is_better: {
			type: "boolean",
			title: "Higher Is Better",
			description: "높을수록 좋은 메트릭 여부",
			default: true,
		},
	},
	type: "object",
	required: ["name"],
	title: "BenchmarkMetric",
	description: "Benchmark metric definition used by evaluation scenarios.",
} as const;

export const BenchmarkResponseSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		test_cases: {
			items: {
				additionalProperties: true,
				type: "object",
			},
			type: "array",
			title: "Test Cases",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
		},
	},
	type: "object",
	required: ["name", "description", "test_cases", "created_at", "updated_at"],
	title: "BenchmarkResponse",
	description: "벤치마크 스위트 응답",
} as const;

export const BenchmarkRunRequestSchema = {
	properties: {
		benchmark_name: {
			type: "string",
			title: "Benchmark Name",
		},
		model_id: {
			type: "string",
			title: "Model Id",
		},
		model_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Model Version",
		},
	},
	type: "object",
	required: ["benchmark_name", "model_id"],
	title: "BenchmarkRunRequest",
	description: "벤치마크 실행 요청",
} as const;

export const BenchmarkRunResponseSchema = {
	properties: {
		benchmark_name: {
			type: "string",
			title: "Benchmark Name",
		},
		model_id: {
			type: "string",
			title: "Model Id",
		},
		model_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Model Version",
		},
		results: {
			additionalProperties: true,
			type: "object",
			title: "Results",
		},
		passed: {
			type: "boolean",
			title: "Passed",
		},
		started_at: {
			type: "string",
			format: "date-time",
			title: "Started At",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
		},
	},
	type: "object",
	required: [
		"benchmark_name",
		"model_id",
		"model_version",
		"results",
		"passed",
		"started_at",
		"completed_at",
	],
	title: "BenchmarkRunResponse",
	description: "벤치마크 실행 결과",
} as const;

export const Body_Auth_forgot_passwordSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
	},
	type: "object",
	required: ["email"],
	title: "Body_Auth-forgot_password",
} as const;

export const Body_Auth_loginSchema = {
	properties: {
		grant_type: {
			anyOf: [
				{
					type: "string",
					pattern: "^password$",
				},
				{
					type: "null",
				},
			],
			title: "Grant Type",
		},
		username: {
			type: "string",
			title: "Username",
		},
		password: {
			type: "string",
			format: "password",
			title: "Password",
		},
		scope: {
			type: "string",
			title: "Scope",
			default: "",
		},
		client_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Client Id",
		},
		client_secret: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			format: "password",
			title: "Client Secret",
		},
	},
	type: "object",
	required: ["username", "password"],
	title: "Body_Auth-login",
} as const;

export const Body_Auth_request_verify_tokenSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
	},
	type: "object",
	required: ["email"],
	title: "Body_Auth-request_verify_token",
} as const;

export const Body_Auth_reset_passwordSchema = {
	properties: {
		token: {
			type: "string",
			title: "Token",
		},
		password: {
			type: "string",
			title: "Password",
		},
	},
	type: "object",
	required: ["token", "password"],
	title: "Body_Auth-reset_password",
} as const;

export const Body_Auth_verifySchema = {
	properties: {
		token: {
			type: "string",
			title: "Token",
		},
	},
	type: "object",
	required: ["token"],
	title: "Body_Auth-verify",
} as const;

export const BuyAndHoldConfigSchema = {
	properties: {
		config_type: {
			type: "string",
			const: "buy_and_hold",
			title: "Config Type",
			description: "설정 타입",
			default: "buy_and_hold",
		},
		lookback_period: {
			type: "integer",
			minimum: 30,
			title: "Lookback Period",
			description: "조회 기간 (일)",
			default: 252,
		},
		min_data_points: {
			type: "integer",
			minimum: 10,
			title: "Min Data Points",
			description: "최소 데이터 포인트",
			default: 30,
		},
		max_position_size: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Max Position Size",
			description: "최대 포지션 크기",
			default: 1,
		},
		stop_loss_pct: {
			anyOf: [
				{
					type: "number",
					maximum: 1,
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Stop Loss Pct",
			description: "손절 비율",
		},
		take_profit_pct: {
			anyOf: [
				{
					type: "number",
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Take Profit Pct",
			description: "익절 비율",
		},
		allocation: {
			additionalProperties: {
				type: "number",
			},
			type: "object",
			title: "Allocation",
			description: "종목별 할당 비율",
		},
	},
	type: "object",
	title: "BuyAndHoldConfig",
	description: "바이앤홀드 전략 설정",
} as const;

export const CacheInfoSchema = {
	properties: {
		cached: {
			type: "boolean",
			title: "Cached",
			description: "캐시된 데이터 여부",
		},
		cache_hit: {
			type: "boolean",
			title: "Cache Hit",
			description: "캐시 히트 여부",
		},
		cache_timestamp: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Cache Timestamp",
			description: "캐시 생성 시간",
		},
		cache_ttl: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Cache Ttl",
			description: "캐시 TTL (초)",
		},
	},
	type: "object",
	required: ["cached", "cache_hit"],
	title: "CacheInfo",
	description: "캐시 정보",
} as const;

export const CacheStatusSnapshotSchema = {
	properties: {
		duckdb_status: {
			type: "string",
			title: "Duckdb Status",
			description: "DuckDB 연결 상태",
		},
		duckdb_row_count: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb Row Count",
			description: "DuckDB 일별 시계열 행 수",
		},
		duckdb_last_updated: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb Last Updated",
			description: "DuckDB 최신 시계열 업데이트 시간",
		},
		mongodb_status: {
			type: "string",
			title: "Mongodb Status",
			description: "MongoDB 연결 상태",
		},
		mongodb_last_event_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Mongodb Last Event At",
			description: "MongoDB에서 관측된 최신 데이터 품질 이벤트 시간",
		},
		notes: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Notes",
			description: "추가 관찰 사항 또는 경고",
		},
	},
	type: "object",
	required: ["duckdb_status", "mongodb_status"],
	title: "CacheStatusSnapshot",
	description: "Current cache backend health snapshot.",
} as const;

export const CashFlowDataSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "주식 심볼",
		},
		fiscal_date_ending: {
			type: "string",
			format: "date-time",
			title: "Fiscal Date Ending",
			description: "회계연도 종료일",
		},
		reported_currency: {
			type: "string",
			title: "Reported Currency",
			description: "보고 통화",
			default: "USD",
		},
		operating_cashflow: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Operating Cashflow",
			description: "영업활동 현금흐름",
		},
		payments_for_operating_activities: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Payments For Operating Activities",
			description: "영업활동 현금지출",
		},
		proceeds_from_operating_activities: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Proceeds From Operating Activities",
			description: "영업활동 현금수입",
		},
		capital_expenditures: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Capital Expenditures",
			description: "자본적지출",
		},
		cashflow_from_investment: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Cashflow From Investment",
			description: "투자활동 현금흐름",
		},
		cashflow_from_financing: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Cashflow From Financing",
			description: "재무활동 현금흐름",
		},
		dividend_payments: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dividend Payments",
			description: "배당금 지급",
		},
		payments_for_repurchase_of_common_stock: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Payments For Repurchase Of Common Stock",
			description: "자기주식 취득지출",
		},
		change_in_cash_and_cash_equivalents: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Change In Cash And Cash Equivalents",
			description: "현금 및 현금성자산 변동",
		},
	},
	type: "object",
	required: ["symbol", "fiscal_date_ending"],
	title: "CashFlowData",
	description: "현금흐름표 응답 모델",
} as const;

export const CashFlowResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			items: {
				$ref: "#/components/schemas/CashFlowData",
			},
			type: "array",
			title: "Data",
			description: "데이터 목록",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
		count: {
			type: "integer",
			title: "Count",
			description: "데이터 개수",
		},
	},
	type: "object",
	required: ["data", "metadata", "count"],
	title: "CashFlowResponse",
	description: "현금흐름표 조회 응답 스키마",
} as const;

export const ChatOpsRequestSchema = {
	properties: {
		question: {
			type: "string",
			title: "Question",
			description: "사용자 질문 또는 명령",
		},
		user_roles: {
			items: {
				type: "string",
			},
			type: "array",
			title: "User Roles",
			description: "요청을 수행하는 사용자의 역할 목록",
		},
		channel: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Channel",
			description: "질문이 발생한 채널(Slack, Console 등)",
		},
		session_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Session Id",
			description: "세션 ID (멀티턴 대화)",
		},
		include_history: {
			type: "boolean",
			title: "Include History",
			description: "대화 히스토리 포함 여부",
			default: true,
		},
	},
	type: "object",
	required: ["question"],
	title: "ChatOpsRequest",
	description: "Request payload for ChatOps interactions.",
} as const;

export const ChatOpsResponseSchema = {
	properties: {
		answer: {
			type: "string",
			title: "Answer",
			description: "사용자에게 제공되는 요약 응답",
		},
		used_tools: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Used Tools",
			description: "실행된 ChatOps 툴 목록",
		},
		denied_tools: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Denied Tools",
			description: "권한 부족으로 실행되지 않은 툴 목록",
		},
		cache_status: {
			anyOf: [
				{
					$ref: "#/components/schemas/CacheStatusSnapshot",
				},
				{
					type: "null",
				},
			],
			description: "캐시 및 저장소 상태 스냅샷",
		},
		data_quality: {
			anyOf: [
				{
					$ref: "#/components/schemas/DataQualitySummary",
				},
				{
					type: "null",
				},
			],
			description: "데이터 품질 센티널 요약",
		},
		recent_failures: {
			items: {
				$ref: "#/components/schemas/FailureInsight",
			},
			type: "array",
			title: "Recent Failures",
			description: "최근 운영 실패 목록",
		},
		external_services: {
			additionalProperties: true,
			type: "object",
			title: "External Services",
			description: "외부 서비스 상태",
		},
	},
	type: "object",
	required: ["answer"],
	title: "ChatOpsResponse",
	description: "Response payload returned by the ChatOps agent.",
} as const;

export const ChecklistStatusSchema = {
	type: "string",
	enum: ["pending", "passed", "failed"],
	title: "ChecklistStatus",
	description: "Approval checklist states.",
} as const;

export const ChecklistUpdateRequestSchema = {
	properties: {
		stage: {
			anyOf: [
				{
					$ref: "#/components/schemas/ModelStage",
				},
				{
					type: "null",
				},
			],
		},
		checklist: {
			items: {
				$ref: "#/components/schemas/DeploymentChecklistItem",
			},
			type: "array",
			title: "Checklist",
		},
		approved_by: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Approved By",
		},
		approval_notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Approval Notes",
		},
	},
	type: "object",
	required: ["checklist"],
	title: "ChecklistUpdateRequest",
} as const;

export const CompanyOverviewDataSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "주식 심볼",
		},
		name: {
			type: "string",
			title: "Name",
			description: "회사명",
		},
		exchange: {
			type: "string",
			title: "Exchange",
			description: "거래소",
		},
		sector: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Sector",
			description: "섹터",
		},
		industry: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Industry",
			description: "산업",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "회사 설명",
		},
		currency: {
			type: "string",
			title: "Currency",
			description: "통화",
			default: "USD",
		},
		country: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Country",
			description: "국가",
		},
		fiscal_year_end: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Fiscal Year End",
			description: "회계연도 종료월",
		},
		latest_quarter: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Latest Quarter",
			description: "최근 분기",
		},
		market_capitalization: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Market Capitalization",
			description: "시가총액",
		},
		ebitda: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Ebitda",
			description: "EBITDA",
		},
		pe_ratio: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Pe Ratio",
			description: "PER",
		},
		peg_ratio: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Peg Ratio",
			description: "PEG 비율",
		},
		book_value: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Book Value",
			description: "장부가치",
		},
		dividend_per_share: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dividend Per Share",
			description: "주당 배당금",
		},
		dividend_yield: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dividend Yield",
			description: "배당 수익률 (%)",
		},
		eps: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Eps",
			description: "주당 순이익",
		},
		revenue_per_share_ttm: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Revenue Per Share Ttm",
			description: "주당 매출(TTM)",
		},
		profit_margin: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Profit Margin",
			description: "순이익률 (%)",
		},
		operating_margin_ttm: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Operating Margin Ttm",
			description: "영업이익률(TTM) (%)",
		},
		return_on_assets_ttm: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Return On Assets Ttm",
			description: "총자산수익률(TTM) (%)",
		},
		return_on_equity_ttm: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Return On Equity Ttm",
			description: "자기자본수익률(TTM) (%)",
		},
		revenue_ttm: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Revenue Ttm",
			description: "매출(TTM)",
		},
		gross_profit_ttm: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Gross Profit Ttm",
			description: "매출총이익(TTM)",
		},
		fifty_two_week_high: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Fifty Two Week High",
			description: "52주 최고가",
		},
		fifty_two_week_low: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Fifty Two Week Low",
			description: "52주 최저가",
		},
		fifty_day_moving_average: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Fifty Day Moving Average",
			description: "50일 이동평균",
		},
		two_hundred_day_moving_average: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Two Hundred Day Moving Average",
			description: "200일 이동평균",
		},
		shares_outstanding: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Shares Outstanding",
			description: "발행주식수",
		},
		beta: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Beta",
			description: "베타",
		},
		analyst_target_price: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Analyst Target Price",
			description: "목표 주가",
		},
	},
	type: "object",
	required: ["symbol", "name", "exchange"],
	title: "CompanyOverviewData",
	description: "기업 개요 응답 모델",
} as const;

export const CompanyOverviewResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			$ref: "#/components/schemas/CompanyOverviewData",
			description: "데이터",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
	},
	type: "object",
	required: ["data", "metadata"],
	title: "CompanyOverviewResponse",
	description: "기업 개요 조회 응답 스키마",
} as const;

export const ComplianceStatusSchema = {
	type: "string",
	enum: ["passed", "warning", "failed"],
	title: "ComplianceStatus",
	description: "Compliance outcome for evaluation.",
} as const;

export const ConfidenceLevelSchema = {
	type: "string",
	enum: ["high", "medium", "low"],
	title: "ConfidenceLevel",
	description: "신뢰도 수준",
} as const;

export const CryptoHistoricalDataResponseSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
		},
		market: {
			type: "string",
			title: "Market",
		},
		data: {
			items: {
				additionalProperties: true,
				type: "object",
			},
			type: "array",
			title: "Data",
		},
		count: {
			type: "integer",
			title: "Count",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
		},
		frequency: {
			type: "string",
			title: "Frequency",
		},
	},
	type: "object",
	required: ["symbol", "market", "data", "count", "frequency"],
	title: "CryptoHistoricalDataResponse",
} as const;

export const DashboardSummarySchema = {
	properties: {
		user_id: {
			type: "string",
			title: "User Id",
			description: "사용자 ID",
		},
		portfolio: {
			$ref: "#/components/schemas/PortfolioSummary",
			description: "포트폴리오 정보",
		},
		strategies: {
			$ref: "#/components/schemas/StrategySummary",
			description: "전략 정보",
		},
		recent_activity: {
			$ref: "#/components/schemas/RecentActivity",
			description: "최근 활동",
		},
		data_quality: {
			anyOf: [
				{
					$ref: "#/components/schemas/DataQualitySummary",
				},
				{
					type: "null",
				},
			],
			description: "데이터 품질 센티널 요약",
		},
	},
	type: "object",
	required: ["user_id", "portfolio", "strategies", "recent_activity"],
	title: "DashboardSummary",
	description: "대시보드 요약 데이터.",
} as const;

export const DashboardSummaryResponseSchema = {
	properties: {
		data: {
			$ref: "#/components/schemas/DashboardSummary",
			description: "대시보드 데이터",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
			default: "대시보드 요약 조회 성공",
		},
	},
	type: "object",
	required: ["data"],
	title: "DashboardSummaryResponse",
	description: "대시보드 요약 응답.",
} as const;

export const DataQualityAlertSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		data_type: {
			type: "string",
			title: "Data Type",
			description: "데이터 타입",
		},
		occurred_at: {
			type: "string",
			format: "date-time",
			title: "Occurred At",
			description: "이상 발생 시각",
		},
		severity: {
			$ref: "#/components/schemas/DataQualitySeverity",
			description: "심각도",
		},
		iso_score: {
			type: "number",
			title: "Iso Score",
			description: "Isolation Forest 점수",
		},
		prophet_score: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Prophet Score",
			description: "Prophet 기반 잔차 점수",
		},
		price_change_pct: {
			type: "number",
			title: "Price Change Pct",
			description: "전일 대비 변동률",
		},
		volume_z_score: {
			type: "number",
			title: "Volume Z Score",
			description: "거래량 Z-Score",
		},
		message: {
			type: "string",
			title: "Message",
			description: "알림 메시지",
		},
	},
	type: "object",
	required: [
		"symbol",
		"data_type",
		"occurred_at",
		"severity",
		"iso_score",
		"price_change_pct",
		"volume_z_score",
		"message",
	],
	title: "DataQualityAlert",
	description: "데이터 품질 이상 알림.",
} as const;

export const DataQualityInfoSchema = {
	properties: {
		quality_score: {
			type: "string",
			title: "Quality Score",
			description: "품질 점수 (0-100)",
		},
		last_updated: {
			type: "string",
			format: "date-time",
			title: "Last Updated",
			description: "마지막 업데이트 시간",
		},
		data_source: {
			type: "string",
			title: "Data Source",
			description: "데이터 출처",
		},
		confidence_level: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Confidence Level",
			description: "신뢰도 수준",
		},
	},
	type: "object",
	required: ["quality_score", "last_updated", "data_source"],
	title: "DataQualityInfo",
	description: "데이터 품질 정보",
} as const;

export const DataQualitySeveritySchema = {
	type: "string",
	enum: ["normal", "low", "medium", "high", "critical"],
	title: "DataQualitySeverity",
	description: "데이터 품질 이상 심각도.",
} as const;

export const DataQualitySummarySchema = {
	properties: {
		total_alerts: {
			type: "integer",
			title: "Total Alerts",
			description: "총 이상 건수",
		},
		severity_breakdown: {
			additionalProperties: {
				type: "integer",
			},
			propertyNames: {
				$ref: "#/components/schemas/DataQualitySeverity",
			},
			type: "object",
			title: "Severity Breakdown",
			description: "심각도별 건수",
		},
		last_updated: {
			type: "string",
			format: "date-time",
			title: "Last Updated",
			description: "마지막 업데이트 시각",
		},
		recent_alerts: {
			items: {
				$ref: "#/components/schemas/DataQualityAlert",
			},
			type: "array",
			title: "Recent Alerts",
			description: "최근 이상 목록",
		},
	},
	type: "object",
	required: ["total_alerts", "severity_breakdown", "last_updated"],
	title: "DataQualitySummary",
	description: "데이터 품질 센티널 요약.",
} as const;

export const DataTypeSchema = {
	type: "string",
	enum: ["float", "integer", "string", "boolean", "timestamp"],
	title: "DataType",
	description: "데이터 타입",
} as const;

export const DeploymentChecklistItemSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
			description: "Checklist 항목 이름",
		},
		status: {
			$ref: "#/components/schemas/ChecklistStatus",
			description: "체크 상태",
			default: "pending",
		},
		note: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Note",
			description: "검토 메모",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
			description: "완료 시간",
		},
	},
	type: "object",
	required: ["name"],
	title: "DeploymentChecklistItem",
	description: "Individual checklist item used during approvals.",
} as const;

export const DeploymentCreateSchema = {
	properties: {
		model_name: {
			type: "string",
			minLength: 1,
			title: "Model Name",
		},
		model_version: {
			type: "string",
			minLength: 1,
			title: "Model Version",
		},
		experiment_name: {
			type: "string",
			title: "Experiment Name",
		},
		environment: {
			$ref: "#/components/schemas/DeploymentEnvironment",
		},
		endpoint: {
			type: "string",
			minLength: 1,
			title: "Endpoint",
			description: "Deployment endpoint URL",
		},
		endpoint_config: {
			anyOf: [
				{
					$ref: "#/components/schemas/EndpointConfig",
				},
				{
					type: "null",
				},
			],
		},
		created_by: {
			type: "string",
			title: "Created By",
		},
		deployment_notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Deployment Notes",
		},
	},
	type: "object",
	required: [
		"model_name",
		"model_version",
		"experiment_name",
		"environment",
		"endpoint",
		"created_by",
	],
	title: "DeploymentCreate",
	description: "Create a new model deployment.",
} as const;

export const DeploymentEnvironmentSchema = {
	type: "string",
	enum: ["development", "staging", "production"],
	title: "DeploymentEnvironment",
	description: "Deployment environment enumeration.",
} as const;

export const DeploymentMetricsSchema = {
	properties: {
		request_count: {
			type: "integer",
			title: "Request Count",
			description: "총 요청 수",
			default: 0,
		},
		error_count: {
			type: "integer",
			title: "Error Count",
			description: "에러 수",
			default: 0,
		},
		avg_latency_ms: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Avg Latency Ms",
			description: "평균 응답 시간 (ms)",
		},
		p95_latency_ms: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "P95 Latency Ms",
			description: "P95 응답 시간 (ms)",
		},
		p99_latency_ms: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "P99 Latency Ms",
			description: "P99 응답 시간 (ms)",
		},
		last_updated: {
			type: "string",
			format: "date-time",
			title: "Last Updated",
			description: "마지막 업데이트 시간",
		},
	},
	type: "object",
	title: "DeploymentMetrics",
	description: "Deployment monitoring metrics.",
} as const;

export const DeploymentResponseSchema = {
	properties: {
		_id: {
			type: "string",
			title: "Id",
		},
		model_name: {
			type: "string",
			title: "Model Name",
		},
		model_version: {
			type: "string",
			title: "Model Version",
		},
		experiment_name: {
			type: "string",
			title: "Experiment Name",
		},
		status: {
			$ref: "#/components/schemas/DeploymentStatus",
		},
		environment: {
			$ref: "#/components/schemas/DeploymentEnvironment",
		},
		endpoint: {
			type: "string",
			title: "Endpoint",
		},
		endpoint_config: {
			anyOf: [
				{
					$ref: "#/components/schemas/EndpointConfig",
				},
				{
					type: "null",
				},
			],
		},
		health_status: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Health Status",
		},
		metrics: {
			anyOf: [
				{
					$ref: "#/components/schemas/DeploymentMetrics",
				},
				{
					type: "null",
				},
			],
		},
		created_by: {
			type: "string",
			title: "Created By",
		},
		deployed_at: {
			type: "string",
			format: "date-time",
			title: "Deployed At",
		},
		terminated_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Terminated At",
		},
		rollback_from: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Rollback From",
		},
		deployment_notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Deployment Notes",
		},
		error_message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Error Message",
		},
	},
	type: "object",
	required: [
		"_id",
		"model_name",
		"model_version",
		"experiment_name",
		"status",
		"environment",
		"endpoint",
		"endpoint_config",
		"health_status",
		"metrics",
		"created_by",
		"deployed_at",
		"terminated_at",
		"rollback_from",
		"deployment_notes",
		"error_message",
	],
	title: "DeploymentResponse",
	description: "Deployment response schema.",
} as const;

export const DeploymentStatusSchema = {
	type: "string",
	enum: [
		"pending",
		"validating",
		"deploying",
		"active",
		"failed",
		"rollback",
		"terminated",
	],
	title: "DeploymentStatus",
	description: "Deployment status enumeration.",
} as const;

export const DeploymentUpdateSchema = {
	properties: {
		status: {
			anyOf: [
				{
					$ref: "#/components/schemas/DeploymentStatus",
				},
				{
					type: "null",
				},
			],
		},
		health_status: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Health Status",
			description: "Health check status (healthy, degraded, unhealthy)",
		},
		metrics: {
			anyOf: [
				{
					$ref: "#/components/schemas/DeploymentMetrics",
				},
				{
					type: "null",
				},
			],
		},
		endpoint: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Endpoint",
		},
		error_message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Error Message",
		},
	},
	type: "object",
	title: "DeploymentUpdate",
	description: "Update deployment status and metrics.",
} as const;

export const DetailedMetricsSchema = {
	properties: {
		confusion_matrix: {
			items: {
				items: {
					type: "integer",
				},
				type: "array",
			},
			type: "array",
			title: "Confusion Matrix",
			description: "혼동 행렬",
		},
		class_labels: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Class Labels",
			description: "클래스 라벨",
		},
		roc_curve: {
			anyOf: [
				{
					additionalProperties: {
						items: {
							type: "number",
						},
						type: "array",
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Roc Curve",
			description: "ROC 커브 (fpr, tpr, thresholds)",
		},
		precision_recall_curve: {
			anyOf: [
				{
					additionalProperties: {
						items: {
							type: "number",
						},
						type: "array",
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Precision Recall Curve",
			description: "PR 커브 (precision, recall, thresholds)",
		},
		accuracy: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Accuracy",
			description: "정확도",
		},
		precision: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Precision",
			description: "정밀도",
		},
		recall: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Recall",
			description: "재현율",
		},
		f1_score: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "F1 Score",
			description: "F1 점수",
		},
		auc_roc: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Auc Roc",
			description: "AUC-ROC",
		},
	},
	type: "object",
	title: "DetailedMetrics",
	description: "Detailed evaluation metrics for single job.",
} as const;

export const DriftEventCreateSchema = {
	properties: {
		model_name: {
			type: "string",
			title: "Model Name",
		},
		version: {
			type: "string",
			title: "Version",
		},
		severity: {
			$ref: "#/components/schemas/DriftSeverity",
		},
		metric_name: {
			type: "string",
			title: "Metric Name",
		},
		metric_value: {
			type: "number",
			title: "Metric Value",
		},
		threshold: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Threshold",
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
		},
		remediation_action: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Remediation Action",
		},
	},
	type: "object",
	required: [
		"model_name",
		"version",
		"severity",
		"metric_name",
		"metric_value",
	],
	title: "DriftEventCreate",
} as const;

export const DriftEventResponseSchema = {
	properties: {
		model_name: {
			type: "string",
			title: "Model Name",
		},
		version: {
			type: "string",
			title: "Version",
		},
		detected_at: {
			type: "string",
			format: "date-time",
			title: "Detected At",
		},
		severity: {
			$ref: "#/components/schemas/DriftSeverity",
		},
		metric_name: {
			type: "string",
			title: "Metric Name",
		},
		metric_value: {
			type: "number",
			title: "Metric Value",
		},
		threshold: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Threshold",
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
		},
		remediation_action: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Remediation Action",
		},
	},
	type: "object",
	required: [
		"model_name",
		"version",
		"detected_at",
		"severity",
		"metric_name",
		"metric_value",
		"threshold",
		"message",
		"remediation_action",
	],
	title: "DriftEventResponse",
} as const;

export const DriftSeveritySchema = {
	type: "string",
	enum: ["low", "medium", "high"],
	title: "DriftSeverity",
	description: "Severity flag for drift events.",
} as const;

export const EarningsDataSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "주식 심볼",
		},
		fiscal_date_ending: {
			type: "string",
			format: "date-time",
			title: "Fiscal Date Ending",
			description: "회계연도 종료일",
		},
		reported_date: {
			type: "string",
			format: "date-time",
			title: "Reported Date",
			description: "발표일",
		},
		reported_eps: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Reported Eps",
			description: "발표 EPS",
		},
		estimated_eps: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Estimated Eps",
			description: "예상 EPS",
		},
		surprise: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Surprise",
			description: "서프라이즈",
		},
		surprise_percentage: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Surprise Percentage",
			description: "서프라이즈 비율 (%)",
		},
	},
	type: "object",
	required: ["symbol", "fiscal_date_ending", "reported_date"],
	title: "EarningsData",
	description: "실적 발표 응답 모델",
} as const;

export const EarningsResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			items: {
				$ref: "#/components/schemas/EarningsData",
			},
			type: "array",
			title: "Data",
			description: "데이터 목록",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
		count: {
			type: "integer",
			title: "Count",
			description: "데이터 개수",
		},
	},
	type: "object",
	required: ["data", "metadata", "count"],
	title: "EarningsResponse",
	description: "실적 데이터 조회 응답 스키마",
} as const;

export const EconomicCalendarSchema = {
	properties: {
		events: {
			items: {
				$ref: "#/components/schemas/EconomicEvent",
			},
			type: "array",
			title: "Events",
			description: "이벤트 목록",
		},
	},
	type: "object",
	required: ["events"],
	title: "EconomicCalendar",
	description: "경제 캘린더.",
} as const;

export const EconomicCalendarResponseSchema = {
	properties: {
		data: {
			$ref: "#/components/schemas/EconomicCalendar",
			description: "경제 캘린더",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
			default: "경제 캘린더 조회 성공",
		},
	},
	type: "object",
	required: ["data"],
	title: "EconomicCalendarResponse",
	description: "경제 캘린더 응답.",
} as const;

export const EconomicEventSchema = {
	properties: {
		event_name: {
			type: "string",
			title: "Event Name",
			description: "이벤트명",
		},
		country: {
			type: "string",
			title: "Country",
			description: "국가",
		},
		importance: {
			$ref: "#/components/schemas/ImportanceLevel",
			description: "중요도",
		},
		actual: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Actual",
			description: "실제값",
		},
		forecast: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Forecast",
			description: "예상값",
		},
		previous: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Previous",
			description: "이전값",
		},
		release_time: {
			type: "string",
			format: "date-time",
			title: "Release Time",
			description: "발표 시간",
		},
		currency: {
			type: "string",
			title: "Currency",
			description: "통화",
		},
	},
	type: "object",
	required: ["event_name", "country", "importance", "release_time", "currency"],
	title: "EconomicEvent",
	description: "경제 이벤트.",
} as const;

export const EndpointConfigSchema = {
	properties: {
		instances: {
			type: "integer",
			minimum: 1,
			title: "Instances",
			description: "인스턴스 수",
			default: 1,
		},
		instance_type: {
			type: "string",
			title: "Instance Type",
			description: "인스턴스 타입",
			default: "standard",
		},
		auto_scaling: {
			type: "boolean",
			title: "Auto Scaling",
			description: "자동 스케일링 여부",
			default: false,
		},
		min_instances: {
			anyOf: [
				{
					type: "integer",
					minimum: 1,
				},
				{
					type: "null",
				},
			],
			title: "Min Instances",
			description: "최소 인스턴스 수",
		},
		max_instances: {
			anyOf: [
				{
					type: "integer",
					minimum: 1,
				},
				{
					type: "null",
				},
			],
			title: "Max Instances",
			description: "최대 인스턴스 수",
		},
	},
	type: "object",
	title: "EndpointConfig",
	description: "Deployment endpoint configuration.",
} as const;

export const EvaluationReportSchema = {
	properties: {
		scenario_name: {
			type: "string",
			title: "Scenario Name",
		},
		candidate_model_name: {
			type: "string",
			title: "Candidate Model Name",
		},
		candidate_model_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Candidate Model Version",
		},
		compliance: {
			$ref: "#/components/schemas/ComplianceStatus",
		},
		metrics: {
			items: {
				$ref: "#/components/schemas/app__models__evaluation__MetricComparison",
			},
			type: "array",
			title: "Metrics",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
		},
	},
	type: "object",
	required: [
		"scenario_name",
		"candidate_model_name",
		"candidate_model_version",
		"compliance",
		"metrics",
	],
	title: "EvaluationReport",
} as const;

export const EvaluationRequestSchema = {
	properties: {
		scenario_name: {
			type: "string",
			title: "Scenario Name",
		},
		candidate_backtest_id: {
			type: "string",
			title: "Candidate Backtest Id",
		},
		candidate_model_name: {
			type: "string",
			title: "Candidate Model Name",
		},
		candidate_model_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Candidate Model Version",
		},
		candidate_metrics: {
			additionalProperties: {
				type: "number",
			},
			type: "object",
			title: "Candidate Metrics",
		},
		explainability: {
			items: {
				$ref: "#/components/schemas/ExplainabilityArtifact",
			},
			type: "array",
			title: "Explainability",
		},
		compliance_inputs: {
			additionalProperties: true,
			type: "object",
			title: "Compliance Inputs",
		},
	},
	type: "object",
	required: ["scenario_name", "candidate_backtest_id", "candidate_model_name"],
	title: "EvaluationRequest",
} as const;

export const EvaluationRunResponseSchema = {
	properties: {
		scenario_name: {
			type: "string",
			title: "Scenario Name",
		},
		candidate_backtest_id: {
			type: "string",
			title: "Candidate Backtest Id",
		},
		candidate_model_name: {
			type: "string",
			title: "Candidate Model Name",
		},
		candidate_model_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Candidate Model Version",
		},
		status: {
			$ref: "#/components/schemas/EvaluationStatus",
		},
		started_at: {
			type: "string",
			format: "date-time",
			title: "Started At",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
		},
		summary: {
			anyOf: [
				{
					$ref: "#/components/schemas/EvaluationSummary",
				},
				{
					type: "null",
				},
			],
		},
		explainability: {
			items: {
				$ref: "#/components/schemas/ExplainabilityArtifact",
			},
			type: "array",
			title: "Explainability",
		},
		compliance_checks: {
			additionalProperties: true,
			type: "object",
			title: "Compliance Checks",
		},
	},
	type: "object",
	required: [
		"scenario_name",
		"candidate_backtest_id",
		"candidate_model_name",
		"candidate_model_version",
		"status",
		"started_at",
		"completed_at",
		"summary",
		"explainability",
		"compliance_checks",
	],
	title: "EvaluationRunResponse",
} as const;

export const EvaluationStatusSchema = {
	type: "string",
	enum: ["pending", "running", "completed", "failed"],
	title: "EvaluationStatus",
	description: "Status flag for evaluation runs.",
} as const;

export const EvaluationSummarySchema = {
	properties: {
		metrics: {
			items: {
				$ref: "#/components/schemas/app__models__evaluation__MetricComparison",
			},
			type: "array",
			title: "Metrics",
			description: "메트릭 비교",
		},
		compliance: {
			$ref: "#/components/schemas/ComplianceStatus",
			description: "컴플라이언스 결과",
			default: "passed",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
			description: "메모",
		},
		detailed_metrics: {
			anyOf: [
				{
					$ref: "#/components/schemas/DetailedMetrics",
				},
				{
					type: "null",
				},
			],
			description: "상세 평가 메트릭",
		},
	},
	type: "object",
	title: "EvaluationSummary",
	description: "Summary of evaluation outputs.",
} as const;

export const ExecutionListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		executions: {
			items: {
				$ref: "#/components/schemas/ExecutionResponse",
			},
			type: "array",
			title: "Executions",
			description: "실행 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["executions", "total"],
	title: "ExecutionListResponse",
	description: "Execution list response",
} as const;

export const ExecutionResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "실행 ID",
		},
		strategy_id: {
			type: "string",
			title: "Strategy Id",
			description: "전략 ID",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
			description: "전략 이름",
		},
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		signal_type: {
			$ref: "#/components/schemas/SignalType",
		},
		signal_strength: {
			type: "number",
			title: "Signal Strength",
			description: "신호 강도",
		},
		price: {
			type: "number",
			title: "Price",
			description: "가격",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "실행 시간",
		},
		metadata: {
			additionalProperties: true,
			type: "object",
			title: "Metadata",
			description: "메타데이터",
		},
		backtest_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Backtest Id",
			description: "백테스트 ID",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"strategy_id",
		"strategy_name",
		"symbol",
		"signal_type",
		"signal_strength",
		"price",
		"timestamp",
		"created_at",
	],
	title: "ExecutionResponse",
	description: "Execution response",
} as const;

export const ExecutiveSummarySchema = {
	properties: {
		title: {
			type: "string",
			title: "Title",
			description: "리포트 제목",
		},
		overview: {
			type: "string",
			maxLength: 500,
			minLength: 50,
			title: "Overview",
			description: "백테스트 개요 (2-3 문장)",
		},
		key_findings: {
			items: {
				type: "string",
			},
			type: "array",
			maxItems: 5,
			minItems: 3,
			title: "Key Findings",
			description: "핵심 발견사항 (3-5개)",
		},
		recommendation: {
			$ref: "#/components/schemas/ReportRecommendation",
			description: "최종 추천 액션",
		},
		confidence_level: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Confidence Level",
			description: "추천 신뢰도 (0-1)",
		},
	},
	type: "object",
	required: [
		"title",
		"overview",
		"key_findings",
		"recommendation",
		"confidence_level",
	],
	title: "ExecutiveSummary",
	description: "임원용 요약",
} as const;

export const ExperimentCreateSchema = {
	properties: {
		name: {
			type: "string",
			minLength: 3,
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		owner: {
			type: "string",
			title: "Owner",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
		},
		metadata: {
			additionalProperties: true,
			type: "object",
			title: "Metadata",
		},
	},
	type: "object",
	required: ["name", "description", "owner"],
	title: "ExperimentCreate",
} as const;

export const ExperimentResponseSchema = {
	properties: {
		id: {
			type: "string",
			title: "Id",
			description: "MongoDB ObjectId",
		},
		name: {
			type: "string",
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		owner: {
			type: "string",
			title: "Owner",
		},
		status: {
			$ref: "#/components/schemas/ExperimentStatus",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
		},
		metadata: {
			additionalProperties: true,
			type: "object",
			title: "Metadata",
		},
		metrics: {
			additionalProperties: {
				type: "number",
			},
			type: "object",
			title: "Metrics",
			description: "실험 메트릭",
		},
		duration_seconds: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Duration Seconds",
			description: "실행 시간 (초)",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
		},
	},
	type: "object",
	required: [
		"id",
		"name",
		"description",
		"owner",
		"status",
		"tags",
		"metadata",
		"created_at",
		"updated_at",
	],
	title: "ExperimentResponse",
} as const;

export const ExperimentStatusSchema = {
	type: "string",
	enum: ["active", "archived"],
	title: "ExperimentStatus",
	description: "Lifecycle state for an experiment.",
} as const;

export const ExperimentUpdateSchema = {
	properties: {
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
		},
		owner: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Owner",
		},
		status: {
			anyOf: [
				{
					$ref: "#/components/schemas/ExperimentStatus",
				},
				{
					type: "null",
				},
			],
		},
		tags: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Tags",
		},
		metadata: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Metadata",
		},
	},
	type: "object",
	title: "ExperimentUpdate",
} as const;

export const ExplainabilityArtifactSchema = {
	properties: {
		feature_name: {
			type: "string",
			title: "Feature Name",
			description: "피처 이름",
		},
		importance: {
			type: "number",
			title: "Importance",
			description: "중요도",
		},
		impact_direction: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Impact Direction",
			description: "영향 방향 (+/-)",
		},
	},
	type: "object",
	required: ["feature_name", "importance"],
	title: "ExplainabilityArtifact",
	description: "Explainability artifact reference (e.g., SHAP).",
} as const;

export const FailureInsightSchema = {
	properties: {
		source: {
			type: "string",
			title: "Source",
			description: "실패 이벤트 출처 (예: backtest, data_quality)",
		},
		identifier: {
			type: "string",
			title: "Identifier",
			description: "이벤트 식별자 또는 연관 객체",
		},
		occurred_at: {
			type: "string",
			format: "date-time",
			title: "Occurred At",
			description: "실패가 발생한 시간",
		},
		severity: {
			anyOf: [
				{
					$ref: "#/components/schemas/DataQualitySeverity",
				},
				{
					type: "null",
				},
			],
			description: "데이터 품질 이벤트의 심각도",
		},
		message: {
			type: "string",
			title: "Message",
			description: "사용자에게 노출할 메시지",
		},
		metadata: {
			additionalProperties: true,
			type: "object",
			title: "Metadata",
			description: "추가 컨텍스트 메타데이터",
		},
	},
	type: "object",
	required: ["source", "identifier", "occurred_at", "message"],
	title: "FailureInsight",
	description:
		"Represents a recent operational failure surfaced to the operator.",
} as const;

export const FairnessAuditRequestSchema = {
	properties: {
		model_id: {
			type: "string",
			title: "Model Id",
		},
		protected_attributes: {
			items: {
				type: "string",
			},
			type: "array",
			minItems: 1,
			title: "Protected Attributes",
			description: "보호 속성 (예: gender, race, age)",
		},
		fairness_threshold: {
			type: "number",
			maximum: 1,
			exclusiveMinimum: 0,
			title: "Fairness Threshold",
			default: 0.8,
		},
	},
	type: "object",
	required: ["model_id", "protected_attributes"],
	title: "FairnessAuditRequest",
	description: "공정성 감사 요청",
} as const;

export const FairnessReportResponseSchema = {
	properties: {
		model_id: {
			type: "string",
			title: "Model Id",
		},
		protected_attributes: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Protected Attributes",
		},
		group_metrics: {
			additionalProperties: {
				additionalProperties: {
					type: "number",
				},
				type: "object",
			},
			type: "object",
			title: "Group Metrics",
		},
		overall_fairness_score: {
			type: "number",
			title: "Overall Fairness Score",
		},
		passed: {
			type: "boolean",
			title: "Passed",
		},
		recommendations: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Recommendations",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
	},
	type: "object",
	required: [
		"model_id",
		"protected_attributes",
		"group_metrics",
		"overall_fairness_score",
		"passed",
		"recommendations",
		"created_at",
	],
	title: "FairnessReportResponse",
	description: "공정성 감사 보고서",
} as const;

export const FeatureContributionSchema = {
	properties: {
		feature: {
			type: "string",
			title: "Feature",
			description: "Feature name",
		},
		value: {
			type: "number",
			title: "Value",
			description: "Computed feature value",
		},
		weight: {
			type: "number",
			title: "Weight",
			description: "Relative weight applied in scoring",
		},
		impact: {
			type: "number",
			title: "Impact",
			description: "Signed contribution to probability",
		},
		direction: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Direction",
			description:
				"Human readable description of how the feature influences the score",
		},
	},
	type: "object",
	required: ["feature", "value", "weight", "impact"],
	title: "FeatureContribution",
	description: "Contribution details for a single engineered feature.",
} as const;

export const FeatureCreateSchema = {
	properties: {
		feature_name: {
			type: "string",
			maxLength: 100,
			minLength: 3,
			title: "Feature Name",
			description: "피처 이름",
		},
		feature_type: {
			$ref: "#/components/schemas/FeatureType",
		},
		data_type: {
			$ref: "#/components/schemas/DataType",
		},
		description: {
			type: "string",
			maxLength: 1000,
			minLength: 10,
			title: "Description",
			description: "설명",
		},
		owner: {
			type: "string",
			title: "Owner",
			description: "담당자 ID",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
		transformation: {
			anyOf: [
				{
					$ref: "#/components/schemas/FeatureTransformation",
				},
				{
					type: "null",
				},
			],
			description: "변환 로직",
		},
		validation_rules: {
			items: {
				$ref: "#/components/schemas/FeatureValidation",
			},
			type: "array",
			title: "Validation Rules",
			description: "검증 규칙",
		},
		upstream_features: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Upstream Features",
			description: "상위 의존 피처 이름 목록",
		},
		duckdb_table: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb Table",
			description: "DuckDB 테이블",
		},
		duckdb_view: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb View",
			description: "DuckDB 뷰",
		},
	},
	type: "object",
	required: [
		"feature_name",
		"feature_type",
		"data_type",
		"description",
		"owner",
	],
	title: "FeatureCreate",
	description: "피처 생성 요청",
} as const;

export const FeatureLineageNodeSchema = {
	properties: {
		feature_name: {
			type: "string",
			title: "Feature Name",
			description: "피처 이름",
		},
		version: {
			type: "string",
			title: "Version",
			description: "피처 버전",
		},
		relationship: {
			type: "string",
			title: "Relationship",
			description: "관계 (depends_on, derived_from, used_by)",
		},
	},
	type: "object",
	required: ["feature_name", "version", "relationship"],
	title: "FeatureLineageNode",
	description: "피처 계보 노드 (upstream/downstream)",
} as const;

export const FeatureLineageResponseSchema = {
	properties: {
		feature_name: {
			type: "string",
			title: "Feature Name",
			description: "피처 이름",
		},
		current_version: {
			type: "string",
			title: "Current Version",
			description: "현재 버전",
		},
		upstream_features: {
			items: {
				$ref: "#/components/schemas/FeatureLineageNode",
			},
			type: "array",
			title: "Upstream Features",
			description: "상위 의존 피처 (이 피처가 사용하는 피처들)",
		},
		downstream_features: {
			items: {
				$ref: "#/components/schemas/FeatureLineageNode",
			},
			type: "array",
			title: "Downstream Features",
			description: "하위 파생 피처 (이 피처를 사용하는 피처들)",
		},
		all_upstream: {
			items: {
				type: "string",
			},
			type: "array",
			title: "All Upstream",
			description: "전체 상위 의존성",
		},
		all_downstream: {
			items: {
				type: "string",
			},
			type: "array",
			title: "All Downstream",
			description: "전체 하위 의존성",
		},
		direct_dependents_count: {
			type: "integer",
			title: "Direct Dependents Count",
			description: "직접 의존하는 피처 수",
		},
		total_dependents_count: {
			type: "integer",
			title: "Total Dependents Count",
			description: "전체 의존하는 피처 수",
		},
	},
	type: "object",
	required: [
		"feature_name",
		"current_version",
		"upstream_features",
		"downstream_features",
		"all_upstream",
		"all_downstream",
		"direct_dependents_count",
		"total_dependents_count",
	],
	title: "FeatureLineageResponse",
	description: "피처 계보 응답",
} as const;

export const FeatureListResponseSchema = {
	properties: {
		features: {
			items: {
				$ref: "#/components/schemas/FeatureResponse",
			},
			type: "array",
			title: "Features",
			description: "피처 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "전체 개수",
		},
	},
	type: "object",
	required: ["features", "total"],
	title: "FeatureListResponse",
	description: "피처 목록 응답",
} as const;

export const FeatureResponseSchema = {
	properties: {
		id: {
			type: "string",
			title: "Id",
			description: "MongoDB ObjectId",
		},
		feature_name: {
			type: "string",
			title: "Feature Name",
			description: "피처 이름",
		},
		current_version: {
			type: "string",
			title: "Current Version",
			description: "현재 버전",
		},
		feature_type: {
			$ref: "#/components/schemas/FeatureType",
		},
		data_type: {
			$ref: "#/components/schemas/DataType",
		},
		status: {
			$ref: "#/components/schemas/FeatureStatus",
			description: "상태",
		},
		description: {
			type: "string",
			title: "Description",
			description: "설명",
		},
		owner: {
			type: "string",
			title: "Owner",
			description: "담당자",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
		upstream_features: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Upstream Features",
			description: "상위 의존 피처",
		},
		downstream_features: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Downstream Features",
			description: "하위 파생 피처",
		},
		transformation: {
			anyOf: [
				{
					$ref: "#/components/schemas/FeatureTransformation",
				},
				{
					type: "null",
				},
			],
			description: "변환 로직",
		},
		validation_rules: {
			items: {
				$ref: "#/components/schemas/FeatureValidation",
			},
			type: "array",
			title: "Validation Rules",
			description: "검증 규칙",
		},
		duckdb_table: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb Table",
			description: "DuckDB 테이블",
		},
		duckdb_view: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb View",
			description: "DuckDB 뷰",
		},
		statistics: {
			anyOf: [
				{
					$ref: "#/components/schemas/FeatureStatistics",
				},
				{
					type: "null",
				},
			],
			description: "피처 통계 정보",
		},
		usage_count: {
			type: "integer",
			title: "Usage Count",
			description: "사용 횟수",
		},
		last_used_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Last Used At",
			description: "마지막 사용 시간",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
			description: "업데이트 시간",
		},
		deprecated_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Deprecated At",
			description: "폐기 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"feature_name",
		"current_version",
		"feature_type",
		"data_type",
		"status",
		"description",
		"owner",
		"tags",
		"upstream_features",
		"downstream_features",
		"validation_rules",
		"usage_count",
		"created_at",
		"updated_at",
	],
	title: "FeatureResponse",
	description: "피처 조회 응답",
} as const;

export const FeatureStatisticsSchema = {
	properties: {
		mean: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Mean",
			description: "평균값",
		},
		median: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Median",
			description: "중앙값",
		},
		std: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Std",
			description: "표준편차",
		},
		min: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Min",
			description: "최소값",
		},
		max: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Max",
			description: "최대값",
		},
		missing_ratio: {
			type: "number",
			title: "Missing Ratio",
			description: "결측치 비율 (0.0 ~ 1.0)",
			default: 0,
		},
		distribution: {
			items: {
				additionalProperties: true,
				type: "object",
			},
			type: "array",
			title: "Distribution",
			description: "분포 데이터 [{value, count}, ...]",
		},
		calculated_at: {
			type: "string",
			format: "date-time",
			title: "Calculated At",
			description: "계산 시간",
		},
	},
	type: "object",
	title: "FeatureStatistics",
	description: "피처 통계 정보 (Phase 4 Enhancement)",
} as const;

export const FeatureStatisticsResponseSchema = {
	properties: {
		feature_name: {
			type: "string",
			title: "Feature Name",
		},
		feature_version: {
			type: "string",
			title: "Feature Version",
		},
		statistics: {
			additionalProperties: {
				anyOf: [
					{
						type: "number",
					},
					{
						type: "integer",
					},
				],
			},
			type: "object",
			title: "Statistics",
		},
		generated_at: {
			type: "string",
			format: "date-time",
			title: "Generated At",
		},
	},
	type: "object",
	required: ["feature_name", "feature_version", "statistics", "generated_at"],
	title: "FeatureStatisticsResponse",
	description: "피처 통계 응답",
	example: {
		feature_name: "rsi_14",
		feature_version: "2.1.0",
		generated_at: "2025-01-15T10:00:00Z",
		statistics: {
			count: 1000,
			max: 95,
			mean: 52.3,
			min: 10,
			std: 15.2,
		},
	},
} as const;

export const FeatureStatusSchema = {
	type: "string",
	enum: ["active", "deprecated", "archived", "draft"],
	title: "FeatureStatus",
	description: "피처 상태",
} as const;

export const FeatureTransformationSchema = {
	properties: {
		transformation_type: {
			type: "string",
			title: "Transformation Type",
			description: "변환 타입 (sql, python, spark)",
		},
		code: {
			type: "string",
			title: "Code",
			description: "변환 코드",
		},
		parameters: {
			additionalProperties: true,
			type: "object",
			title: "Parameters",
			description: "파라미터",
		},
	},
	type: "object",
	required: ["transformation_type", "code"],
	title: "FeatureTransformation",
	description: "피처 변환 로직",
} as const;

export const FeatureTypeSchema = {
	type: "string",
	enum: [
		"technical_indicator",
		"fundamental",
		"sentiment",
		"macro_economic",
		"derived",
		"raw",
	],
	title: "FeatureType",
	description: "피처 타입",
} as const;

export const FeatureUpdateSchema = {
	properties: {
		description: {
			anyOf: [
				{
					type: "string",
					minLength: 10,
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "설명",
		},
		tags: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Tags",
			description: "태그",
		},
		status: {
			anyOf: [
				{
					$ref: "#/components/schemas/FeatureStatus",
				},
				{
					type: "null",
				},
			],
			description: "상태",
		},
		transformation: {
			anyOf: [
				{
					$ref: "#/components/schemas/FeatureTransformation",
				},
				{
					type: "null",
				},
			],
			description: "변환 로직",
		},
		validation_rules: {
			anyOf: [
				{
					items: {
						$ref: "#/components/schemas/FeatureValidation",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Validation Rules",
			description: "검증 규칙",
		},
		duckdb_table: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb Table",
			description: "DuckDB 테이블",
		},
		duckdb_view: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Duckdb View",
			description: "DuckDB 뷰",
		},
	},
	type: "object",
	title: "FeatureUpdate",
	description: "피처 업데이트 요청",
} as const;

export const FeatureUsageCreateSchema = {
	properties: {
		feature_name: {
			type: "string",
			title: "Feature Name",
			description: "피처 이름",
		},
		feature_version: {
			type: "string",
			title: "Feature Version",
			description: "피처 버전",
		},
		used_by_model: {
			type: "string",
			title: "Used By Model",
			description: "모델 이름",
		},
		model_version: {
			type: "string",
			title: "Model Version",
			description: "모델 버전",
		},
		environment: {
			type: "string",
			title: "Environment",
			description: "환경",
		},
		feature_importance: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Feature Importance",
			description: "피처 중요도",
		},
		correlation_with_target: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Correlation With Target",
			description: "타겟 상관계수",
		},
		execution_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Execution Id",
			description: "실행 ID",
		},
		execution_duration_ms: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Execution Duration Ms",
			description: "실행 시간",
		},
	},
	type: "object",
	required: [
		"feature_name",
		"feature_version",
		"used_by_model",
		"model_version",
		"environment",
	],
	title: "FeatureUsageCreate",
	description: "피처 사용 기록 생성",
} as const;

export const FeatureUsageResponseSchema = {
	properties: {
		id: {
			type: "string",
			title: "Id",
			description: "MongoDB ObjectId",
		},
		feature_name: {
			type: "string",
			title: "Feature Name",
			description: "피처 이름",
		},
		feature_version: {
			type: "string",
			title: "Feature Version",
			description: "피처 버전",
		},
		used_by_model: {
			type: "string",
			title: "Used By Model",
			description: "모델 이름",
		},
		model_version: {
			type: "string",
			title: "Model Version",
			description: "모델 버전",
		},
		environment: {
			type: "string",
			title: "Environment",
			description: "환경",
		},
		feature_importance: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Feature Importance",
			description: "피처 중요도",
		},
		correlation_with_target: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Correlation With Target",
			description: "타겟 상관계수",
		},
		execution_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Execution Id",
			description: "실행 ID",
		},
		execution_duration_ms: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Execution Duration Ms",
			description: "실행 시간",
		},
		usage_timestamp: {
			type: "string",
			format: "date-time",
			title: "Usage Timestamp",
			description: "사용 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"feature_name",
		"feature_version",
		"used_by_model",
		"model_version",
		"environment",
		"usage_timestamp",
	],
	title: "FeatureUsageResponse",
	description: "피처 사용 기록 응답",
} as const;

export const FeatureValidationSchema = {
	properties: {
		rule_type: {
			type: "string",
			title: "Rule Type",
			description: "규칙 타입 (range, null_check, outlier)",
		},
		parameters: {
			additionalProperties: true,
			type: "object",
			title: "Parameters",
			description: "규칙 파라미터",
		},
		is_blocking: {
			type: "boolean",
			title: "Is Blocking",
			description: "블로킹 여부",
			default: false,
		},
	},
	type: "object",
	required: ["rule_type", "parameters"],
	title: "FeatureValidation",
	description: "피처 검증 규칙",
} as const;

export const FeatureVersionCreateSchema = {
	properties: {
		version: {
			type: "string",
			title: "Version",
			description: "버전 (Semantic Versioning)",
		},
		changelog: {
			type: "string",
			minLength: 10,
			title: "Changelog",
			description: "변경 사항",
		},
		breaking_changes: {
			type: "boolean",
			title: "Breaking Changes",
			description: "호환성 깨짐 여부",
			default: false,
		},
		created_by: {
			type: "string",
			title: "Created By",
			description: "생성자 ID",
		},
		transformation_snapshot: {
			anyOf: [
				{
					$ref: "#/components/schemas/FeatureTransformation",
				},
				{
					type: "null",
				},
			],
			description: "변환 로직 스냅샷",
		},
		validation_snapshot: {
			items: {
				$ref: "#/components/schemas/FeatureValidation",
			},
			type: "array",
			title: "Validation Snapshot",
			description: "검증 규칙 스냅샷",
		},
	},
	type: "object",
	required: ["version", "changelog", "created_by"],
	title: "FeatureVersionCreate",
	description: "피처 버전 생성 요청",
} as const;

export const FeatureVersionListResponseSchema = {
	properties: {
		versions: {
			items: {
				$ref: "#/components/schemas/FeatureVersionResponse",
			},
			type: "array",
			title: "Versions",
			description: "버전 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "전체 개수",
		},
	},
	type: "object",
	required: ["versions", "total"],
	title: "FeatureVersionListResponse",
	description: "피처 버전 목록 응답",
} as const;

export const FeatureVersionResponseSchema = {
	properties: {
		id: {
			type: "string",
			title: "Id",
			description: "MongoDB ObjectId",
		},
		feature_name: {
			type: "string",
			title: "Feature Name",
			description: "피처 이름",
		},
		version: {
			type: "string",
			title: "Version",
			description: "버전",
		},
		changelog: {
			type: "string",
			title: "Changelog",
			description: "변경 사항",
		},
		breaking_changes: {
			type: "boolean",
			title: "Breaking Changes",
			description: "호환성 깨짐 여부",
		},
		transformation_snapshot: {
			anyOf: [
				{
					$ref: "#/components/schemas/FeatureTransformation",
				},
				{
					type: "null",
				},
			],
			description: "변환 로직 스냅샷",
		},
		validation_snapshot: {
			items: {
				$ref: "#/components/schemas/FeatureValidation",
			},
			type: "array",
			title: "Validation Snapshot",
			description: "검증 규칙 스냅샷",
		},
		created_by: {
			type: "string",
			title: "Created By",
			description: "생성자",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		is_rolled_back: {
			type: "boolean",
			title: "Is Rolled Back",
			description: "롤백 여부",
		},
		rolled_back_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Rolled Back At",
			description: "롤백 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"feature_name",
		"version",
		"changelog",
		"breaking_changes",
		"validation_snapshot",
		"created_by",
		"created_at",
		"is_rolled_back",
	],
	title: "FeatureVersionResponse",
	description: "피처 버전 응답",
} as const;

export const ForecastPercentileBandSchema = {
	properties: {
		percentile: {
			type: "integer",
			maximum: 100,
			minimum: 0,
			title: "Percentile",
			description: "Percentile value (0-100)",
		},
		projected_value: {
			type: "number",
			title: "Projected Value",
			description: "Projected portfolio value at percentile",
		},
	},
	type: "object",
	required: ["percentile", "projected_value"],
	title: "ForecastPercentileBand",
	description: "Single percentile projection for a future portfolio value.",
} as const;

export const GeneratedStrategyConfigSchema = {
	properties: {
		strategy_name: {
			type: "string",
			maxLength: 100,
			minLength: 3,
			title: "Strategy Name",
			description: "전략 이름",
		},
		strategy_type: {
			type: "string",
			title: "Strategy Type",
			description: "전략 타입 (기술적 지표 기반)",
		},
		description: {
			type: "string",
			maxLength: 500,
			minLength: 50,
			title: "Description",
			description: "전략 설명",
		},
		indicators: {
			items: {
				$ref: "#/components/schemas/IndicatorRecommendation",
			},
			type: "array",
			maxItems: 5,
			minItems: 1,
			title: "Indicators",
			description: "사용된 지표 목록 (1-5개)",
		},
		parameters: {
			additionalProperties: true,
			type: "object",
			title: "Parameters",
			description: "전략 파라미터",
		},
		parameter_validations: {
			items: {
				$ref: "#/components/schemas/ParameterValidation",
			},
			type: "array",
			title: "Parameter Validations",
			description: "파라미터 검증 결과",
		},
		entry_conditions: {
			type: "string",
			maxLength: 300,
			minLength: 50,
			title: "Entry Conditions",
			description: "진입 조건 설명",
		},
		exit_conditions: {
			type: "string",
			maxLength: 300,
			minLength: 50,
			title: "Exit Conditions",
			description: "청산 조건 설명",
		},
		risk_management: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Risk Management",
			description: "리스크 관리 규칙",
		},
		expected_performance: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Expected Performance",
			description: "예상 성과 (과거 유사 전략 기반)",
		},
	},
	type: "object",
	required: [
		"strategy_name",
		"strategy_type",
		"description",
		"indicators",
		"parameters",
		"parameter_validations",
		"entry_conditions",
		"exit_conditions",
	],
	title: "GeneratedStrategyConfig",
	description: "생성된 전략 설정",
} as const;

export const HTTPValidationErrorSchema = {
	properties: {
		detail: {
			items: {
				$ref: "#/components/schemas/ValidationError",
			},
			type: "array",
			title: "Detail",
		},
	},
	type: "object",
	title: "HTTPValidationError",
} as const;

export const HealthResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
		},
		service: {
			type: "string",
			title: "Service",
		},
		version: {
			type: "string",
			title: "Version",
		},
		uptime: {
			type: "number",
			title: "Uptime",
		},
		checks: {
			additionalProperties: {
				additionalProperties: true,
				type: "object",
			},
			type: "object",
			title: "Checks",
		},
	},
	type: "object",
	required: ["status", "timestamp", "service", "version", "uptime", "checks"],
	title: "HealthResponse",
	description: "Health check response model.",
} as const;

export const HistoricalDataResponseSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
		},
		data: {
			items: {
				additionalProperties: true,
				type: "object",
			},
			type: "array",
			title: "Data",
		},
		count: {
			type: "integer",
			title: "Count",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
		},
		frequency: {
			type: "string",
			title: "Frequency",
		},
	},
	type: "object",
	required: ["symbol", "data", "count", "frequency"],
	title: "HistoricalDataResponse",
} as const;

export const HumanApprovalRequestSchema = {
	properties: {
		requires_approval: {
			type: "boolean",
			title: "Requires Approval",
			description: "승인 필요 여부",
		},
		approval_reasons: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Approval Reasons",
			description: "승인이 필요한 이유 (위험 요소 등)",
		},
		suggested_modifications: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Suggested Modifications",
			description: "수정 제안 사항",
		},
		approval_deadline: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Approval Deadline",
			description: "승인 기한",
		},
	},
	type: "object",
	required: ["requires_approval"],
	title: "HumanApprovalRequest",
	description: "휴먼 승인 요청",
} as const;

export const ImportanceLevelSchema = {
	type: "string",
	enum: ["high", "medium", "low"],
	title: "ImportanceLevel",
	description: "중요도 레벨.",
} as const;

export const IncomeStatementDataSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "주식 심볼",
		},
		fiscal_date_ending: {
			type: "string",
			format: "date-time",
			title: "Fiscal Date Ending",
			description: "회계연도 종료일",
		},
		reported_currency: {
			type: "string",
			title: "Reported Currency",
			description: "보고 통화",
			default: "USD",
		},
		total_revenue: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Total Revenue",
			description: "총 매출",
		},
		cost_of_revenue: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Cost Of Revenue",
			description: "매출원가",
		},
		gross_profit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Gross Profit",
			description: "매출총이익",
		},
		research_and_development: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Research And Development",
			description: "연구개발비",
		},
		selling_general_administrative: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Selling General Administrative",
			description: "판매관리비",
		},
		operating_expenses: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Operating Expenses",
			description: "영업비용",
		},
		operating_income: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Operating Income",
			description: "영업이익",
		},
		interest_income: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Interest Income",
			description: "이자수익",
		},
		interest_expense: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Interest Expense",
			description: "이자비용",
		},
		income_before_tax: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Income Before Tax",
			description: "세전이익",
		},
		income_tax_expense: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Income Tax Expense",
			description: "법인세비용",
		},
		net_income: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Net Income",
			description: "순이익",
		},
		basic_shares_outstanding: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Basic Shares Outstanding",
			description: "기본 주식수",
		},
		diluted_shares_outstanding: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Diluted Shares Outstanding",
			description: "희석 주식수",
		},
		basic_eps: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Basic Eps",
			description: "기본 주당순이익",
		},
		diluted_eps: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Diluted Eps",
			description: "희석 주당순이익",
		},
	},
	type: "object",
	required: ["symbol", "fiscal_date_ending"],
	title: "IncomeStatementData",
	description: "손익계산서 응답 모델",
} as const;

export const IncomeStatementResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			items: {
				$ref: "#/components/schemas/IncomeStatementData",
			},
			type: "array",
			title: "Data",
			description: "데이터 목록",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
		count: {
			type: "integer",
			title: "Count",
			description: "데이터 개수",
		},
	},
	type: "object",
	required: ["data", "metadata", "count"],
	title: "IncomeStatementResponse",
	description: "손익계산서 조회 응답 스키마",
} as const;

export const IndicatorDataPointSchema = {
	properties: {
		date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Date",
			description: "날짜 (daily 이상)",
		},
		timestamp: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Timestamp",
			description: "타임스탬프 (intraday)",
		},
		value: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Value",
			description: "지표 값",
		},
		values: {
			anyOf: [
				{
					additionalProperties: {
						type: "string",
					},
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Values",
			description: "복수 지표 값들",
		},
	},
	type: "object",
	title: "IndicatorDataPoint",
	description: "지표 데이터 포인트",
} as const;

export const IndicatorListResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Data",
			description:
				"지표 카테고리별 목록 (moving_averages, oscillators, volatility, volume)",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
	},
	type: "object",
	required: ["metadata"],
	title: "IndicatorListResponse",
	description: "지원하는 지표 목록 응답",
} as const;

export const IndicatorRecommendationSchema = {
	properties: {
		indicator_name: {
			type: "string",
			title: "Indicator Name",
			description: "지표 이름 (예: RSI, MACD, Bollinger Bands)",
		},
		indicator_type: {
			type: "string",
			title: "Indicator Type",
			description: "지표 유형 (momentum, trend, volatility 등)",
		},
		confidence: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Confidence",
			description: "추천 신뢰도",
		},
		rationale: {
			type: "string",
			maxLength: 300,
			minLength: 50,
			title: "Rationale",
			description: "추천 이유",
		},
		suggested_parameters: {
			additionalProperties: true,
			type: "object",
			title: "Suggested Parameters",
			description: "제안된 기본 파라미터",
		},
		similarity_score: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Similarity Score",
			description: "쿼리와의 유사도 점수 (임베딩 기반)",
		},
	},
	type: "object",
	required: [
		"indicator_name",
		"indicator_type",
		"confidence",
		"rationale",
		"similarity_score",
	],
	title: "IndicatorRecommendation",
	description: "지표 추천",
} as const;

export const IndicatorSearchRequestSchema = {
	properties: {
		query: {
			type: "string",
			maxLength: 200,
			minLength: 3,
			title: "Query",
			description: "검색 쿼리",
		},
		top_k: {
			type: "integer",
			maximum: 10,
			minimum: 1,
			title: "Top K",
			description: "상위 K개 결과",
			default: 5,
		},
		filters: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Filters",
			description: "필터 (유형, 카테고리 등)",
		},
	},
	type: "object",
	required: ["query"],
	title: "IndicatorSearchRequest",
	description: "지표 검색 요청 (임베딩 기반)",
} as const;

export const IndicatorSearchResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
			description: "응답 상태",
		},
		indicators: {
			items: {
				$ref: "#/components/schemas/IndicatorRecommendation",
			},
			type: "array",
			title: "Indicators",
			description: "검색된 지표 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 검색 결과 수",
		},
		query_embedding: {
			anyOf: [
				{
					items: {
						type: "number",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Query Embedding",
			description: "쿼리 임베딩 (디버깅용)",
		},
	},
	type: "object",
	required: ["status", "indicators", "total"],
	title: "IndicatorSearchResponse",
	description: "지표 검색 응답",
} as const;

export const IntentTypeSchema = {
	type: "string",
	enum: [
		"create_strategy",
		"modify_strategy",
		"explain_strategy",
		"recommend_parameters",
		"optimize_strategy",
	],
	title: "IntentType",
	description: "사용자 의도 유형",
} as const;

export const LoginResponseSchema = {
	properties: {
		access_token: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Access Token",
		},
		refresh_token: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Refresh Token",
		},
		token_type: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Token Type",
		},
		user_info: {
			$ref: "#/components/schemas/UserResponse",
		},
	},
	type: "object",
	required: ["user_info"],
	title: "LoginResponse",
	example: {
		access_token: "string",
		refresh_token: "string",
		token_type: "bearer",
		user_info: {
			email: "user@example.com",
			full_name: "string",
			id: "string",
			is_active: true,
			is_superuser: false,
			is_verified: false,
		},
	},
} as const;

export const MLSignalInsightSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "Instrument symbol",
		},
		as_of: {
			type: "string",
			format: "date-time",
			title: "As Of",
			description: "Timestamp of the latest observation",
		},
		lookback_days: {
			type: "integer",
			minimum: 5,
			title: "Lookback Days",
			description: "Lookback window used for features",
		},
		probability: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Probability",
			description: "Probability of positive move",
		},
		confidence: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Confidence",
			description: "Confidence proxy from data depth",
		},
		recommendation: {
			$ref: "#/components/schemas/SignalRecommendation",
			description: "Recommendation bucket derived from probability",
		},
		feature_contributions: {
			items: {
				$ref: "#/components/schemas/FeatureContribution",
			},
			type: "array",
			title: "Feature Contributions",
			description: "Ordered list of feature contributions",
		},
		top_signals: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Top Signals",
			description: "Human readable highlights from the model",
		},
	},
	type: "object",
	required: [
		"symbol",
		"as_of",
		"lookback_days",
		"probability",
		"confidence",
		"recommendation",
	],
	title: "MLSignalInsight",
	description: "Inference payload produced by the ML signal service.",
} as const;

export const MLSignalResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			$ref: "#/components/schemas/MLSignalInsight",
			description: "Signal inference payload",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "Response metadata",
		},
	},
	type: "object",
	required: ["data", "metadata"],
	title: "MLSignalResponse",
	description: "API response wrapper for ML signal insights.",
} as const;

export const MarketContextSchema = {
	properties: {
		regime_analysis: {
			type: "string",
			maxLength: 300,
			title: "Regime Analysis",
			description: "시장 레짐 분석 (Phase 1 D2)",
		},
		ml_signal_confidence: {
			anyOf: [
				{
					type: "number",
					maximum: 1,
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Ml Signal Confidence",
			description: "ML 시그널 신뢰도 (Phase 1 D1)",
		},
		forecast_outlook: {
			anyOf: [
				{
					type: "string",
					maxLength: 200,
				},
				{
					type: "null",
				},
			],
			title: "Forecast Outlook",
			description: "포트폴리오 예측 전망 (Phase 1 D3)",
		},
		external_factors: {
			items: {
				type: "string",
			},
			type: "array",
			maxItems: 5,
			title: "External Factors",
			description: "외부 요인 (뉴스, 경제 지표 등)",
		},
	},
	type: "object",
	required: ["regime_analysis"],
	title: "MarketContext",
	description: "시장 맥락 (Phase 1 통합)",
} as const;

export const MarketRegimeResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			$ref: "#/components/schemas/MarketRegimeSnapshot",
			description: "Regime snapshot",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "Response metadata",
		},
	},
	type: "object",
	required: ["data", "metadata"],
	title: "MarketRegimeResponse",
	description: "API response for regime classification.",
} as const;

export const MarketRegimeSnapshotSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "Instrument symbol for the regime classification",
		},
		as_of: {
			type: "string",
			format: "date-time",
			title: "As Of",
			description: "Reference timestamp for the snapshot",
		},
		lookback_days: {
			type: "integer",
			minimum: 5,
			title: "Lookback Days",
			description: "Lookback window in days",
		},
		regime: {
			$ref: "#/components/schemas/MarketRegimeType",
			description: "Detected market regime",
		},
		confidence: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Confidence",
			description: "Confidence of classification",
		},
		probabilities: {
			additionalProperties: {
				type: "number",
			},
			propertyNames: {
				$ref: "#/components/schemas/MarketRegimeType",
			},
			type: "object",
			title: "Probabilities",
			description: "Probability distribution across regimes",
		},
		metrics: {
			$ref: "#/components/schemas/RegimeMetrics",
			description: "Supporting quantitative metrics",
		},
		notes: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Notes",
			description: "Notable drivers or anomalies",
		},
	},
	type: "object",
	required: [
		"symbol",
		"as_of",
		"lookback_days",
		"regime",
		"confidence",
		"metrics",
	],
	title: "MarketRegimeSnapshot",
	description: "Market regime classification snapshot.",
} as const;

export const MarketRegimeTypeSchema = {
	type: "string",
	enum: ["bullish", "bearish", "volatile", "sideways"],
	title: "MarketRegimeType",
	description: "Supported market regimes for classification.",
} as const;

export const MetadataInfoSchema = {
	properties: {
		data_quality: {
			$ref: "#/components/schemas/DataQualityInfo",
		},
		cache_info: {
			$ref: "#/components/schemas/CacheInfo",
		},
		processing_time_ms: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Processing Time Ms",
			description: "처리 시간 (밀리초)",
		},
	},
	type: "object",
	required: ["data_quality", "cache_info"],
	title: "MetadataInfo",
	description: "메타데이터 정보",
} as const;

export const MetricSnapshotSchema = {
	properties: {
		metric_name: {
			type: "string",
			title: "Metric Name",
			description: "메트릭 이름",
		},
		value: {
			type: "number",
			title: "Value",
			description: "메트릭 값",
		},
		dataset: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dataset",
			description: "평가 데이터셋",
		},
	},
	type: "object",
	required: ["metric_name", "value"],
	title: "MetricSnapshot",
	description: "Metric snapshot stored alongside runs/versions.",
} as const;

export const ModelComparisonRequestSchema = {
	properties: {
		versions: {
			items: {
				type: "string",
			},
			type: "array",
			minItems: 1,
			title: "Versions",
		},
	},
	type: "object",
	required: ["versions"],
	title: "ModelComparisonRequest",
} as const;

export const ModelComparisonResponseSchema = {
	properties: {
		model_name: {
			type: "string",
			title: "Model Name",
		},
		comparisons: {
			items: {
				$ref: "#/components/schemas/app__schemas__model_lifecycle__MetricComparison",
			},
			type: "array",
			title: "Comparisons",
		},
	},
	type: "object",
	required: ["model_name", "comparisons"],
	title: "ModelComparisonResponse",
} as const;

export const ModelInfoResponseSchema = {
	properties: {
		version: {
			type: "string",
			title: "Version",
		},
		model_type: {
			type: "string",
			title: "Model Type",
		},
		created_at: {
			type: "string",
			title: "Created At",
		},
		metrics: {
			additionalProperties: {
				type: "number",
			},
			type: "object",
			title: "Metrics",
		},
		feature_count: {
			type: "integer",
			title: "Feature Count",
		},
		num_iterations: {
			type: "integer",
			title: "Num Iterations",
		},
		feature_names: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Feature Names",
		},
	},
	type: "object",
	required: [
		"version",
		"model_type",
		"created_at",
		"metrics",
		"feature_count",
		"num_iterations",
		"feature_names",
	],
	title: "ModelInfoResponse",
	description: "Response schema for model info.",
} as const;

export const ModelListResponseSchema = {
	properties: {
		models: {
			items: {
				$ref: "#/components/schemas/ModelInfoResponse",
			},
			type: "array",
			title: "Models",
		},
		total: {
			type: "integer",
			title: "Total",
		},
		latest_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Latest Version",
		},
	},
	type: "object",
	required: ["models", "total", "latest_version"],
	title: "ModelListResponse",
	description: "Response schema for model list.",
} as const;

export const ModelStageSchema = {
	type: "string",
	enum: ["experimental", "staging", "production", "archived"],
	title: "ModelStage",
	description: "Deployment stage for a model version.",
} as const;

export const ModelVersionCreateSchema = {
	properties: {
		model_name: {
			type: "string",
			title: "Model Name",
		},
		version: {
			type: "string",
			title: "Version",
		},
		run_id: {
			type: "string",
			title: "Run Id",
		},
		stage: {
			$ref: "#/components/schemas/ModelStage",
			default: "experimental",
		},
		metrics: {
			items: {
				$ref: "#/components/schemas/MetricSnapshot",
			},
			type: "array",
			title: "Metrics",
		},
		approval_checklist: {
			items: {
				$ref: "#/components/schemas/DeploymentChecklistItem",
			},
			type: "array",
			title: "Approval Checklist",
		},
	},
	type: "object",
	required: ["model_name", "version", "run_id"],
	title: "ModelVersionCreate",
} as const;

export const ModelVersionResponseSchema = {
	properties: {
		model_name: {
			type: "string",
			title: "Model Name",
		},
		version: {
			type: "string",
			title: "Version",
		},
		run_id: {
			type: "string",
			title: "Run Id",
		},
		stage: {
			$ref: "#/components/schemas/ModelStage",
		},
		approval_checklist: {
			items: {
				$ref: "#/components/schemas/DeploymentChecklistItem",
			},
			type: "array",
			title: "Approval Checklist",
		},
		metrics: {
			items: {
				$ref: "#/components/schemas/MetricSnapshot",
			},
			type: "array",
			title: "Metrics",
		},
		approved_by: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Approved By",
		},
		approved_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Approved At",
		},
		rollback_notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Rollback Notes",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
		},
	},
	type: "object",
	required: [
		"model_name",
		"version",
		"run_id",
		"stage",
		"approval_checklist",
		"metrics",
		"approved_by",
		"approved_at",
		"rollback_notes",
		"created_at",
		"updated_at",
	],
	title: "ModelVersionResponse",
} as const;

export const MomentumConfigSchema = {
	properties: {
		config_type: {
			type: "string",
			const: "momentum",
			title: "Config Type",
			description: "설정 타입",
			default: "momentum",
		},
		lookback_period: {
			type: "integer",
			minimum: 30,
			title: "Lookback Period",
			description: "조회 기간 (일)",
			default: 252,
		},
		min_data_points: {
			type: "integer",
			minimum: 10,
			title: "Min Data Points",
			description: "최소 데이터 포인트",
			default: 30,
		},
		max_position_size: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Max Position Size",
			description: "최대 포지션 크기",
			default: 1,
		},
		stop_loss_pct: {
			anyOf: [
				{
					type: "number",
					maximum: 1,
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Stop Loss Pct",
			description: "손절 비율",
		},
		take_profit_pct: {
			anyOf: [
				{
					type: "number",
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Take Profit Pct",
			description: "익절 비율",
		},
		momentum_period: {
			type: "integer",
			maximum: 100,
			minimum: 5,
			title: "Momentum Period",
			description: "모멘텀 계산 기간",
			default: 20,
		},
		buy_threshold: {
			type: "number",
			title: "Buy Threshold",
			description: "매수 신호 임계값",
			default: 0.02,
		},
		sell_threshold: {
			type: "number",
			title: "Sell Threshold",
			description: "매도 신호 임계값",
			default: -0.02,
		},
		volume_filter: {
			type: "boolean",
			title: "Volume Filter",
			description: "거래량 필터 사용 여부",
			default: true,
		},
		min_volume_ratio: {
			type: "number",
			title: "Min Volume Ratio",
			description: "최소 거래량 비율",
			default: 1.5,
		},
		top_n_stocks: {
			type: "integer",
			maximum: 20,
			minimum: 1,
			title: "Top N Stocks",
			description: "상위 N개 종목 선택",
			default: 5,
		},
		rebalance_frequency: {
			type: "string",
			title: "Rebalance Frequency",
			description: "리밸런싱 주기",
			default: "monthly",
		},
	},
	type: "object",
	title: "MomentumConfig",
	description: "모멘텀 전략 설정",
} as const;

export const NarrativeReportResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
			description: "응답 상태",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
		},
		data: {
			anyOf: [
				{
					$ref: "#/components/schemas/BacktestNarrativeReport",
				},
				{
					type: "null",
				},
			],
			description: "리포트 데이터",
		},
		processing_time_ms: {
			type: "number",
			title: "Processing Time Ms",
			description: "처리 시간 (밀리초)",
		},
		cached: {
			type: "boolean",
			title: "Cached",
			description: "캐시된 결과 여부",
			default: false,
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
	},
	type: "object",
	required: ["status", "message", "processing_time_ms"],
	title: "NarrativeReportResponse",
	description: "내러티브 리포트 응답",
} as const;

export const NewsArticleSchema = {
	properties: {
		title: {
			type: "string",
			title: "Title",
			description: "제목",
		},
		summary: {
			type: "string",
			title: "Summary",
			description: "요약",
		},
		source: {
			type: "string",
			title: "Source",
			description: "출처",
		},
		url: {
			type: "string",
			title: "Url",
			description: "URL",
		},
		published_at: {
			type: "string",
			format: "date-time",
			title: "Published At",
			description: "발행 시간",
		},
		sentiment: {
			$ref: "#/components/schemas/SentimentType",
			description: "감정",
		},
		relevance_score: {
			type: "number",
			title: "Relevance Score",
			description: "관련도 점수",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
			description: "관련 심볼들",
		},
	},
	type: "object",
	required: [
		"title",
		"summary",
		"source",
		"url",
		"published_at",
		"sentiment",
		"relevance_score",
		"symbols",
	],
	title: "NewsArticle",
	description: "뉴스 기사.",
} as const;

export const NewsFeedSchema = {
	properties: {
		articles: {
			items: {
				$ref: "#/components/schemas/NewsArticle",
			},
			type: "array",
			title: "Articles",
			description: "기사 목록",
		},
	},
	type: "object",
	required: ["articles"],
	title: "NewsFeed",
	description: "뉴스 피드.",
} as const;

export const NewsFeedResponseSchema = {
	properties: {
		data: {
			$ref: "#/components/schemas/NewsFeed",
			description: "뉴스 피드",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
			default: "뉴스 피드 조회 성공",
		},
	},
	type: "object",
	required: ["data"],
	title: "NewsFeedResponse",
	description: "뉴스 피드 응답.",
} as const;

export const OAuth2AuthorizeResponseSchema = {
	properties: {
		authorization_url: {
			type: "string",
			title: "Authorization Url",
		},
	},
	type: "object",
	required: ["authorization_url"],
	title: "OAuth2AuthorizeResponse",
	example: {
		authorization_url:
			"https://example.com/oauth/authorize?response_type=code&client_id=your_client_id&redirect_uri=your_redirect_uri&scope=your_scope",
	},
} as const;

export const OAuthAccountSchema = {
	properties: {
		oauth_name: {
			type: "string",
			title: "Oauth Name",
		},
		access_token: {
			type: "string",
			title: "Access Token",
		},
		expires_at: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Expires At",
		},
		refresh_token: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Refresh Token",
		},
		account_id: {
			type: "string",
			title: "Account Id",
		},
		account_email: {
			type: "string",
			title: "Account Email",
		},
	},
	type: "object",
	required: ["oauth_name", "access_token", "account_id", "account_email"],
	title: "OAuthAccount",
	description: "Base OAuth account model.",
	example: {
		_id: "string",
		access_token: "string",
		account_email: "user@example.com",
		account_id: "string",
		expires_at: 1234567890,
		oauth_name: "string",
		refresh_token: "string",
	},
} as const;

export const OptimizationProgressSchema = {
	properties: {
		study_name: {
			type: "string",
			title: "Study Name",
		},
		status: {
			type: "string",
			title: "Status",
		},
		trials_completed: {
			type: "integer",
			title: "Trials Completed",
		},
		n_trials: {
			type: "integer",
			title: "N Trials",
		},
		best_value: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Best Value",
		},
		best_params: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Best Params",
		},
		started_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Started At",
		},
		estimated_completion: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Estimated Completion",
		},
		recent_trials: {
			items: {
				$ref: "#/components/schemas/TrialResult",
			},
			type: "array",
			title: "Recent Trials",
		},
	},
	type: "object",
	required: ["study_name", "status", "trials_completed", "n_trials"],
	title: "OptimizationProgress",
	description: "Current optimization study progress.",
} as const;

export const OptimizationRequestSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "Symbol to optimize (e.g., AAPL)",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
			description: "Strategy template name (e.g., RSI)",
		},
		search_space: {
			additionalProperties: {
				$ref: "#/components/schemas/ParameterSpace",
			},
			type: "object",
			title: "Search Space",
			description: "Parameter search space",
		},
		n_trials: {
			type: "integer",
			maximum: 1000,
			minimum: 1,
			title: "N Trials",
			description: "Number of trials",
			default: 100,
		},
		direction: {
			type: "string",
			title: "Direction",
			description: "Optimization direction (maximize/minimize)",
			default: "maximize",
		},
		sampler: {
			type: "string",
			title: "Sampler",
			description: "Optuna sampler: TPE/Random/Grid/CMA-ES",
			default: "TPE",
		},
		objective_metric: {
			type: "string",
			title: "Objective Metric",
			description: "Metric to optimize: sharpe_ratio/return/...",
			default: "sharpe_ratio",
		},
		start_date: {
			type: "string",
			title: "Start Date",
			description: "Backtest start date (YYYY-MM-DD)",
		},
		end_date: {
			type: "string",
			title: "End Date",
			description: "Backtest end date (YYYY-MM-DD)",
		},
		initial_capital: {
			type: "number",
			title: "Initial Capital",
			description: "Starting capital",
			default: 100000,
		},
		study_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Study Name",
			description: "Custom study name (auto-generated if not provided)",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
			description: "Study description or notes",
		},
	},
	type: "object",
	required: [
		"symbol",
		"strategy_name",
		"search_space",
		"start_date",
		"end_date",
	],
	title: "OptimizationRequest",
	description: "Request to start a new optimization study.",
} as const;

export const OptimizationResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
			description: "success/error",
		},
		study_name: {
			type: "string",
			title: "Study Name",
		},
		message: {
			type: "string",
			title: "Message",
		},
		data: {
			anyOf: [
				{
					$ref: "#/components/schemas/OptimizationProgress",
				},
				{
					$ref: "#/components/schemas/OptimizationResult",
				},
				{
					type: "null",
				},
			],
			title: "Data",
		},
	},
	type: "object",
	required: ["status", "study_name", "message"],
	title: "OptimizationResponse",
	description: "Response from optimization endpoint.",
} as const;

export const OptimizationResultSchema = {
	properties: {
		study_name: {
			type: "string",
			title: "Study Name",
		},
		symbol: {
			type: "string",
			title: "Symbol",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
		},
		best_params: {
			additionalProperties: true,
			type: "object",
			title: "Best Params",
		},
		best_value: {
			type: "number",
			title: "Best Value",
		},
		best_trial_number: {
			type: "integer",
			title: "Best Trial Number",
		},
		trials_completed: {
			type: "integer",
			title: "Trials Completed",
		},
		n_trials: {
			type: "integer",
			title: "N Trials",
		},
		direction: {
			type: "string",
			title: "Direction",
		},
		objective_metric: {
			type: "string",
			title: "Objective Metric",
		},
		sharpe_ratio: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Sharpe Ratio",
		},
		total_return: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Total Return",
		},
		max_drawdown: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Max Drawdown",
		},
		win_rate: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Win Rate",
		},
		started_at: {
			type: "string",
			format: "date-time",
			title: "Started At",
		},
		completed_at: {
			type: "string",
			format: "date-time",
			title: "Completed At",
		},
		total_duration_seconds: {
			type: "number",
			title: "Total Duration Seconds",
		},
		top_trials: {
			items: {
				$ref: "#/components/schemas/TrialResult",
			},
			type: "array",
			title: "Top Trials",
			description: "Top 5 trials",
		},
	},
	type: "object",
	required: [
		"study_name",
		"symbol",
		"strategy_name",
		"best_params",
		"best_value",
		"best_trial_number",
		"trials_completed",
		"n_trials",
		"direction",
		"objective_metric",
		"started_at",
		"completed_at",
		"total_duration_seconds",
	],
	title: "OptimizationResult",
	description: "Completed optimization study result.",
} as const;

export const OrderTypeSchema = {
	type: "string",
	enum: ["MARKET", "LIMIT", "STOP", "STOP_LIMIT"],
	title: "OrderType",
	description: "주문 타입",
} as const;

export const ParameterSnapshotSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
			description: "파라미터 이름",
		},
		value: {
			title: "Value",
			description: "파라미터 값",
		},
	},
	type: "object",
	required: ["name", "value"],
	title: "ParameterSnapshot",
	description: "Parameter capture for a run.",
} as const;

export const ParameterSpaceSchema = {
	properties: {
		type: {
			type: "string",
			title: "Type",
			description: "Parameter type: int, float, categorical",
		},
		low: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Low",
			description: "Lower bound for numeric types",
		},
		high: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "High",
			description: "Upper bound for numeric types",
		},
		step: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Step",
			description: "Step size for discrete sampling",
		},
		choices: {
			anyOf: [
				{
					items: {},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Choices",
			description: "Choices for categorical",
		},
		log: {
			type: "boolean",
			title: "Log",
			description: "Use log scale for sampling",
			default: false,
		},
	},
	type: "object",
	required: ["type"],
	title: "ParameterSpace",
	description: "Search space definition for a single parameter.",
} as const;

export const ParameterValidationSchema = {
	properties: {
		parameter_name: {
			type: "string",
			title: "Parameter Name",
			description: "파라미터 이름",
		},
		value: {
			title: "Value",
			description: "파라미터 값",
		},
		is_valid: {
			type: "boolean",
			title: "Is Valid",
			description: "유효성 여부",
		},
		validation_status: {
			$ref: "#/components/schemas/ValidationStatus",
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "검증 메시지 (경고/오류)",
		},
		suggested_value: {
			anyOf: [
				{},
				{
					type: "null",
				},
			],
			title: "Suggested Value",
			description: "제안된 값 (오류 시)",
		},
		value_range: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Value Range",
			description: "허용 범위 (min, max, allowed_values 등)",
		},
	},
	type: "object",
	required: ["parameter_name", "value", "is_valid", "validation_status"],
	title: "ParameterValidation",
	description: "파라미터 검증 결과",
} as const;

export const ParsedIntentSchema = {
	properties: {
		intent_type: {
			$ref: "#/components/schemas/IntentType",
			description: "의도 유형",
		},
		confidence: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Confidence",
			description: "의도 파싱 신뢰도",
		},
		confidence_level: {
			$ref: "#/components/schemas/ConfidenceLevel",
		},
		extracted_entities: {
			additionalProperties: true,
			type: "object",
			title: "Extracted Entities",
			description: "추출된 엔티티 (지표명, 파라미터 등)",
		},
		reasoning: {
			type: "string",
			maxLength: 500,
			minLength: 50,
			title: "Reasoning",
			description: "의도 판단 근거",
		},
	},
	type: "object",
	required: ["intent_type", "confidence", "confidence_level", "reasoning"],
	title: "ParsedIntent",
	description: "파싱된 사용자 의도",
} as const;

export const PerformanceAnalysisSchema = {
	properties: {
		summary: {
			type: "string",
			maxLength: 500,
			title: "Summary",
			description: "성과 요약 (2-3 문장)",
		},
		return_analysis: {
			type: "string",
			maxLength: 300,
			title: "Return Analysis",
			description: "수익률 분석",
		},
		risk_analysis: {
			type: "string",
			maxLength: 300,
			title: "Risk Analysis",
			description: "리스크 분석",
		},
		sharpe_interpretation: {
			type: "string",
			maxLength: 200,
			title: "Sharpe Interpretation",
			description: "샤프 비율 해석",
		},
		drawdown_commentary: {
			type: "string",
			maxLength: 200,
			title: "Drawdown Commentary",
			description: "낙폭 해설",
		},
		trade_statistics_summary: {
			type: "string",
			maxLength: 200,
			title: "Trade Statistics Summary",
			description: "거래 통계 요약",
		},
	},
	type: "object",
	required: [
		"summary",
		"return_analysis",
		"risk_analysis",
		"sharpe_interpretation",
		"drawdown_commentary",
		"trade_statistics_summary",
	],
	title: "PerformanceAnalysis",
	description: "성과 분석",
} as const;

export const PerformanceMetricsSchema = {
	properties: {
		total_return: {
			type: "number",
			title: "Total Return",
			description: "총 수익률",
		},
		annualized_return: {
			type: "number",
			title: "Annualized Return",
			description: "연환산 수익률",
		},
		volatility: {
			type: "number",
			title: "Volatility",
			description: "변동성",
		},
		sharpe_ratio: {
			type: "number",
			title: "Sharpe Ratio",
			description: "샤프 비율",
		},
		max_drawdown: {
			type: "number",
			title: "Max Drawdown",
			description: "최대 낙폭",
		},
		total_trades: {
			type: "integer",
			title: "Total Trades",
			description: "총 거래 수",
		},
		winning_trades: {
			type: "integer",
			title: "Winning Trades",
			description: "승리 거래 수",
		},
		losing_trades: {
			type: "integer",
			title: "Losing Trades",
			description: "패배 거래 수",
		},
		win_rate: {
			type: "number",
			title: "Win Rate",
			description: "승률",
		},
	},
	type: "object",
	required: [
		"total_return",
		"annualized_return",
		"volatility",
		"sharpe_ratio",
		"max_drawdown",
		"total_trades",
		"winning_trades",
		"losing_trades",
		"win_rate",
	],
	title: "PerformanceMetrics",
	description: "성과 지표 내장 모델",
} as const;

export const PerformanceResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "성과 ID",
		},
		strategy_id: {
			type: "string",
			title: "Strategy Id",
			description: "전략 ID",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
			description: "전략 이름",
		},
		total_signals: {
			type: "integer",
			title: "Total Signals",
			description: "총 신호 수",
		},
		buy_signals: {
			type: "integer",
			title: "Buy Signals",
			description: "매수 신호 수",
		},
		sell_signals: {
			type: "integer",
			title: "Sell Signals",
			description: "매도 신호 수",
		},
		hold_signals: {
			type: "integer",
			title: "Hold Signals",
			description: "보유 신호 수",
		},
		total_return: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Total Return",
			description: "총 수익률",
		},
		win_rate: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Win Rate",
			description: "승률",
		},
		avg_return_per_trade: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Avg Return Per Trade",
			description: "거래당 평균 수익률",
		},
		max_drawdown: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Max Drawdown",
			description: "최대 낙폭",
		},
		sharpe_ratio: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Sharpe Ratio",
			description: "샤프 비율",
		},
		calmar_ratio: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Calmar Ratio",
			description: "칼마 비율",
		},
		volatility: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Volatility",
			description: "변동성",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
			description: "시작일",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
			description: "종료일",
		},
		accuracy: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Accuracy",
			description: "정확도",
		},
		avg_signal_strength: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Avg Signal Strength",
			description: "평균 신호 강도",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
			description: "수정 시간",
		},
	},
	type: "object",
	required: [
		"id",
		"strategy_id",
		"strategy_name",
		"total_signals",
		"buy_signals",
		"sell_signals",
		"hold_signals",
		"created_at",
		"updated_at",
	],
	title: "PerformanceResponse",
	description: "Performance response",
} as const;

export const PortfolioDataPointSchema = {
	properties: {
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "시간",
		},
		portfolio_value: {
			type: "number",
			title: "Portfolio Value",
			description: "포트폴리오 가치",
		},
		pnl: {
			type: "number",
			title: "Pnl",
			description: "손익",
		},
		pnl_percentage: {
			type: "number",
			title: "Pnl Percentage",
			description: "손익률",
		},
		benchmark_value: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Benchmark Value",
			description: "벤치마크 가치",
		},
	},
	type: "object",
	required: ["timestamp", "portfolio_value", "pnl", "pnl_percentage"],
	title: "PortfolioDataPoint",
	description: "포트폴리오 데이터 포인트.",
} as const;

export const PortfolioForecastDistributionSchema = {
	properties: {
		as_of: {
			type: "string",
			format: "date-time",
			title: "As Of",
			description: "Timestamp the forecast was generated",
		},
		horizon_days: {
			type: "integer",
			minimum: 1,
			title: "Horizon Days",
			description: "Forecast horizon in days",
		},
		last_portfolio_value: {
			type: "number",
			title: "Last Portfolio Value",
			description: "Most recent observed portfolio value",
		},
		expected_return_pct: {
			type: "number",
			title: "Expected Return Pct",
			description: "Expected return over the horizon (%)",
		},
		expected_volatility_pct: {
			type: "number",
			title: "Expected Volatility Pct",
			description: "Expected volatility over the horizon (%)",
		},
		percentile_bands: {
			items: {
				$ref: "#/components/schemas/ForecastPercentileBand",
			},
			type: "array",
			title: "Percentile Bands",
			description: "Projected percentile bands",
		},
		methodology: {
			type: "string",
			title: "Methodology",
			description: "Shorthand name of the forecasting methodology",
			default: "gaussian_projection",
		},
	},
	type: "object",
	required: [
		"as_of",
		"horizon_days",
		"last_portfolio_value",
		"expected_return_pct",
		"expected_volatility_pct",
		"percentile_bands",
	],
	title: "PortfolioForecastDistribution",
	description:
		"Distribution of future portfolio values based on Monte Carlo proxy.",
} as const;

export const PortfolioForecastResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			$ref: "#/components/schemas/PortfolioForecastDistribution",
			description: "Forecast output",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "Response metadata",
		},
	},
	type: "object",
	required: ["data", "metadata"],
	title: "PortfolioForecastResponse",
	description: "API response for probabilistic portfolio forecasts.",
} as const;

export const PortfolioPerformanceSchema = {
	properties: {
		period: {
			type: "string",
			title: "Period",
			description: "기간",
		},
		data_points: {
			items: {
				$ref: "#/components/schemas/PortfolioDataPoint",
			},
			type: "array",
			title: "Data Points",
			description: "데이터 포인트들",
		},
		summary: {
			$ref: "#/components/schemas/PortfolioPerformanceSummary",
			description: "성과 요약",
		},
	},
	type: "object",
	required: ["period", "data_points", "summary"],
	title: "PortfolioPerformance",
	description: "포트폴리오 성과 데이터.",
} as const;

export const PortfolioPerformanceResponseSchema = {
	properties: {
		data: {
			$ref: "#/components/schemas/PortfolioPerformance",
			description: "포트폴리오 성과",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
			default: "포트폴리오 성과 조회 성공",
		},
	},
	type: "object",
	required: ["data"],
	title: "PortfolioPerformanceResponse",
	description: "포트폴리오 성과 응답.",
} as const;

export const PortfolioPerformanceSummarySchema = {
	properties: {
		total_return: {
			type: "number",
			title: "Total Return",
			description: "총 수익률",
		},
		volatility: {
			type: "number",
			title: "Volatility",
			description: "변동성",
		},
		sharpe_ratio: {
			type: "number",
			title: "Sharpe Ratio",
			description: "샤프 비율",
		},
		max_drawdown: {
			type: "number",
			title: "Max Drawdown",
			description: "최대 낙폭",
		},
	},
	type: "object",
	required: ["total_return", "volatility", "sharpe_ratio", "max_drawdown"],
	title: "PortfolioPerformanceSummary",
	description: "포트폴리오 성과 요약.",
} as const;

export const PortfolioSummarySchema = {
	properties: {
		total_value: {
			type: "number",
			title: "Total Value",
			description: "총 포트폴리오 가치",
		},
		total_pnl: {
			type: "number",
			title: "Total Pnl",
			description: "총 손익",
		},
		total_pnl_percentage: {
			type: "number",
			title: "Total Pnl Percentage",
			description: "총 손익률",
		},
		daily_pnl: {
			type: "number",
			title: "Daily Pnl",
			description: "일일 손익",
		},
		daily_pnl_percentage: {
			type: "number",
			title: "Daily Pnl Percentage",
			description: "일일 손익률",
		},
	},
	type: "object",
	required: [
		"total_value",
		"total_pnl",
		"total_pnl_percentage",
		"daily_pnl",
		"daily_pnl_percentage",
	],
	title: "PortfolioSummary",
	description: "포트폴리오 요약 정보.",
} as const;

export const PositionSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		quantity: {
			type: "number",
			title: "Quantity",
			description: "보유 수량",
		},
		avg_price: {
			type: "number",
			title: "Avg Price",
			description: "평균 단가",
		},
		current_price: {
			type: "number",
			title: "Current Price",
			description: "현재 가격",
		},
		unrealized_pnl: {
			type: "number",
			title: "Unrealized Pnl",
			description: "미실현 손익",
		},
		realized_pnl: {
			type: "number",
			title: "Realized Pnl",
			description: "실현 손익",
			default: 0,
		},
		first_buy_date: {
			type: "string",
			format: "date-time",
			title: "First Buy Date",
			description: "최초 매수일",
		},
		last_update: {
			type: "string",
			format: "date-time",
			title: "Last Update",
			description: "마지막 업데이트",
		},
	},
	type: "object",
	required: [
		"symbol",
		"quantity",
		"avg_price",
		"current_price",
		"unrealized_pnl",
		"first_buy_date",
	],
	title: "Position",
	description: "포지션 정보 내장 모델",
} as const;

export const PredictiveDashboardInsightsSchema = {
	properties: {
		signal: {
			$ref: "#/components/schemas/MLSignalInsight",
			description: "Latest ML signal insight",
		},
		regime: {
			$ref: "#/components/schemas/MarketRegimeSnapshot",
			description: "Current market regime snapshot",
		},
		forecast: {
			$ref: "#/components/schemas/PortfolioForecastDistribution",
			description: "Probabilistic portfolio forecast",
		},
	},
	type: "object",
	required: ["signal", "regime", "forecast"],
	title: "PredictiveDashboardInsights",
	description: "Aggregated predictive insights exposed on the dashboard.",
} as const;

export const PredictiveInsightsResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			$ref: "#/components/schemas/PredictiveDashboardInsights",
			description: "Combined predictive intelligence payload",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "Response metadata for predictive payload",
		},
	},
	type: "object",
	required: ["data"],
	title: "PredictiveInsightsResponse",
	description: "Response wrapper for predictive dashboard bundle.",
} as const;

export const PromptAuditLogResponseSchema = {
	properties: {
		prompt_id: {
			type: "string",
			title: "Prompt Id",
		},
		version: {
			type: "string",
			title: "Version",
		},
		action: {
			type: "string",
			title: "Action",
		},
		actor: {
			type: "string",
			title: "Actor",
		},
		details: {
			additionalProperties: true,
			type: "object",
			title: "Details",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
	},
	type: "object",
	required: [
		"prompt_id",
		"version",
		"action",
		"actor",
		"details",
		"created_at",
	],
	title: "PromptAuditLogResponse",
} as const;

export const PromptEvaluationRequestSchema = {
	properties: {
		prompt_id: {
			type: "string",
			title: "Prompt Id",
		},
		version: {
			type: "string",
			title: "Version",
		},
		content: {
			type: "string",
			title: "Content",
		},
		evaluator: {
			type: "string",
			title: "Evaluator",
			default: "automated",
		},
		context_samples: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Context Samples",
		},
	},
	type: "object",
	required: ["prompt_id", "version", "content"],
	title: "PromptEvaluationRequest",
} as const;

export const PromptEvaluationResponseSchema = {
	properties: {
		evaluation: {
			$ref: "#/components/schemas/PromptEvaluationSummary",
		},
	},
	type: "object",
	required: ["evaluation"],
	title: "PromptEvaluationResponse",
} as const;

export const PromptEvaluationSummarySchema = {
	properties: {
		toxicity_score: {
			type: "number",
			title: "Toxicity Score",
			description: "독성 점수 0-1",
		},
		hallucination_score: {
			type: "number",
			title: "Hallucination Score",
			description: "환각 가능성 점수 0-1",
		},
		factual_consistency: {
			type: "number",
			title: "Factual Consistency",
			description: "사실 일치 점수 0-1",
		},
		risk_level: {
			$ref: "#/components/schemas/PromptRiskLevel",
			description: "위험도",
		},
		evaluator: {
			type: "string",
			title: "Evaluator",
			description: "평가자 또는 시스템",
		},
		evaluated_at: {
			type: "string",
			format: "date-time",
			title: "Evaluated At",
			description: "평가 시각",
		},
	},
	type: "object",
	required: [
		"toxicity_score",
		"hallucination_score",
		"factual_consistency",
		"risk_level",
		"evaluator",
	],
	title: "PromptEvaluationSummary",
	description: "Summary of automated evaluation results.",
} as const;

export const PromptRiskLevelSchema = {
	type: "string",
	enum: ["low", "medium", "high"],
	title: "PromptRiskLevel",
	description: "Risk tier for prompts.",
} as const;

export const PromptStatusSchema = {
	type: "string",
	enum: ["draft", "in_review", "approved", "rejected", "archived"],
	title: "PromptStatus",
	description: "Lifecycle status for prompts.",
} as const;

export const PromptTemplateCreateSchema = {
	properties: {
		prompt_id: {
			type: "string",
			title: "Prompt Id",
		},
		version: {
			type: "string",
			title: "Version",
		},
		name: {
			type: "string",
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		content: {
			type: "string",
			title: "Content",
		},
		owner: {
			type: "string",
			title: "Owner",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
		},
		risk_level: {
			$ref: "#/components/schemas/PromptRiskLevel",
			default: "medium",
		},
		policies: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Policies",
		},
	},
	type: "object",
	required: ["prompt_id", "version", "name", "description", "content", "owner"],
	title: "PromptTemplateCreate",
} as const;

export const PromptTemplateResponseSchema = {
	properties: {
		prompt_id: {
			type: "string",
			title: "Prompt Id",
		},
		version: {
			type: "string",
			title: "Version",
		},
		name: {
			type: "string",
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		content: {
			type: "string",
			title: "Content",
		},
		owner: {
			type: "string",
			title: "Owner",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
		},
		status: {
			$ref: "#/components/schemas/PromptStatus",
		},
		risk_level: {
			$ref: "#/components/schemas/PromptRiskLevel",
		},
		policies: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Policies",
		},
		evaluation: {
			anyOf: [
				{
					$ref: "#/components/schemas/PromptEvaluationSummary",
				},
				{
					type: "null",
				},
			],
		},
		approval_notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Approval Notes",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
		},
	},
	type: "object",
	required: [
		"prompt_id",
		"version",
		"name",
		"description",
		"content",
		"owner",
		"tags",
		"status",
		"risk_level",
		"policies",
		"evaluation",
		"approval_notes",
		"created_at",
		"updated_at",
	],
	title: "PromptTemplateResponse",
} as const;

export const PromptTemplateUpdateSchema = {
	properties: {
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
		},
		content: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Content",
		},
		tags: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Tags",
		},
		risk_level: {
			anyOf: [
				{
					$ref: "#/components/schemas/PromptRiskLevel",
				},
				{
					type: "null",
				},
			],
		},
		policies: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Policies",
		},
		status: {
			anyOf: [
				{
					$ref: "#/components/schemas/PromptStatus",
				},
				{
					type: "null",
				},
			],
		},
		approval_notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Approval Notes",
		},
	},
	type: "object",
	title: "PromptTemplateUpdate",
} as const;

export const PromptUsageLogCreateSchema = {
	properties: {
		prompt_id: {
			type: "string",
			title: "Prompt Id",
		},
		version: {
			type: "string",
			title: "Version",
		},
		session_id: {
			type: "string",
			title: "Session Id",
		},
		outcome: {
			type: "string",
			title: "Outcome",
		},
		toxicity_score: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Toxicity Score",
		},
		hallucination_flags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Hallucination Flags",
		},
	},
	type: "object",
	required: ["prompt_id", "version", "session_id", "outcome"],
	title: "PromptUsageLogCreate",
} as const;

export const PromptUsageLogResponseSchema = {
	properties: {
		prompt_id: {
			type: "string",
			title: "Prompt Id",
		},
		version: {
			type: "string",
			title: "Version",
		},
		session_id: {
			type: "string",
			title: "Session Id",
		},
		outcome: {
			type: "string",
			title: "Outcome",
		},
		toxicity_score: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Toxicity Score",
		},
		hallucination_flags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Hallucination Flags",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
	},
	type: "object",
	required: [
		"prompt_id",
		"version",
		"session_id",
		"outcome",
		"toxicity_score",
		"hallucination_flags",
		"created_at",
	],
	title: "PromptUsageLogResponse",
} as const;

export const PromptWorkflowActionSchema = {
	properties: {
		reviewer: {
			type: "string",
			title: "Reviewer",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
		},
	},
	type: "object",
	required: ["reviewer"],
	title: "PromptWorkflowAction",
} as const;

export const PydanticObjectIdSchema = {
	type: "string",
	maxLength: 24,
	minLength: 24,
	pattern: "^[0-9a-f]{24}$",
	example: "5eb7cf5a86d9755df3a6c593",
} as const;

export const QuoteDataSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "주식 심볼",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "시각",
		},
		price: {
			type: "string",
			title: "Price",
			description: "현재가",
		},
		change: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Change",
			description: "전일 대비 변동",
		},
		change_percent: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Change Percent",
			description: "변동률 (%)",
		},
		previous_close: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Previous Close",
			description: "전일 종가",
		},
		open_price: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Open Price",
			description: "당일 시가",
		},
		high_price: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "High Price",
			description: "당일 고가",
		},
		low_price: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Low Price",
			description: "당일 저가",
		},
		volume: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Volume",
			description: "당일 누적 거래량",
		},
		bid_price: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Bid Price",
			description: "매수 호가",
		},
		ask_price: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Ask Price",
			description: "매도 호가",
		},
		bid_size: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Bid Size",
			description: "매수 호가 수량",
		},
		ask_size: {
			anyOf: [
				{
					type: "integer",
				},
				{
					type: "null",
				},
			],
			title: "Ask Size",
			description: "매도 호가 수량",
		},
	},
	type: "object",
	required: ["symbol", "timestamp", "price"],
	title: "QuoteData",
	description: "실시간 호가 응답 모델",
} as const;

export const QuoteResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			$ref: "#/components/schemas/QuoteData",
			description: "데이터",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
	},
	type: "object",
	required: ["data", "metadata"],
	title: "QuoteResponse",
	description: "실시간 호가 응답 스키마",
} as const;

export const RSIMeanReversionConfigSchema = {
	properties: {
		config_type: {
			type: "string",
			const: "rsi_mean_reversion",
			title: "Config Type",
			description: "설정 타입",
			default: "rsi_mean_reversion",
		},
		lookback_period: {
			type: "integer",
			minimum: 30,
			title: "Lookback Period",
			description: "조회 기간 (일)",
			default: 252,
		},
		min_data_points: {
			type: "integer",
			minimum: 10,
			title: "Min Data Points",
			description: "최소 데이터 포인트",
			default: 30,
		},
		max_position_size: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Max Position Size",
			description: "최대 포지션 크기",
			default: 1,
		},
		stop_loss_pct: {
			anyOf: [
				{
					type: "number",
					maximum: 1,
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Stop Loss Pct",
			description: "손절 비율",
		},
		take_profit_pct: {
			anyOf: [
				{
					type: "number",
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Take Profit Pct",
			description: "익절 비율",
		},
		rsi_period: {
			type: "integer",
			maximum: 50,
			minimum: 2,
			title: "Rsi Period",
			description: "RSI 계산 기간",
			default: 14,
		},
		oversold_threshold: {
			type: "number",
			maximum: 50,
			minimum: 0,
			title: "Oversold Threshold",
			description: "과매도 임계값",
			default: 30,
		},
		overbought_threshold: {
			type: "number",
			maximum: 100,
			minimum: 50,
			title: "Overbought Threshold",
			description: "과매수 임계값",
			default: 70,
		},
		confirmation_periods: {
			type: "integer",
			maximum: 10,
			minimum: 1,
			title: "Confirmation Periods",
			description: "신호 확인 기간",
			default: 2,
		},
	},
	type: "object",
	title: "RSIMeanReversionConfig",
	description: "RSI 평균회귀 전략 설정",
} as const;

export const RecentActivitySchema = {
	properties: {
		trades_count_today: {
			type: "integer",
			title: "Trades Count Today",
			description: "오늘 거래 수",
		},
		backtests_count_week: {
			type: "integer",
			title: "Backtests Count Week",
			description: "이번 주 백테스트 수",
		},
		last_login: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Last Login",
			description: "마지막 로그인",
		},
	},
	type: "object",
	required: ["trades_count_today", "backtests_count_week"],
	title: "RecentActivity",
	description: "최근 활동 정보.",
} as const;

export const RecentTradesSchema = {
	properties: {
		trades: {
			items: {
				$ref: "#/components/schemas/TradeItem",
			},
			type: "array",
			title: "Trades",
			description: "거래 목록",
		},
		summary: {
			$ref: "#/components/schemas/TradesSummary",
			description: "거래 요약",
		},
	},
	type: "object",
	required: ["trades", "summary"],
	title: "RecentTrades",
	description: "최근 거래 데이터.",
} as const;

export const RecentTradesResponseSchema = {
	properties: {
		data: {
			$ref: "#/components/schemas/RecentTrades",
			description: "최근 거래 데이터",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
			default: "최근 거래 조회 성공",
		},
	},
	type: "object",
	required: ["data"],
	title: "RecentTradesResponse",
	description: "최근 거래 응답.",
} as const;

export const RecommendationsSchema = {
	properties: {
		action: {
			$ref: "#/components/schemas/ReportRecommendation",
			description: "추천 액션",
		},
		rationale: {
			type: "string",
			maxLength: 400,
			title: "Rationale",
			description: "추천 근거",
		},
		next_steps: {
			items: {
				type: "string",
			},
			type: "array",
			maxItems: 4,
			minItems: 2,
			title: "Next Steps",
			description: "다음 단계 (2-4개)",
		},
		optimization_suggestions: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
					maxItems: 5,
				},
				{
					type: "null",
				},
			],
			title: "Optimization Suggestions",
			description: "최적화 제안 (선택 사항)",
		},
		risk_mitigation: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
					maxItems: 5,
				},
				{
					type: "null",
				},
			],
			title: "Risk Mitigation",
			description: "리스크 완화 방안 (선택 사항)",
		},
	},
	type: "object",
	required: ["action", "rationale", "next_steps"],
	title: "Recommendations",
	description: "추천 사항",
} as const;

export const RegimeMetricsSchema = {
	properties: {
		trailing_return_pct: {
			type: "number",
			title: "Trailing Return Pct",
			description: "Lookback total return in %",
		},
		volatility_pct: {
			type: "number",
			title: "Volatility Pct",
			description: "Annualised volatility in %",
		},
		drawdown_pct: {
			type: "number",
			title: "Drawdown Pct",
			description: "Max drawdown observed in %",
		},
		momentum_z: {
			type: "number",
			title: "Momentum Z",
			description: "Z-score of short term momentum",
		},
	},
	type: "object",
	required: [
		"trailing_return_pct",
		"volatility_pct",
		"drawdown_pct",
		"momentum_z",
	],
	title: "RegimeMetrics",
	description: "Quantitative metrics used for regime detection.",
} as const;

export const ReportRecommendationSchema = {
	type: "string",
	enum: ["proceed", "optimize", "reject", "research"],
	title: "ReportRecommendation",
	description: "리포트 추천 액션",
} as const;

export const RiskAssessmentSchema = {
	properties: {
		overall_risk_level: {
			type: "string",
			title: "Overall Risk Level",
			description: "전체 리스크 수준 (Low/Medium/High/Very High)",
		},
		risk_summary: {
			type: "string",
			maxLength: 300,
			title: "Risk Summary",
			description: "리스크 요약",
		},
		volatility_assessment: {
			type: "string",
			maxLength: 200,
			title: "Volatility Assessment",
			description: "변동성 평가",
		},
		max_drawdown_context: {
			type: "string",
			maxLength: 200,
			title: "Max Drawdown Context",
			description: "최대 낙폭 맥락",
		},
		concentration_risk: {
			type: "string",
			maxLength: 200,
			title: "Concentration Risk",
			description: "집중 리스크 분석",
		},
		tail_risk: {
			type: "string",
			maxLength: 200,
			title: "Tail Risk",
			description: "테일 리스크 평가",
		},
	},
	type: "object",
	required: [
		"overall_risk_level",
		"risk_summary",
		"volatility_assessment",
		"max_drawdown_context",
		"concentration_risk",
		"tail_risk",
	],
	title: "RiskAssessment",
	description: "리스크 평가",
} as const;

export const RunCreateSchema = {
	properties: {
		run_id: {
			type: "string",
			minLength: 8,
			title: "Run Id",
		},
		experiment_name: {
			type: "string",
			title: "Experiment Name",
		},
		parameters: {
			items: {
				$ref: "#/components/schemas/ParameterSnapshot",
			},
			type: "array",
			title: "Parameters",
		},
		metrics: {
			items: {
				$ref: "#/components/schemas/MetricSnapshot",
			},
			type: "array",
			title: "Metrics",
		},
		dataset_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dataset Name",
		},
		dataset_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dataset Version",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
		},
		artifacts: {
			items: {
				$ref: "#/components/schemas/ArtifactReference",
			},
			type: "array",
			title: "Artifacts",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
		},
	},
	type: "object",
	required: ["run_id", "experiment_name"],
	title: "RunCreate",
} as const;

export const RunResponseSchema = {
	properties: {
		run_id: {
			type: "string",
			title: "Run Id",
		},
		experiment_name: {
			type: "string",
			title: "Experiment Name",
		},
		status: {
			$ref: "#/components/schemas/RunStatus",
		},
		started_at: {
			type: "string",
			format: "date-time",
			title: "Started At",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
		},
		parameters: {
			items: {
				$ref: "#/components/schemas/ParameterSnapshot",
			},
			type: "array",
			title: "Parameters",
		},
		metrics: {
			items: {
				$ref: "#/components/schemas/MetricSnapshot",
			},
			type: "array",
			title: "Metrics",
		},
		dataset_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dataset Name",
		},
		dataset_version: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Dataset Version",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
		},
		artifacts: {
			items: {
				$ref: "#/components/schemas/ArtifactReference",
			},
			type: "array",
			title: "Artifacts",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
		},
	},
	type: "object",
	required: [
		"run_id",
		"experiment_name",
		"status",
		"started_at",
		"completed_at",
		"parameters",
		"metrics",
		"dataset_name",
		"dataset_version",
		"tags",
		"artifacts",
		"notes",
	],
	title: "RunResponse",
} as const;

export const RunStatusSchema = {
	type: "string",
	enum: ["running", "completed", "failed", "cancelled"],
	title: "RunStatus",
	description: "Execution status for a model run.",
} as const;

export const RunUpdateSchema = {
	properties: {
		status: {
			anyOf: [
				{
					$ref: "#/components/schemas/RunStatus",
				},
				{
					type: "null",
				},
			],
		},
		metrics: {
			anyOf: [
				{
					items: {
						$ref: "#/components/schemas/MetricSnapshot",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Metrics",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
		},
		artifacts: {
			anyOf: [
				{
					items: {
						$ref: "#/components/schemas/ArtifactReference",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Artifacts",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
		},
	},
	type: "object",
	title: "RunUpdate",
} as const;

export const SMACrossoverConfigSchema = {
	properties: {
		config_type: {
			type: "string",
			const: "sma_crossover",
			title: "Config Type",
			description: "설정 타입",
			default: "sma_crossover",
		},
		lookback_period: {
			type: "integer",
			minimum: 30,
			title: "Lookback Period",
			description: "조회 기간 (일)",
			default: 252,
		},
		min_data_points: {
			type: "integer",
			minimum: 10,
			title: "Min Data Points",
			description: "최소 데이터 포인트",
			default: 30,
		},
		max_position_size: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Max Position Size",
			description: "최대 포지션 크기",
			default: 1,
		},
		stop_loss_pct: {
			anyOf: [
				{
					type: "number",
					maximum: 1,
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Stop Loss Pct",
			description: "손절 비율",
		},
		take_profit_pct: {
			anyOf: [
				{
					type: "number",
					minimum: 0,
				},
				{
					type: "null",
				},
			],
			title: "Take Profit Pct",
			description: "익절 비율",
		},
		short_window: {
			type: "integer",
			maximum: 50,
			minimum: 2,
			title: "Short Window",
			description: "단기 이동평균 기간",
			default: 10,
		},
		long_window: {
			type: "integer",
			maximum: 200,
			minimum: 10,
			title: "Long Window",
			description: "장기 이동평균 기간",
			default: 30,
		},
		min_crossover_strength: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Min Crossover Strength",
			description: "최소 교차 강도",
			default: 0.01,
		},
	},
	type: "object",
	title: "SMACrossoverConfig",
	description: "SMA 크로스오버 전략 설정",
} as const;

export const ScenarioCreateSchema = {
	properties: {
		name: {
			type: "string",
			minLength: 3,
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
		},
		baseline_backtest_ids: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Baseline Backtest Ids",
		},
		benchmark_metrics: {
			items: {
				$ref: "#/components/schemas/BenchmarkMetric",
			},
			type: "array",
			title: "Benchmark Metrics",
		},
		stress_events: {
			items: {
				$ref: "#/components/schemas/ScenarioEvent",
			},
			type: "array",
			title: "Stress Events",
		},
	},
	type: "object",
	required: ["name", "description"],
	title: "ScenarioCreate",
} as const;

export const ScenarioEventSchema = {
	properties: {
		label: {
			type: "string",
			title: "Label",
			description: "이벤트 라벨",
		},
		start: {
			type: "string",
			format: "date-time",
			title: "Start",
			description: "시작일",
		},
		end: {
			type: "string",
			format: "date-time",
			title: "End",
			description: "종료일",
		},
	},
	type: "object",
	required: ["label", "start", "end"],
	title: "ScenarioEvent",
	description: "Historical event or stress period definition.",
} as const;

export const ScenarioResponseSchema = {
	properties: {
		name: {
			type: "string",
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
		},
		baseline_backtest_ids: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Baseline Backtest Ids",
		},
		benchmark_metrics: {
			items: {
				$ref: "#/components/schemas/BenchmarkMetric",
			},
			type: "array",
			title: "Benchmark Metrics",
		},
		stress_events: {
			items: {
				$ref: "#/components/schemas/ScenarioEvent",
			},
			type: "array",
			title: "Stress Events",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
		},
	},
	type: "object",
	required: [
		"name",
		"description",
		"symbols",
		"start_date",
		"end_date",
		"baseline_backtest_ids",
		"benchmark_metrics",
		"stress_events",
		"created_at",
		"updated_at",
	],
	title: "ScenarioResponse",
} as const;

export const ScenarioUpdateSchema = {
	properties: {
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
		},
		symbols: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Symbols",
		},
		start_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Start Date",
		},
		end_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "End Date",
		},
		baseline_backtest_ids: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Baseline Backtest Ids",
		},
		benchmark_metrics: {
			anyOf: [
				{
					items: {
						$ref: "#/components/schemas/BenchmarkMetric",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Benchmark Metrics",
		},
		stress_events: {
			anyOf: [
				{
					items: {
						$ref: "#/components/schemas/ScenarioEvent",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Stress Events",
		},
	},
	type: "object",
	title: "ScenarioUpdate",
} as const;

export const SentimentTypeSchema = {
	type: "string",
	enum: ["positive", "neutral", "negative"],
	title: "SentimentType",
	description: "감정 분석 유형.",
} as const;

export const SignalRecommendationSchema = {
	type: "string",
	enum: ["strong_buy", "buy", "hold", "sell", "strong_sell"],
	title: "SignalRecommendation",
	description: "Recommendation derived from model probability.",
} as const;

export const SignalTypeSchema = {
	type: "string",
	enum: ["BUY", "SELL", "HOLD"],
	title: "SignalType",
	description: "신호 타입",
} as const;

export const StockSymbolsResponseSchema = {
	properties: {
		symbols: {
			items: {
				$ref: "#/components/schemas/SymbolInfo",
			},
			type: "array",
			title: "Symbols",
		},
		count: {
			type: "integer",
			title: "Count",
		},
		search_term: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Search Term",
		},
	},
	type: "object",
	required: ["symbols", "count"],
	title: "StockSymbolsResponse",
} as const;

export const StrategyApprovalRequestSchema = {
	properties: {
		strategy_builder_response_id: {
			type: "string",
			title: "Strategy Builder Response Id",
			description: "빌더 응답 ID",
		},
		approved: {
			type: "boolean",
			title: "Approved",
			description: "승인 여부",
		},
		modifications: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Modifications",
			description: "수정 사항",
		},
		approval_notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Approval Notes",
			description: "승인 메모",
		},
	},
	type: "object",
	required: ["strategy_builder_response_id", "approved"],
	title: "StrategyApprovalRequest",
	description: "전략 승인 요청 (휴먼 인 더 루프)",
} as const;

export const StrategyApprovalResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
			description: "승인 상태 (approved/rejected/modified)",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
		},
		strategy_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Strategy Id",
			description: "생성된 전략 ID (승인 시)",
		},
		approved_at: {
			type: "string",
			format: "date-time",
			title: "Approved At",
			description: "승인 시간",
		},
	},
	type: "object",
	required: ["status", "message"],
	title: "StrategyApprovalResponse",
	description: "전략 승인 응답",
} as const;

export const StrategyBuilderRequestSchema = {
	properties: {
		query: {
			type: "string",
			maxLength: 1000,
			minLength: 10,
			title: "Query",
			description: "자연어 전략 설명 또는 요청",
		},
		context: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "Context",
			description: "추가 컨텍스트 (심볼, 기간, 제약조건 등)",
		},
		user_preferences: {
			anyOf: [
				{
					additionalProperties: true,
					type: "object",
				},
				{
					type: "null",
				},
			],
			title: "User Preferences",
			description: "사용자 선호도 (위험 선호도, 거래 빈도 등)",
		},
		existing_strategy_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Existing Strategy Id",
			description: "수정할 기존 전략 ID (modify intent)",
		},
		require_human_approval: {
			type: "boolean",
			title: "Require Human Approval",
			description: "사람 승인 필요 여부 (휴먼 인 더 루프)",
			default: true,
		},
	},
	type: "object",
	required: ["query"],
	title: "StrategyBuilderRequest",
	description: "대화형 전략 빌더 요청",
} as const;

export const StrategyBuilderResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
			description: "처리 상태 (success/warning/error)",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
		},
		parsed_intent: {
			$ref: "#/components/schemas/ParsedIntent",
		},
		generated_strategy: {
			anyOf: [
				{
					$ref: "#/components/schemas/GeneratedStrategyConfig",
				},
				{
					type: "null",
				},
			],
			description: "생성된 전략 설정",
		},
		human_approval: {
			$ref: "#/components/schemas/HumanApprovalRequest",
			description: "휴먼 승인 요청 정보",
		},
		alternative_suggestions: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Alternative Suggestions",
			description: "대안 제안 (의도 파싱 실패 시)",
		},
		processing_time_ms: {
			type: "number",
			title: "Processing Time Ms",
			description: "처리 시간 (밀리초)",
		},
		llm_model: {
			type: "string",
			title: "Llm Model",
			description: "사용된 LLM 모델",
		},
		generated_at: {
			type: "string",
			format: "date-time",
			title: "Generated At",
			description: "생성 시간",
		},
		validation_errors: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Validation Errors",
			description: "검증 오류 목록",
		},
		overall_confidence: {
			type: "number",
			maximum: 1,
			minimum: 0,
			title: "Overall Confidence",
			description: "전체 신뢰도 (의도 + 전략 생성)",
		},
	},
	type: "object",
	required: [
		"status",
		"message",
		"parsed_intent",
		"human_approval",
		"processing_time_ms",
		"llm_model",
		"overall_confidence",
	],
	title: "StrategyBuilderResponse",
	description: "대화형 전략 빌더 응답",
} as const;

export const StrategyComparisonSchema = {
	properties: {
		strategies: {
			items: {
				$ref: "#/components/schemas/StrategyPerformanceItem",
			},
			type: "array",
			title: "Strategies",
			description: "전략 목록",
		},
	},
	type: "object",
	required: ["strategies"],
	title: "StrategyComparison",
	description: "전략 비교 데이터.",
} as const;

export const StrategyComparisonRequestSchema = {
	properties: {
		strategy_ids: {
			items: {
				type: "string",
			},
			type: "array",
			maxItems: 5,
			minItems: 2,
			title: "Strategy Ids",
			description: "비교할 전략 ID 목록 (2-5개)",
		},
		metrics: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Metrics",
			description: "비교할 메트릭 목록",
		},
		natural_language_query: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Natural Language Query",
			description: "자연어 비교 질의 (예: '가장 안정적인 전략은?')",
		},
	},
	type: "object",
	required: ["strategy_ids"],
	title: "StrategyComparisonRequest",
	description: "전략 비교 요청",
} as const;

export const StrategyComparisonResponseSchema = {
	properties: {
		data: {
			$ref: "#/components/schemas/StrategyComparison",
			description: "전략 비교 데이터",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
			default: "전략 비교 조회 성공",
		},
	},
	type: "object",
	required: ["data"],
	title: "StrategyComparisonResponse",
	description: "전략 비교 응답.",
} as const;

export const StrategyComparisonResultSchema = {
	properties: {
		query: {
			type: "string",
			title: "Query",
			description: "원본 질의",
		},
		strategies: {
			items: {
				additionalProperties: true,
				type: "object",
			},
			type: "array",
			title: "Strategies",
			description: "전략별 메트릭",
		},
		ranking: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Ranking",
			description: "순위 (전략 ID 목록)",
		},
		summary: {
			type: "string",
			maxLength: 1000,
			minLength: 50,
			title: "Summary",
			description: "LLM 요약",
		},
		recommendation: {
			type: "string",
			title: "Recommendation",
			description: "추천 전략 ID",
		},
		reasoning: {
			type: "string",
			maxLength: 500,
			minLength: 50,
			title: "Reasoning",
			description: "추천 근거",
		},
	},
	type: "object",
	required: [
		"query",
		"strategies",
		"ranking",
		"summary",
		"recommendation",
		"reasoning",
	],
	title: "StrategyComparisonResult",
	description: "전략 비교 결과",
} as const;

export const StrategyCreateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "전략 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "전략 설명",
		},
		config: {
			oneOf: [
				{
					$ref: "#/components/schemas/SMACrossoverConfig",
				},
				{
					$ref: "#/components/schemas/RSIMeanReversionConfig",
				},
				{
					$ref: "#/components/schemas/MomentumConfig",
				},
				{
					$ref: "#/components/schemas/BuyAndHoldConfig",
				},
			],
			title: "Config",
			description: "전략 설정 (타입 안전)",
			discriminator: {
				propertyName: "config_type",
				mapping: {
					buy_and_hold: "#/components/schemas/BuyAndHoldConfig",
					momentum: "#/components/schemas/MomentumConfig",
					rsi_mean_reversion: "#/components/schemas/RSIMeanReversionConfig",
					sma_crossover: "#/components/schemas/SMACrossoverConfig",
				},
			},
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: ["name", "strategy_type", "config"],
	title: "StrategyCreate",
	description: "Strategy creation request",
} as const;

export const StrategyCreateFromTemplateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "전략 이름",
		},
		config_overrides: {
			anyOf: [
				{
					oneOf: [
						{
							$ref: "#/components/schemas/SMACrossoverConfig",
						},
						{
							$ref: "#/components/schemas/RSIMeanReversionConfig",
						},
						{
							$ref: "#/components/schemas/MomentumConfig",
						},
						{
							$ref: "#/components/schemas/BuyAndHoldConfig",
						},
					],
					discriminator: {
						propertyName: "config_type",
						mapping: {
							buy_and_hold: "#/components/schemas/BuyAndHoldConfig",
							momentum: "#/components/schemas/MomentumConfig",
							rsi_mean_reversion: "#/components/schemas/RSIMeanReversionConfig",
							sma_crossover: "#/components/schemas/SMACrossoverConfig",
						},
					},
				},
				{
					type: "null",
				},
			],
			title: "Config Overrides",
			description: "설정 오버라이드",
		},
	},
	type: "object",
	required: ["name"],
	title: "StrategyCreateFromTemplate",
	description: "Create strategy from template request",
} as const;

export const StrategyExecuteSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbol: {
			type: "string",
			title: "Symbol",
			description: "대상 심볼",
		},
		market_data: {
			additionalProperties: true,
			type: "object",
			title: "Market Data",
			description: "시장 데이터",
		},
	},
	type: "object",
	required: ["symbol", "market_data"],
	title: "StrategyExecute",
	description: "Strategy execution request",
} as const;

export const StrategyInsightsSchema = {
	properties: {
		strategy_name: {
			type: "string",
			title: "Strategy Name",
			description: "전략 이름",
		},
		strategy_description: {
			type: "string",
			maxLength: 300,
			title: "Strategy Description",
			description: "전략 설명",
		},
		key_parameters: {
			additionalProperties: true,
			type: "object",
			title: "Key Parameters",
			description: "핵심 파라미터",
		},
		parameter_sensitivity: {
			type: "string",
			maxLength: 300,
			title: "Parameter Sensitivity",
			description: "파라미터 민감도 분석",
		},
		strengths: {
			items: {
				type: "string",
			},
			type: "array",
			maxItems: 4,
			minItems: 2,
			title: "Strengths",
			description: "전략 강점 (2-4개)",
		},
		weaknesses: {
			items: {
				type: "string",
			},
			type: "array",
			maxItems: 4,
			minItems: 2,
			title: "Weaknesses",
			description: "전략 약점 (2-4개)",
		},
	},
	type: "object",
	required: [
		"strategy_name",
		"strategy_description",
		"key_parameters",
		"parameter_sensitivity",
		"strengths",
		"weaknesses",
	],
	title: "StrategyInsights",
	description: "전략 인사이트",
} as const;

export const StrategyListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		strategies: {
			items: {
				$ref: "#/components/schemas/StrategyResponse",
			},
			type: "array",
			title: "Strategies",
			description: "전략 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["strategies", "total"],
	title: "StrategyListResponse",
	description: "Strategy list response",
} as const;

export const StrategyPerformanceItemSchema = {
	properties: {
		strategy_id: {
			type: "string",
			title: "Strategy Id",
			description: "전략 ID",
		},
		name: {
			type: "string",
			title: "Name",
			description: "전략 이름",
		},
		type: {
			type: "string",
			title: "Type",
			description: "전략 타입",
		},
		total_return: {
			type: "number",
			title: "Total Return",
			description: "총 수익률",
		},
		win_rate: {
			type: "number",
			title: "Win Rate",
			description: "승률",
		},
		sharpe_ratio: {
			type: "number",
			title: "Sharpe Ratio",
			description: "샤프 비율",
		},
		trades_count: {
			type: "integer",
			title: "Trades Count",
			description: "거래 수",
		},
		last_execution: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Last Execution",
			description: "마지막 실행",
		},
		status: {
			$ref: "#/components/schemas/StrategyStatus",
			description: "상태",
		},
	},
	type: "object",
	required: [
		"strategy_id",
		"name",
		"type",
		"total_return",
		"win_rate",
		"sharpe_ratio",
		"trades_count",
		"status",
	],
	title: "StrategyPerformanceItem",
	description: "전략 성과 항목.",
} as const;

export const StrategyResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "전략 ID",
		},
		name: {
			type: "string",
			title: "Name",
			description: "전략 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "전략 설명",
		},
		config: {
			oneOf: [
				{
					$ref: "#/components/schemas/SMACrossoverConfig",
				},
				{
					$ref: "#/components/schemas/RSIMeanReversionConfig",
				},
				{
					$ref: "#/components/schemas/MomentumConfig",
				},
				{
					$ref: "#/components/schemas/BuyAndHoldConfig",
				},
			],
			title: "Config",
			description: "전략 설정 (타입 안전)",
			discriminator: {
				propertyName: "config_type",
				mapping: {
					buy_and_hold: "#/components/schemas/BuyAndHoldConfig",
					momentum: "#/components/schemas/MomentumConfig",
					rsi_mean_reversion: "#/components/schemas/RSIMeanReversionConfig",
					sma_crossover: "#/components/schemas/SMACrossoverConfig",
				},
			},
		},
		is_active: {
			type: "boolean",
			title: "Is Active",
			description: "활성화 상태",
		},
		is_template: {
			type: "boolean",
			title: "Is Template",
			description: "템플릿 여부",
		},
		created_by: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Created By",
			description: "생성자",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
			description: "수정 시간",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: [
		"id",
		"name",
		"strategy_type",
		"config",
		"is_active",
		"is_template",
		"created_at",
		"updated_at",
	],
	title: "StrategyResponse",
	description: "Strategy response",
} as const;

export const StrategyStatusSchema = {
	type: "string",
	enum: ["active", "paused", "stopped"],
	title: "StrategyStatus",
	description: "전략 상태.",
} as const;

export const StrategySummarySchema = {
	properties: {
		active_count: {
			type: "integer",
			title: "Active Count",
			description: "활성 전략 수",
		},
		total_count: {
			type: "integer",
			title: "Total Count",
			description: "총 전략 수",
		},
		avg_success_rate: {
			type: "number",
			title: "Avg Success Rate",
			description: "평균 성공률",
		},
		best_performing: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Best Performing",
			description: "최고 성과 전략 ID",
		},
	},
	type: "object",
	required: ["active_count", "total_count", "avg_success_rate"],
	title: "StrategySummary",
	description: "전략 요약 정보.",
} as const;

export const StrategyTypeSchema = {
	type: "string",
	enum: ["sma_crossover", "rsi_mean_reversion", "momentum", "buy_and_hold"],
	title: "StrategyType",
	description: "지원되는 전략 타입",
} as const;

export const StrategyUpdateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			description: "전략 이름",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "전략 설명",
		},
		config: {
			anyOf: [
				{
					oneOf: [
						{
							$ref: "#/components/schemas/SMACrossoverConfig",
						},
						{
							$ref: "#/components/schemas/RSIMeanReversionConfig",
						},
						{
							$ref: "#/components/schemas/MomentumConfig",
						},
						{
							$ref: "#/components/schemas/BuyAndHoldConfig",
						},
					],
					discriminator: {
						propertyName: "config_type",
						mapping: {
							buy_and_hold: "#/components/schemas/BuyAndHoldConfig",
							momentum: "#/components/schemas/MomentumConfig",
							rsi_mean_reversion: "#/components/schemas/RSIMeanReversionConfig",
							sma_crossover: "#/components/schemas/SMACrossoverConfig",
						},
					},
				},
				{
					type: "null",
				},
			],
			title: "Config",
			description: "전략 설정",
		},
		is_active: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Active",
			description: "활성화 상태",
		},
		tags: {
			anyOf: [
				{
					items: {
						anyOf: [
							{
								type: "string",
							},
							{
								type: "null",
							},
						],
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	title: "StrategyUpdate",
	description: "Strategy update request",
} as const;

export const StudyListItemSchema = {
	properties: {
		study_name: {
			type: "string",
			title: "Study Name",
		},
		symbol: {
			type: "string",
			title: "Symbol",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
		},
		status: {
			type: "string",
			title: "Status",
		},
		trials_completed: {
			type: "integer",
			title: "Trials Completed",
		},
		n_trials: {
			type: "integer",
			title: "N Trials",
		},
		best_value: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Best Value",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
		},
		completed_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Completed At",
		},
	},
	type: "object",
	required: [
		"study_name",
		"symbol",
		"strategy_name",
		"status",
		"trials_completed",
		"n_trials",
		"created_at",
	],
	title: "StudyListItem",
	description: "Summary of an optimization study for listing.",
} as const;

export const StudyListResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
		},
		total: {
			type: "integer",
			title: "Total",
		},
		studies: {
			items: {
				$ref: "#/components/schemas/StudyListItem",
			},
			type: "array",
			title: "Studies",
		},
	},
	type: "object",
	required: ["status", "total", "studies"],
	title: "StudyListResponse",
	description: "Response for study listing.",
} as const;

export const SymbolInfoSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
		},
		name: {
			type: "string",
			title: "Name",
		},
		type: {
			type: "string",
			title: "Type",
		},
		region: {
			type: "string",
			title: "Region",
		},
		market_open: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Market Open",
		},
		market_close: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Market Close",
		},
		timezone: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Timezone",
		},
		currency: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Currency",
		},
		match_score: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Match Score",
		},
	},
	type: "object",
	required: ["symbol", "name", "type", "region"],
	title: "SymbolInfo",
} as const;

export const TaskResultSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
		},
		message: {
			type: "string",
			title: "Message",
		},
		total: {
			type: "integer",
			title: "Total",
			default: 0,
		},
		success: {
			type: "integer",
			title: "Success",
			default: 0,
		},
		failed: {
			type: "integer",
			title: "Failed",
			default: 0,
		},
		errors: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Errors",
			default: [],
		},
	},
	type: "object",
	required: ["status", "message"],
	title: "TaskResult",
	description: "작업 실행 결과",
} as const;

export const TechnicalIndicatorDataSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "주식 심볼",
		},
		indicator_type: {
			type: "string",
			title: "Indicator Type",
			description: "지표 타입 (SMA, EMA, RSI, etc.)",
		},
		interval: {
			type: "string",
			title: "Interval",
			description: "시간 간격",
		},
		parameters: {
			additionalProperties: true,
			type: "object",
			title: "Parameters",
			description: "지표 파라미터",
		},
		data: {
			items: {
				$ref: "#/components/schemas/IndicatorDataPoint",
			},
			type: "array",
			title: "Data",
			description: "시계열 데이터",
		},
		data_points_count: {
			type: "integer",
			title: "Data Points Count",
			description: "데이터 포인트 개수",
			default: 0,
		},
		latest_value: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Latest Value",
			description: "최신 지표 값",
		},
		latest_date: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Latest Date",
			description: "최신 데이터 날짜",
		},
	},
	type: "object",
	required: ["symbol", "indicator_type", "interval"],
	title: "TechnicalIndicatorData",
	description: "기술적 지표 응답 데이터 모델",
} as const;

export const TechnicalIndicatorResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			title: "Success",
			description: "요청 성공 여부",
			default: true,
		},
		message: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Message",
			description: "응답 메시지",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "응답 시간",
		},
		data: {
			anyOf: [
				{
					$ref: "#/components/schemas/TechnicalIndicatorData",
				},
				{
					type: "null",
				},
			],
			description: "지표 데이터",
		},
		metadata: {
			$ref: "#/components/schemas/MetadataInfo",
			description: "메타데이터",
		},
	},
	type: "object",
	required: ["metadata"],
	title: "TechnicalIndicatorResponse",
	description: "단일 기술적 지표 응답",
} as const;

export const TemplateCreateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
			description: "템플릿 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			type: "string",
			title: "Description",
			description: "템플릿 설명",
		},
		default_config: {
			oneOf: [
				{
					$ref: "#/components/schemas/SMACrossoverConfig",
				},
				{
					$ref: "#/components/schemas/RSIMeanReversionConfig",
				},
				{
					$ref: "#/components/schemas/MomentumConfig",
				},
				{
					$ref: "#/components/schemas/BuyAndHoldConfig",
				},
			],
			title: "Default Config",
			description: "기본 설정 타입 안전",
			discriminator: {
				propertyName: "config_type",
				mapping: {
					buy_and_hold: "#/components/schemas/BuyAndHoldConfig",
					momentum: "#/components/schemas/MomentumConfig",
					rsi_mean_reversion: "#/components/schemas/RSIMeanReversionConfig",
					sma_crossover: "#/components/schemas/SMACrossoverConfig",
				},
			},
		},
		category: {
			type: "string",
			title: "Category",
			description: "카테고리",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: [
		"name",
		"strategy_type",
		"description",
		"default_config",
		"category",
	],
	title: "TemplateCreate",
	description: "Template creation request",
} as const;

export const TemplateListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		templates: {
			items: {
				$ref: "#/components/schemas/TemplateResponse",
			},
			type: "array",
			title: "Templates",
			description: "템플릿 목록",
		},
		total: {
			type: "integer",
			title: "Total",
			description: "총 개수",
		},
	},
	type: "object",
	required: ["templates", "total"],
	title: "TemplateListResponse",
	description: "Template list response",
} as const;

export const TemplateResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		id: {
			type: "string",
			title: "Id",
			description: "템플릿 ID",
		},
		name: {
			type: "string",
			title: "Name",
			description: "템플릿 이름",
		},
		strategy_type: {
			$ref: "#/components/schemas/StrategyType",
			description: "전략 타입",
		},
		description: {
			type: "string",
			title: "Description",
			description: "템플릿 설명",
		},
		default_config: {
			oneOf: [
				{
					$ref: "#/components/schemas/SMACrossoverConfig",
				},
				{
					$ref: "#/components/schemas/RSIMeanReversionConfig",
				},
				{
					$ref: "#/components/schemas/MomentumConfig",
				},
				{
					$ref: "#/components/schemas/BuyAndHoldConfig",
				},
			],
			title: "Default Config",
			description: "기본 설정",
			discriminator: {
				propertyName: "config_type",
				mapping: {
					buy_and_hold: "#/components/schemas/BuyAndHoldConfig",
					momentum: "#/components/schemas/MomentumConfig",
					rsi_mean_reversion: "#/components/schemas/RSIMeanReversionConfig",
					sma_crossover: "#/components/schemas/SMACrossoverConfig",
				},
			},
		},
		category: {
			type: "string",
			title: "Category",
			description: "카테고리",
		},
		usage_count: {
			type: "integer",
			title: "Usage Count",
			description: "사용 횟수",
		},
		created_at: {
			type: "string",
			format: "date-time",
			title: "Created At",
			description: "생성 시간",
		},
		updated_at: {
			type: "string",
			format: "date-time",
			title: "Updated At",
			description: "수정 시간",
		},
		tags: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	required: [
		"id",
		"name",
		"strategy_type",
		"description",
		"default_config",
		"category",
		"usage_count",
		"created_at",
		"updated_at",
	],
	title: "TemplateResponse",
	description: "Template response",
} as const;

export const TemplateUpdateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			description: "템플릿 이름",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			description: "템플릿 설명",
		},
		default_config: {
			anyOf: [
				{
					oneOf: [
						{
							$ref: "#/components/schemas/SMACrossoverConfig",
						},
						{
							$ref: "#/components/schemas/RSIMeanReversionConfig",
						},
						{
							$ref: "#/components/schemas/MomentumConfig",
						},
						{
							$ref: "#/components/schemas/BuyAndHoldConfig",
						},
					],
					discriminator: {
						propertyName: "config_type",
						mapping: {
							buy_and_hold: "#/components/schemas/BuyAndHoldConfig",
							momentum: "#/components/schemas/MomentumConfig",
							rsi_mean_reversion: "#/components/schemas/RSIMeanReversionConfig",
							sma_crossover: "#/components/schemas/SMACrossoverConfig",
						},
					},
				},
				{
					type: "null",
				},
			],
			title: "Default Config",
			description: "기본 설정",
		},
		tags: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					type: "null",
				},
			],
			title: "Tags",
			description: "태그",
		},
	},
	type: "object",
	title: "TemplateUpdate",
	description: "Template update request",
} as const;

export const TestCaseCreateSchema = {
	properties: {
		name: {
			type: "string",
			minLength: 1,
			title: "Name",
		},
		description: {
			type: "string",
			title: "Description",
		},
		expected_metrics: {
			additionalProperties: {
				type: "number",
			},
			type: "object",
			title: "Expected Metrics",
		},
	},
	type: "object",
	required: ["name", "description"],
	title: "TestCaseCreate",
	description: "벤치마크 테스트 케이스",
} as const;

export const TradeSchema = {
	properties: {
		trade_id: {
			type: "string",
			title: "Trade Id",
			description: "거래 ID",
		},
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		trade_type: {
			$ref: "#/components/schemas/TradeType",
		},
		order_type: {
			$ref: "#/components/schemas/OrderType",
			default: "MARKET",
		},
		quantity: {
			type: "number",
			title: "Quantity",
			description: "수량",
		},
		price: {
			type: "number",
			title: "Price",
			description: "체결 가격",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "거래 시간",
		},
		commission: {
			type: "number",
			title: "Commission",
			description: "수수료",
			default: 0,
		},
		slippage: {
			type: "number",
			title: "Slippage",
			description: "슬리피지",
			default: 0,
		},
		strategy_signal_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Strategy Signal Id",
			description: "전략 신호 ID",
		},
		notes: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Notes",
			description: "메모",
		},
	},
	type: "object",
	required: [
		"trade_id",
		"symbol",
		"trade_type",
		"quantity",
		"price",
		"timestamp",
	],
	title: "Trade",
	description: "거래 기록 내장 모델",
} as const;

export const TradeItemSchema = {
	properties: {
		trade_id: {
			type: "string",
			title: "Trade Id",
			description: "거래 ID",
		},
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		side: {
			$ref: "#/components/schemas/TradeSide",
			description: "거래 방향",
		},
		quantity: {
			type: "integer",
			title: "Quantity",
			description: "수량",
		},
		price: {
			type: "number",
			title: "Price",
			description: "가격",
		},
		value: {
			type: "number",
			title: "Value",
			description: "거래 금액",
		},
		pnl: {
			type: "number",
			title: "Pnl",
			description: "손익",
		},
		strategy_name: {
			type: "string",
			title: "Strategy Name",
			description: "전략 이름",
		},
		timestamp: {
			type: "string",
			format: "date-time",
			title: "Timestamp",
			description: "거래 시간",
		},
	},
	type: "object",
	required: [
		"trade_id",
		"symbol",
		"side",
		"quantity",
		"price",
		"value",
		"pnl",
		"strategy_name",
		"timestamp",
	],
	title: "TradeItem",
	description: "거래 항목.",
} as const;

export const TradeSideSchema = {
	type: "string",
	enum: ["buy", "sell"],
	title: "TradeSide",
	description: "거래 방향.",
} as const;

export const TradeTypeSchema = {
	type: "string",
	enum: ["BUY", "SELL"],
	title: "TradeType",
	description: "거래 타입",
} as const;

export const TradesSummarySchema = {
	properties: {
		total_trades: {
			type: "integer",
			title: "Total Trades",
			description: "총 거래 수",
		},
		winning_trades: {
			type: "integer",
			title: "Winning Trades",
			description: "수익 거래 수",
		},
		total_pnl: {
			type: "number",
			title: "Total Pnl",
			description: "총 손익",
		},
	},
	type: "object",
	required: ["total_trades", "winning_trades", "total_pnl"],
	title: "TradesSummary",
	description: "거래 요약.",
} as const;

export const TrainModelRequestSchema = {
	properties: {
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			maxItems: 100,
			minItems: 1,
			title: "Symbols",
			description: "List of stock symbols to train on",
		},
		lookback_days: {
			type: "integer",
			maximum: 2000,
			minimum: 100,
			title: "Lookback Days",
			description: "Number of days of historical data to use",
			default: 500,
		},
		test_size: {
			type: "number",
			maximum: 0.5,
			minimum: 0.1,
			title: "Test Size",
			description: "Test set ratio",
			default: 0.2,
		},
		num_boost_round: {
			type: "integer",
			maximum: 1000,
			minimum: 10,
			title: "Num Boost Round",
			description: "Number of boosting iterations",
			default: 100,
		},
		threshold: {
			type: "number",
			maximum: 0.5,
			minimum: 0.001,
			title: "Threshold",
			description: "Return threshold for buy signal (2% = 0.02)",
			default: 0.02,
		},
	},
	type: "object",
	required: ["symbols"],
	title: "TrainModelRequest",
	description: "Request schema for model training.",
} as const;

export const TrainModelResponseSchema = {
	properties: {
		status: {
			type: "string",
			title: "Status",
			description: "Training status",
		},
		message: {
			type: "string",
			title: "Message",
			description: "Status message",
		},
		task_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Task Id",
			description: "Background task ID",
		},
	},
	type: "object",
	required: ["status", "message"],
	title: "TrainModelResponse",
	description: "Response schema for model training.",
} as const;

export const TrialResultSchema = {
	properties: {
		trial_number: {
			type: "integer",
			title: "Trial Number",
		},
		params: {
			additionalProperties: true,
			type: "object",
			title: "Params",
		},
		value: {
			type: "number",
			title: "Value",
		},
		state: {
			type: "string",
			title: "State",
		},
		sharpe_ratio: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Sharpe Ratio",
		},
		total_return: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Total Return",
		},
		max_drawdown: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Max Drawdown",
		},
		duration_seconds: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Duration Seconds",
		},
	},
	type: "object",
	required: ["trial_number", "params", "value", "state"],
	title: "TrialResult",
	description: "Individual trial result summary.",
} as const;

export const UserCreateSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
		full_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Full Name",
		},
		password: {
			type: "string",
			title: "Password",
		},
		is_active: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Active",
			default: true,
		},
		is_superuser: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Superuser",
			default: false,
		},
		is_verified: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Verified",
			default: false,
		},
		avatar_url: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Avatar Url",
		},
	},
	type: "object",
	required: ["email", "password"],
	title: "UserCreate",
	example: {
		avatar_url: "string",
		email: "user@example.com",
		full_name: "string",
		is_active: true,
		is_superuser: false,
		is_verified: false,
		password: "string",
	},
} as const;

export const UserResponseSchema = {
	properties: {
		email: {
			type: "string",
			format: "email",
			title: "Email",
		},
		full_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Full Name",
		},
		is_active: {
			type: "boolean",
			title: "Is Active",
			default: true,
		},
		is_superuser: {
			type: "boolean",
			title: "Is Superuser",
			default: false,
		},
		is_verified: {
			type: "boolean",
			title: "Is Verified",
			default: false,
		},
		avatar_url: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Avatar Url",
		},
		oauth_accounts: {
			items: {
				$ref: "#/components/schemas/OAuthAccount",
			},
			type: "array",
			title: "Oauth Accounts",
		},
	},
	type: "object",
	required: ["email"],
	title: "UserResponse",
	description: "Base User model.",
	example: {
		_id: "string",
		avatar_url: "string",
		email: "user@example.com",
		full_name: "string",
		is_active: true,
		is_superuser: false,
		is_verified: false,
		oauth_accounts: [
			{
				_id: "string",
				access_token: "string",
				account_email: "user@example.com",
				account_id: "string",
				expires_at: 1234567890,
				oauth_name: "string",
				refresh_token: "string",
			},
		],
	},
} as const;

export const UserUpdateSchema = {
	properties: {
		password: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Password",
		},
		email: {
			anyOf: [
				{
					type: "string",
					format: "email",
				},
				{
					type: "null",
				},
			],
			title: "Email",
		},
		full_name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Full Name",
		},
		is_active: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Active",
		},
		is_superuser: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Superuser",
		},
		is_verified: {
			anyOf: [
				{
					type: "boolean",
				},
				{
					type: "null",
				},
			],
			title: "Is Verified",
		},
		avatar_url: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Avatar Url",
		},
	},
	type: "object",
	title: "UserUpdate",
	example: {
		avatar_url: "string",
		email: "user@example.com",
		full_name: "string",
		is_active: true,
		is_superuser: false,
		is_verified: false,
		password: "string",
	},
} as const;

export const ValidationErrorSchema = {
	properties: {
		loc: {
			items: {
				anyOf: [
					{
						type: "string",
					},
					{
						type: "integer",
					},
				],
			},
			type: "array",
			title: "Location",
		},
		msg: {
			type: "string",
			title: "Message",
		},
		type: {
			type: "string",
			title: "Error Type",
		},
	},
	type: "object",
	required: ["loc", "msg", "type"],
	title: "ValidationError",
} as const;

export const ValidationStatusSchema = {
	type: "string",
	enum: ["valid", "warning", "error"],
	title: "ValidationStatus",
	description: "검증 상태",
} as const;

export const WatchlistCreateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
		},
		description: {
			type: "string",
			title: "Description",
			default: "",
		},
	},
	type: "object",
	required: ["name", "symbols"],
	title: "WatchlistCreate",
	description: "워치리스트 생성 모델",
} as const;

export const WatchlistListResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		watchlists: {
			items: {
				$ref: "#/components/schemas/WatchlistResponse",
			},
			type: "array",
			title: "Watchlists",
			default: [],
		},
		total_count: {
			type: "integer",
			title: "Total Count",
			default: 0,
		},
	},
	type: "object",
	title: "WatchlistListResponse",
	description: "워치리스트 목록 응답 모델",
} as const;

export const WatchlistQuoteItemSchema = {
	properties: {
		symbol: {
			type: "string",
			title: "Symbol",
			description: "심볼",
		},
		name: {
			type: "string",
			title: "Name",
			description: "회사명",
		},
		current_price: {
			type: "number",
			title: "Current Price",
			description: "현재가",
		},
		change: {
			type: "number",
			title: "Change",
			description: "변화량",
		},
		change_percentage: {
			type: "number",
			title: "Change Percentage",
			description: "변화율",
		},
		volume: {
			type: "integer",
			title: "Volume",
			description: "거래량",
		},
		market_cap: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Market Cap",
			description: "시가총액",
		},
	},
	type: "object",
	required: [
		"symbol",
		"name",
		"current_price",
		"change",
		"change_percentage",
		"volume",
	],
	title: "WatchlistQuoteItem",
	description: "관심종목 시세 항목.",
} as const;

export const WatchlistQuotesSchema = {
	properties: {
		symbols: {
			items: {
				$ref: "#/components/schemas/WatchlistQuoteItem",
			},
			type: "array",
			title: "Symbols",
			description: "심볼 목록",
		},
		last_updated: {
			type: "string",
			format: "date-time",
			title: "Last Updated",
			description: "마지막 업데이트",
		},
	},
	type: "object",
	required: ["symbols", "last_updated"],
	title: "WatchlistQuotes",
	description: "관심종목 시세 데이터.",
} as const;

export const WatchlistQuotesResponseSchema = {
	properties: {
		data: {
			$ref: "#/components/schemas/WatchlistQuotes",
			description: "관심종목 시세",
		},
		message: {
			type: "string",
			title: "Message",
			description: "응답 메시지",
			default: "관심종목 시세 조회 성공",
		},
	},
	type: "object",
	required: ["data"],
	title: "WatchlistQuotesResponse",
	description: "관심종목 시세 응답.",
} as const;

export const WatchlistResponseSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		name: {
			type: "string",
			title: "Name",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			default: "",
		},
		created_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Created At",
		},
		updated_at: {
			anyOf: [
				{
					type: "string",
					format: "date-time",
				},
				{
					type: "null",
				},
			],
			title: "Updated At",
		},
	},
	type: "object",
	required: ["name", "symbols"],
	title: "WatchlistResponse",
	description: "워치리스트 응답 모델",
} as const;

export const WatchlistUpdateSchema = {
	properties: {
		user_id: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "User Id",
		},
		symbols: {
			items: {
				type: "string",
			},
			type: "array",
			title: "Symbols",
		},
		name: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Name",
			default: "default",
		},
		description: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "null",
				},
			],
			title: "Description",
			default: "",
		},
	},
	type: "object",
	required: ["symbols"],
	title: "WatchlistUpdate",
	description: "워치리스트 업데이트 모델",
} as const;

export const app__models__evaluation__MetricComparisonSchema = {
	properties: {
		metric_name: {
			type: "string",
			title: "Metric Name",
			description: "메트릭 이름",
		},
		candidate: {
			type: "number",
			title: "Candidate",
			description: "후보 모델 값",
		},
		baseline_average: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Baseline Average",
			description: "기준 평균",
		},
		delta: {
			anyOf: [
				{
					type: "number",
				},
				{
					type: "null",
				},
			],
			title: "Delta",
			description: "차이",
		},
	},
	type: "object",
	required: ["metric_name", "candidate"],
	title: "MetricComparison",
	description: "Comparison between candidate and baseline.",
} as const;

export const app__schemas__model_lifecycle__MetricComparisonSchema = {
	properties: {
		metric_name: {
			type: "string",
			title: "Metric Name",
		},
		values: {
			additionalProperties: {
				type: "number",
			},
			type: "object",
			title: "Values",
		},
	},
	type: "object",
	required: ["metric_name", "values"],
	title: "MetricComparison",
} as const;
