// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { AuthForgotPasswordData, AuthForgotPasswordErrors, AuthForgotPasswordResponses, AuthLoginData, AuthLoginErrors, AuthLoginResponses, AuthLogoutData, AuthLogoutErrors, AuthLogoutResponses, AuthRefreshTokenData, AuthRefreshTokenErrors, AuthRefreshTokenResponses, AuthRegisterData, AuthRegisterErrors, AuthRegisterResponses, AuthRequestVerifyTokenData, AuthRequestVerifyTokenErrors, AuthRequestVerifyTokenResponses, AuthResetPasswordData, AuthResetPasswordErrors, AuthResetPasswordResponses, AuthVerifyData, AuthVerifyErrors, AuthVerifyResponses, AuthVerifyTokenData, AuthVerifyTokenErrors, AuthVerifyTokenResponses, BacktestsCreateAndRunIntegratedBacktestData, BacktestsCreateAndRunIntegratedBacktestErrors, BacktestsCreateAndRunIntegratedBacktestResponses, BacktestsCreateBacktestData, BacktestsCreateBacktestErrors, BacktestsCreateBacktestResponses, BacktestsDeleteBacktestData, BacktestsDeleteBacktestErrors, BacktestsDeleteBacktestResponses, BacktestsExecuteBacktestData, BacktestsExecuteBacktestErrors, BacktestsExecuteBacktestResponses, BacktestsGetBacktestData, BacktestsGetBacktestErrors, BacktestsGetBacktestExecutionsData, BacktestsGetBacktestExecutionsErrors, BacktestsGetBacktestExecutionsResponses, BacktestsGetBacktestResponses, BacktestsGetBacktestResultsData, BacktestsGetBacktestResultsErrors, BacktestsGetBacktestResultsResponses, BacktestsGetBacktestsData, BacktestsGetBacktestsErrors, BacktestsGetBacktestsResponses, BacktestsGetBacktestSummaryAnalyticsData, BacktestsGetBacktestSummaryAnalyticsErrors, BacktestsGetBacktestSummaryAnalyticsResponses, BacktestsGetPerformanceAnalyticsData, BacktestsGetPerformanceAnalyticsErrors, BacktestsGetPerformanceAnalyticsResponses, BacktestsGetTradesAnalyticsData, BacktestsGetTradesAnalyticsErrors, BacktestsGetTradesAnalyticsResponses, BacktestsHealthCheckData, BacktestsHealthCheckErrors, BacktestsHealthCheckResponses, BacktestsUpdateBacktestData, BacktestsUpdateBacktestErrors, BacktestsUpdateBacktestResponses, HealthHealthCheckData, HealthHealthCheckResponses, HealthLivenessProbeData, HealthLivenessProbeResponses, HealthReadinessProbeData, HealthReadinessProbeResponses, MarketDataCollectBulkDataData, MarketDataCollectBulkDataErrors, MarketDataCollectBulkDataResponses, MarketDataCollectCompanyInfoData, MarketDataCollectCompanyInfoErrors, MarketDataCollectCompanyInfoResponses, MarketDataCollectMarketDataData, MarketDataCollectMarketDataErrors, MarketDataCollectMarketDataResponses, MarketDataGetAnalystRecommendationsData, MarketDataGetAnalystRecommendationsErrors, MarketDataGetAnalystRecommendationsResponses, MarketDataGetBalanceSheetData, MarketDataGetBalanceSheetErrors, MarketDataGetBalanceSheetResponses, MarketDataGetCashFlowData, MarketDataGetCashFlowErrors, MarketDataGetCashFlowResponses, MarketDataGetCompanyOverviewData, MarketDataGetCompanyOverviewErrors, MarketDataGetCompanyOverviewResponses, MarketDataGetConsumerSentimentData, MarketDataGetConsumerSentimentErrors, MarketDataGetConsumerSentimentResponses, MarketDataGetDailyPricesData, MarketDataGetDailyPricesErrors, MarketDataGetDailyPricesResponses, MarketDataGetDataCoverageData, MarketDataGetDataCoverageErrors, MarketDataGetDataCoverageResponses, MarketDataGetEarningsData, MarketDataGetEarningsErrors, MarketDataGetEarningsResponses, MarketDataGetEmploymentDataData, MarketDataGetEmploymentDataErrors, MarketDataGetEmploymentDataResponses, MarketDataGetGdpDataData, MarketDataGetGdpDataErrors, MarketDataGetGdpDataResponses, MarketDataGetHistoricalDataData, MarketDataGetHistoricalDataErrors, MarketDataGetHistoricalDataResponses, MarketDataGetIncomeStatementData, MarketDataGetIncomeStatementErrors, MarketDataGetIncomeStatementResponses, MarketDataGetInflationDataData, MarketDataGetInflationDataErrors, MarketDataGetInflationDataResponses, MarketDataGetInterestRatesData, MarketDataGetInterestRatesErrors, MarketDataGetInterestRatesResponses, MarketDataGetIntradayDataData, MarketDataGetIntradayDataErrors, MarketDataGetIntradayDataResponses, MarketDataGetMarketDataInfoData, MarketDataGetMarketDataInfoErrors, MarketDataGetMarketDataInfoResponses, MarketDataGetNewsData, MarketDataGetNewsErrors, MarketDataGetNewsResponses, MarketDataGetQuoteData, MarketDataGetQuoteErrors, MarketDataGetQuoteResponses, MarketDataGetSentimentAnalysisData, MarketDataGetSentimentAnalysisErrors, MarketDataGetSentimentAnalysisResponses, MarketDataGetSocialSentimentData, MarketDataGetSocialSentimentErrors, MarketDataGetSocialSentimentResponses, MarketDataGetSystemStatusData, MarketDataGetSystemStatusErrors, MarketDataGetSystemStatusResponses, MarketDataHealthCheckData, MarketDataHealthCheckErrors, MarketDataHealthCheckResponses, OAuth2AuthorizeData, OAuth2AuthorizeErrors, OAuth2AuthorizeResponses, OAuth2CallbackData, OAuth2CallbackErrors, OAuth2CallbackResponses, StrategyCreateStrategyData, StrategyCreateStrategyErrors, StrategyCreateStrategyFromTemplateData, StrategyCreateStrategyFromTemplateErrors, StrategyCreateStrategyFromTemplateResponses, StrategyCreateStrategyResponses, StrategyCreateTemplateData, StrategyCreateTemplateErrors, StrategyCreateTemplateResponses, StrategyDeleteStrategyData, StrategyDeleteStrategyErrors, StrategyDeleteStrategyResponses, StrategyDeleteTemplateData, StrategyDeleteTemplateErrors, StrategyDeleteTemplateResponses, StrategyExecuteStrategyData, StrategyExecuteStrategyErrors, StrategyExecuteStrategyResponses, StrategyGetStrategiesData, StrategyGetStrategiesErrors, StrategyGetStrategiesResponses, StrategyGetStrategyData, StrategyGetStrategyErrors, StrategyGetStrategyExecutionsData, StrategyGetStrategyExecutionsErrors, StrategyGetStrategyExecutionsResponses, StrategyGetStrategyPerformanceData, StrategyGetStrategyPerformanceErrors, StrategyGetStrategyPerformanceResponses, StrategyGetStrategyResponses, StrategyGetTemplateData, StrategyGetTemplateErrors, StrategyGetTemplateResponses, StrategyGetTemplatesData, StrategyGetTemplatesErrors, StrategyGetTemplatesResponses, StrategyGetTemplateUsageStatsData, StrategyGetTemplateUsageStatsErrors, StrategyGetTemplateUsageStatsResponses, StrategyUpdateStrategyData, StrategyUpdateStrategyErrors, StrategyUpdateStrategyResponses, StrategyUpdateTemplateData, StrategyUpdateTemplateErrors, StrategyUpdateTemplateResponses, UserDeleteUserData, UserDeleteUserErrors, UserDeleteUserResponses, UserGetMyOauthAccountsData, UserGetMyOauthAccountsErrors, UserGetMyOauthAccountsResponses, UserGetUserData, UserGetUserErrors, UserGetUserMeData, UserGetUserMeErrors, UserGetUserMeResponses, UserGetUserOauthAccountsData, UserGetUserOauthAccountsErrors, UserGetUserOauthAccountsResponses, UserGetUserResponses, UserRemoveOauthAccountData, UserRemoveOauthAccountErrors, UserRemoveOauthAccountResponses, UserUpdateUserData, UserUpdateUserErrors, UserUpdateUserMeData, UserUpdateUserMeErrors, UserUpdateUserMeResponses, UserUpdateUserResponses, WatchlistsCreateOrUpdateWatchlistData, WatchlistsCreateOrUpdateWatchlistErrors, WatchlistsCreateOrUpdateWatchlistResponses, WatchlistsCreateWatchlistData, WatchlistsCreateWatchlistErrors, WatchlistsCreateWatchlistResponses, WatchlistsDeleteWatchlistData, WatchlistsDeleteWatchlistErrors, WatchlistsDeleteWatchlistResponses, WatchlistsGetWatchlistCoverageData, WatchlistsGetWatchlistCoverageErrors, WatchlistsGetWatchlistCoverageResponses, WatchlistsGetWatchlistData, WatchlistsGetWatchlistErrors, WatchlistsGetWatchlistResponses, WatchlistsListWatchlistsData, WatchlistsListWatchlistsErrors, WatchlistsListWatchlistsResponses, WatchlistsSetupDefaultWatchlistData, WatchlistsSetupDefaultWatchlistErrors, WatchlistsSetupDefaultWatchlistResponses, WatchlistsUpdateWatchlistData, WatchlistsUpdateWatchlistErrors, WatchlistsUpdateWatchlistResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class HealthService {
    /**
     * Health Check
     * Get comprehensive health status.
     */
    public static healthCheck<ThrowOnError extends boolean = false>(options?: Options<HealthHealthCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<HealthHealthCheckResponses, unknown, ThrowOnError>({
            url: '/health/',
            ...options
        });
    }

    /**
     * Liveness Probe
     * Kubernetes liveness probe endpoint.
     */
    public static livenessProbe<ThrowOnError extends boolean = false>(options?: Options<HealthLivenessProbeData, ThrowOnError>) {
        return (options?.client ?? client).get<HealthLivenessProbeResponses, unknown, ThrowOnError>({
            url: '/health/live',
            ...options
        });
    }

    /**
     * Readiness Probe
     * Kubernetes readiness probe endpoint.
     */
    public static readinessProbe<ThrowOnError extends boolean = false>(options?: Options<HealthReadinessProbeData, ThrowOnError>) {
        return (options?.client ?? client).get<HealthReadinessProbeResponses, unknown, ThrowOnError>({
            url: '/health/ready',
            ...options
        });
    }
}

export class AuthService {
    /**
     * Login
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<AuthLoginData, ThrowOnError>) {
        return (options.client ?? client).post<AuthLoginResponses, AuthLoginErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            url: '/api/v1/auth/login',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }

    /**
     * Logout
     * 로그아웃 엔드포인트.
     *
     * 쿠키에서 토큰을 삭제하고 로그아웃 처리를 합니다.
     */
    public static logout<ThrowOnError extends boolean = false>(options?: Options<AuthLogoutData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthLogoutResponses, AuthLogoutErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/auth/logout',
            ...options
        });
    }

    /**
     * Refresh Token
     * JWT 토큰 갱신 엔드포인트
     */
    public static refreshToken<ThrowOnError extends boolean = false>(options?: Options<AuthRefreshTokenData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthRefreshTokenResponses, AuthRefreshTokenErrors, ThrowOnError>({
            url: '/api/v1/auth/refresh',
            ...options
        });
    }

    /**
     * Verify Token
     * 토큰 검증 및 사용자 정보 반환 (디버깅용)
     */
    public static verifyToken<ThrowOnError extends boolean = false>(options?: Options<AuthVerifyTokenData, ThrowOnError>) {
        return (options?.client ?? client).get<AuthVerifyTokenResponses, AuthVerifyTokenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/auth/token/verify',
            ...options
        });
    }

    /**
     * Register
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<AuthRegisterData, ThrowOnError>) {
        return (options.client ?? client).post<AuthRegisterResponses, AuthRegisterErrors, ThrowOnError>({
            url: '/api/v1/auth/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Forgot Password
     */
    public static forgotPassword<ThrowOnError extends boolean = false>(options: Options<AuthForgotPasswordData, ThrowOnError>) {
        return (options.client ?? client).post<AuthForgotPasswordResponses, AuthForgotPasswordErrors, ThrowOnError>({
            url: '/api/v1/auth/forgot-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Reset Password
     */
    public static resetPassword<ThrowOnError extends boolean = false>(options: Options<AuthResetPasswordData, ThrowOnError>) {
        return (options.client ?? client).post<AuthResetPasswordResponses, AuthResetPasswordErrors, ThrowOnError>({
            url: '/api/v1/auth/reset-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Request Verify Token
     */
    public static requestVerifyToken<ThrowOnError extends boolean = false>(options: Options<AuthRequestVerifyTokenData, ThrowOnError>) {
        return (options.client ?? client).post<AuthRequestVerifyTokenResponses, AuthRequestVerifyTokenErrors, ThrowOnError>({
            url: '/api/v1/auth/request-verify-token',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Verify
     */
    public static verify<ThrowOnError extends boolean = false>(options: Options<AuthVerifyData, ThrowOnError>) {
        return (options.client ?? client).post<AuthVerifyResponses, AuthVerifyErrors, ThrowOnError>({
            url: '/api/v1/auth/verify',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class UserService {
    /**
     * Get User Me
     */
    public static getUserMe<ThrowOnError extends boolean = false>(options?: Options<UserGetUserMeData, ThrowOnError>) {
        return (options?.client ?? client).get<UserGetUserMeResponses, UserGetUserMeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }

    /**
     * Update User Me
     */
    public static updateUserMe<ThrowOnError extends boolean = false>(options: Options<UserUpdateUserMeData, ThrowOnError>) {
        return (options.client ?? client).patch<UserUpdateUserMeResponses, UserUpdateUserMeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete User
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<UserDeleteUserData, ThrowOnError>) {
        return (options.client ?? client).delete<UserDeleteUserResponses, UserDeleteUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{id}',
            ...options
        });
    }

    /**
     * Get User
     */
    public static getUser<ThrowOnError extends boolean = false>(options: Options<UserGetUserData, ThrowOnError>) {
        return (options.client ?? client).get<UserGetUserResponses, UserGetUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{id}',
            ...options
        });
    }

    /**
     * Update User
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: Options<UserUpdateUserData, ThrowOnError>) {
        return (options.client ?? client).patch<UserUpdateUserResponses, UserUpdateUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get My Oauth Accounts
     * 현재 사용자의 연결된 OAuth 계정 목록을 조회합니다.
     */
    public static getMyOauthAccounts<ThrowOnError extends boolean = false>(options?: Options<UserGetMyOauthAccountsData, ThrowOnError>) {
        return (options?.client ?? client).get<UserGetMyOauthAccountsResponses, UserGetMyOauthAccountsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/oauth-accounts',
            ...options
        });
    }

    /**
     * Remove Oauth Account
     * 특정 OAuth 계정 연결을 해제합니다.
     */
    public static removeOauthAccount<ThrowOnError extends boolean = false>(options: Options<UserRemoveOauthAccountData, ThrowOnError>) {
        return (options.client ?? client).delete<UserRemoveOauthAccountResponses, UserRemoveOauthAccountErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/oauth-accounts/{oauth_name}/{account_id}',
            ...options
        });
    }

    /**
     * Get User Oauth Accounts
     * 특정 사용자의 OAuth 계정 목록을 조회합니다. (관리자 전용)
     */
    public static getUserOauthAccounts<ThrowOnError extends boolean = false>(options: Options<UserGetUserOauthAccountsData, ThrowOnError>) {
        return (options.client ?? client).get<UserGetUserOauthAccountsResponses, UserGetUserOauthAccountsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}/oauth-accounts',
            ...options
        });
    }
}

export class OAuth2Service {
    /**
     * Authorize
     * Initiate the OAuth2 authorization process for associating an OAuth account
     * with the currently authenticated user.
     */
    public static authorize<ThrowOnError extends boolean = false>(options: Options<OAuth2AuthorizeData, ThrowOnError>) {
        return (options.client ?? client).get<OAuth2AuthorizeResponses, OAuth2AuthorizeErrors, ThrowOnError>({
            url: '/api/v1/oauth2/{provider}/authorize',
            ...options
        });
    }

    /**
     * Callback
     * The response varies based on the authentication backend used.
     */
    public static callback<ThrowOnError extends boolean = false>(options: Options<OAuth2CallbackData, ThrowOnError>) {
        return (options.client ?? client).get<OAuth2CallbackResponses, OAuth2CallbackErrors, ThrowOnError>({
            url: '/api/v1/oauth2/{provider}/callback',
            ...options
        });
    }
}

export class MarketDataService {
    /**
     * 일일 주가 데이터 조회
     * 지정된 종목의 일일 주가 데이터(OHLCV)를 조회합니다.
     */
    public static 일일주가데이터조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetDailyPricesData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetDailyPricesResponses, MarketDataGetDailyPricesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/stock/daily/{symbol}',
            ...options
        });
    }

    /**
     * 실시간 주식 호가 조회
     * 지정된 종목의 실시간 호가 정보를 조회합니다.
     */
    public static 실시간주식호가조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetQuoteData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetQuoteResponses, MarketDataGetQuoteErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/stock/quote/{symbol}',
            ...options
        });
    }

    /**
     * 실시간/인트라데이 데이터 조회
     * 지정된 종목의 실시간 또는 분봉 데이터를 조회합니다.
     */
    public static 실시간/인트라데이데이터조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetIntradayDataData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetIntradayDataResponses, MarketDataGetIntradayDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/stock/intraday/{symbol}',
            ...options
        });
    }

    /**
     * 장기 히스토리 데이터 조회
     * 지정된 종목의 장기 히스토리 데이터를 조회합니다.
     */
    public static 장기히스토리데이터조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetHistoricalDataData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetHistoricalDataResponses, MarketDataGetHistoricalDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/stock/historical/{symbol}',
            ...options
        });
    }

    /**
     * 기업 개요 조회
     * 지정된 종목의 기업 개요 정보를 조회합니다.
     */
    public static 기업개요조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetCompanyOverviewData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetCompanyOverviewResponses, MarketDataGetCompanyOverviewErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/fundamental/overview/{symbol}',
            ...options
        });
    }

    /**
     * 손익계산서 조회
     * 지정된 종목의 손익계산서를 조회합니다.
     */
    public static 손익계산서조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetIncomeStatementData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetIncomeStatementResponses, MarketDataGetIncomeStatementErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/fundamental/income-statement/{symbol}',
            ...options
        });
    }

    /**
     * 재무상태표 조회
     * 지정된 종목의 재무상태표를 조회합니다.
     */
    public static 재무상태표조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetBalanceSheetData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetBalanceSheetResponses, MarketDataGetBalanceSheetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/fundamental/balance-sheet/{symbol}',
            ...options
        });
    }

    /**
     * 현금흐름표 조회
     * 지정된 종목의 현금흐름표를 조회합니다.
     */
    public static 현금흐름표조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetCashFlowData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetCashFlowResponses, MarketDataGetCashFlowErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/fundamental/cash-flow/{symbol}',
            ...options
        });
    }

    /**
     * 실적 데이터 조회
     * 지정된 종목의 실적 데이터를 조회합니다.
     */
    public static 실적데이터조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetEarningsData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetEarningsResponses, MarketDataGetEarningsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/fundamental/earnings/{symbol}',
            ...options
        });
    }

    /**
     * GDP 데이터 조회
     * 미국 GDP 데이터를 조회합니다.
     */
    public static gdp데이터조회<ThrowOnError extends boolean = false>(options?: Options<MarketDataGetGdpDataData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataGetGdpDataResponses, MarketDataGetGdpDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/economic/gdp',
            ...options
        });
    }

    /**
     * 인플레이션 데이터 조회
     * 미국 인플레이션 지표 데이터를 조회합니다.
     */
    public static 인플레이션데이터조회<ThrowOnError extends boolean = false>(options?: Options<MarketDataGetInflationDataData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataGetInflationDataResponses, MarketDataGetInflationDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/economic/inflation',
            ...options
        });
    }

    /**
     * 금리 데이터 조회
     * 미국 기준금리 및 채권 수익률 데이터를 조회합니다.
     */
    public static 금리데이터조회<ThrowOnError extends boolean = false>(options?: Options<MarketDataGetInterestRatesData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataGetInterestRatesResponses, MarketDataGetInterestRatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/economic/interest-rates',
            ...options
        });
    }

    /**
     * 고용 지표 조회
     * 미국 실업률 및 고용 관련 지표를 조회합니다.
     */
    public static 고용지표조회<ThrowOnError extends boolean = false>(options?: Options<MarketDataGetEmploymentDataData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataGetEmploymentDataResponses, MarketDataGetEmploymentDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/economic/employment',
            ...options
        });
    }

    /**
     * 소비자 심리 지수 조회
     * 미국 소비자 심리 지수를 조회합니다.
     */
    public static 소비자심리지수조회<ThrowOnError extends boolean = false>(options?: Options<MarketDataGetConsumerSentimentData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataGetConsumerSentimentResponses, MarketDataGetConsumerSentimentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/economic/consumer-sentiment',
            ...options
        });
    }

    /**
     * 종목 뉴스 조회
     * 지정된 종목 관련 뉴스를 조회합니다.
     */
    public static 종목뉴스조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetNewsData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetNewsResponses, MarketDataGetNewsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/intelligence/news/{symbol}',
            ...options
        });
    }

    /**
     * 감정 분석 조회
     * 지정된 종목의 감정 분석 결과를 조회합니다.
     */
    public static 감정분석조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetSentimentAnalysisData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetSentimentAnalysisResponses, MarketDataGetSentimentAnalysisErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/intelligence/sentiment/{symbol}',
            ...options
        });
    }

    /**
     * 분석가 추천 조회
     * 지정된 종목의 분석가 추천 정보를 조회합니다.
     */
    public static 분석가추천조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetAnalystRecommendationsData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetAnalystRecommendationsResponses, MarketDataGetAnalystRecommendationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/intelligence/analyst-recommendations/{symbol}',
            ...options
        });
    }

    /**
     * 소셜 미디어 감정 분석 조회
     * 지정된 종목의 소셜 미디어 감정 분석을 조회합니다.
     */
    public static 소셜미디어감정분석조회<ThrowOnError extends boolean = false>(options: Options<MarketDataGetSocialSentimentData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetSocialSentimentResponses, MarketDataGetSocialSentimentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/intelligence/social-sentiment/{symbol}',
            ...options
        });
    }

    /**
     * 기업 정보 수집
     * 지정된 심볼의 기업 정보를 수집하여 저장
     *
     * Alpha Vantage API를 통해 기업의 기본 정보, 재무 지표,
     * 업종 분류 등을 수집하고 데이터베이스에 저장합니다.
     */
    public static 기업정보수집<ThrowOnError extends boolean = false>(options: Options<MarketDataCollectCompanyInfoData, ThrowOnError>) {
        return (options.client ?? client).post<MarketDataCollectCompanyInfoResponses, MarketDataCollectCompanyInfoErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/management/collect/company-info/{symbol}',
            ...options
        });
    }

    /**
     * 주가 데이터 수집
     * 지정된 심볼의 주가 데이터를 수집하여 저장
     *
     * Alpha Vantage API를 통해 일일 OHLCV 데이터를 수집하고
     * DuckDB 캐시 및 MongoDB에 저장합니다.
     */
    public static 주가데이터수집<ThrowOnError extends boolean = false>(options: Options<MarketDataCollectMarketDataData, ThrowOnError>) {
        return (options.client ?? client).post<MarketDataCollectMarketDataResponses, MarketDataCollectMarketDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/management/collect/market-data/{symbol}',
            ...options
        });
    }

    /**
     * 대량 데이터 수집
     * 여러 심볼의 데이터를 일괄 수집
     *
     * 백그라운드 작업으로 처리되며, 대량의 심볼에 대해
     * 기업 정보와 주가 데이터를 순차적으로 수집합니다.
     */
    public static 대량데이터수집<ThrowOnError extends boolean = false>(options: Options<MarketDataCollectBulkDataData, ThrowOnError>) {
        return (options.client ?? client).post<MarketDataCollectBulkDataResponses, MarketDataCollectBulkDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/management/collect/bulk',
            ...options
        });
    }

    /**
     * 데이터 커버리지 확인
     * 지정된 심볼의 데이터 커버리지 정보 조회
     *
     * 기업 정보, 주가 데이터의 수집 상태와 품질을 확인합니다.
     */
    public static 데이터커버리지확인<ThrowOnError extends boolean = false>(options: Options<MarketDataGetDataCoverageData, ThrowOnError>) {
        return (options.client ?? client).get<MarketDataGetDataCoverageResponses, MarketDataGetDataCoverageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/management/coverage/{symbol}',
            ...options
        });
    }

    /**
     * 시스템 상태 조회
     * 시장 데이터 시스템의 전반적인 상태 조회
     *
     * API 연결 상태, 캐시 성능, 수집 통계 등을 확인합니다.
     */
    public static 시스템상태조회<ThrowOnError extends boolean = false>(options?: Options<MarketDataGetSystemStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataGetSystemStatusResponses, MarketDataGetSystemStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/management/status',
            ...options
        });
    }

    /**
     * Market Data API 정보
     * 마켓 데이터 API 정보 및 사용 가능한 엔드포인트 목록
     */
    public static marketDataApi정보<ThrowOnError extends boolean = false>(options?: Options<MarketDataGetMarketDataInfoData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataGetMarketDataInfoResponses, MarketDataGetMarketDataInfoErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/',
            ...options
        });
    }

    /**
     * Market Data 서비스 상태 확인
     * 마켓 데이터 서비스 상태 확인
     */
    public static marketData서비스상태확인<ThrowOnError extends boolean = false>(options?: Options<MarketDataHealthCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketDataHealthCheckResponses, MarketDataHealthCheckErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/market-data/health',
            ...options
        });
    }
}

export class StrategyService {
    /**
     * Get Strategies
     * Get list of strategies
     */
    public static getStrategies<ThrowOnError extends boolean = false>(options?: Options<StrategyGetStrategiesData, ThrowOnError>) {
        return (options?.client ?? client).get<StrategyGetStrategiesResponses, StrategyGetStrategiesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/',
            ...options
        });
    }

    /**
     * Create Strategy
     * Create a new strategy
     */
    public static createStrategy<ThrowOnError extends boolean = false>(options: Options<StrategyCreateStrategyData, ThrowOnError>) {
        return (options.client ?? client).post<StrategyCreateStrategyResponses, StrategyCreateStrategyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Strategy
     * Delete strategy (soft delete)
     */
    public static deleteStrategy<ThrowOnError extends boolean = false>(options: Options<StrategyDeleteStrategyData, ThrowOnError>) {
        return (options.client ?? client).delete<StrategyDeleteStrategyResponses, StrategyDeleteStrategyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/{strategy_id}',
            ...options
        });
    }

    /**
     * Get Strategy
     * Get strategy by ID
     */
    public static getStrategy<ThrowOnError extends boolean = false>(options: Options<StrategyGetStrategyData, ThrowOnError>) {
        return (options.client ?? client).get<StrategyGetStrategyResponses, StrategyGetStrategyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/{strategy_id}',
            ...options
        });
    }

    /**
     * Update Strategy
     * Update strategy
     */
    public static updateStrategy<ThrowOnError extends boolean = false>(options: Options<StrategyUpdateStrategyData, ThrowOnError>) {
        return (options.client ?? client).put<StrategyUpdateStrategyResponses, StrategyUpdateStrategyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/{strategy_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Execute Strategy
     * Execute strategy and generate signal
     */
    public static executeStrategy<ThrowOnError extends boolean = false>(options: Options<StrategyExecuteStrategyData, ThrowOnError>) {
        return (options.client ?? client).post<StrategyExecuteStrategyResponses, StrategyExecuteStrategyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/{strategy_id}/execute',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get Strategy Executions
     * Get strategy execution history
     */
    public static getStrategyExecutions<ThrowOnError extends boolean = false>(options: Options<StrategyGetStrategyExecutionsData, ThrowOnError>) {
        return (options.client ?? client).get<StrategyGetStrategyExecutionsResponses, StrategyGetStrategyExecutionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/{strategy_id}/executions',
            ...options
        });
    }

    /**
     * Get Strategy Performance
     * Get strategy performance metrics
     */
    public static getStrategyPerformance<ThrowOnError extends boolean = false>(options: Options<StrategyGetStrategyPerformanceData, ThrowOnError>) {
        return (options.client ?? client).get<StrategyGetStrategyPerformanceResponses, StrategyGetStrategyPerformanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/{strategy_id}/performance',
            ...options
        });
    }

    /**
     * Get Templates
     * Get list of strategy templates
     */
    public static getTemplates<ThrowOnError extends boolean = false>(options?: Options<StrategyGetTemplatesData, ThrowOnError>) {
        return (options?.client ?? client).get<StrategyGetTemplatesResponses, StrategyGetTemplatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/templates/',
            ...options
        });
    }

    /**
     * Create Template
     * Create a new strategy template (Superuser only)
     */
    public static createTemplate<ThrowOnError extends boolean = false>(options: Options<StrategyCreateTemplateData, ThrowOnError>) {
        return (options.client ?? client).post<StrategyCreateTemplateResponses, StrategyCreateTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/templates/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Template
     * Delete template by ID (Superuser only)
     */
    public static deleteTemplate<ThrowOnError extends boolean = false>(options: Options<StrategyDeleteTemplateData, ThrowOnError>) {
        return (options.client ?? client).delete<StrategyDeleteTemplateResponses, StrategyDeleteTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/templates/{template_id}',
            ...options
        });
    }

    /**
     * Get Template
     * Get template by ID
     */
    public static getTemplate<ThrowOnError extends boolean = false>(options: Options<StrategyGetTemplateData, ThrowOnError>) {
        return (options.client ?? client).get<StrategyGetTemplateResponses, StrategyGetTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/templates/{template_id}',
            ...options
        });
    }

    /**
     * Update Template
     * Update template by ID (Superuser only)
     */
    public static updateTemplate<ThrowOnError extends boolean = false>(options: Options<StrategyUpdateTemplateData, ThrowOnError>) {
        return (options.client ?? client).patch<StrategyUpdateTemplateResponses, StrategyUpdateTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/templates/{template_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Create Strategy From Template
     * Create a strategy instance from template
     */
    public static createStrategyFromTemplate<ThrowOnError extends boolean = false>(options: Options<StrategyCreateStrategyFromTemplateData, ThrowOnError>) {
        return (options.client ?? client).post<StrategyCreateStrategyFromTemplateResponses, StrategyCreateStrategyFromTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/templates/{template_id}/create-strategy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get Template Usage Stats
     * Get template usage statistics
     */
    public static getTemplateUsageStats<ThrowOnError extends boolean = false>(options?: Options<StrategyGetTemplateUsageStatsData, ThrowOnError>) {
        return (options?.client ?? client).get<StrategyGetTemplateUsageStatsResponses, StrategyGetTemplateUsageStatsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/strategies/templates/analytics/usage-stats',
            ...options
        });
    }
}

export class BacktestsService {
    /**
     * Get Backtests
     * Get list of backtests
     */
    public static getBacktests<ThrowOnError extends boolean = false>(options?: Options<BacktestsGetBacktestsData, ThrowOnError>) {
        return (options?.client ?? client).get<BacktestsGetBacktestsResponses, BacktestsGetBacktestsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/',
            ...options
        });
    }

    /**
     * Create Backtest
     * Create a new backtest
     */
    public static createBacktest<ThrowOnError extends boolean = false>(options: Options<BacktestsCreateBacktestData, ThrowOnError>) {
        return (options.client ?? client).post<BacktestsCreateBacktestResponses, BacktestsCreateBacktestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Backtest
     * Delete backtest
     */
    public static deleteBacktest<ThrowOnError extends boolean = false>(options: Options<BacktestsDeleteBacktestData, ThrowOnError>) {
        return (options.client ?? client).delete<BacktestsDeleteBacktestResponses, BacktestsDeleteBacktestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/{backtest_id}',
            ...options
        });
    }

    /**
     * Get Backtest
     * Get backtest by ID
     */
    public static getBacktest<ThrowOnError extends boolean = false>(options: Options<BacktestsGetBacktestData, ThrowOnError>) {
        return (options.client ?? client).get<BacktestsGetBacktestResponses, BacktestsGetBacktestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/{backtest_id}',
            ...options
        });
    }

    /**
     * Update Backtest
     * Update backtest
     */
    public static updateBacktest<ThrowOnError extends boolean = false>(options: Options<BacktestsUpdateBacktestData, ThrowOnError>) {
        return (options.client ?? client).put<BacktestsUpdateBacktestResponses, BacktestsUpdateBacktestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/{backtest_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Execute Backtest
     * Execute backtest with trading signals
     */
    public static executeBacktest<ThrowOnError extends boolean = false>(options: Options<BacktestsExecuteBacktestData, ThrowOnError>) {
        return (options.client ?? client).post<BacktestsExecuteBacktestResponses, BacktestsExecuteBacktestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/{backtest_id}/execute',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get Backtest Executions
     * Get execution history for a backtest
     */
    public static getBacktestExecutions<ThrowOnError extends boolean = false>(options: Options<BacktestsGetBacktestExecutionsData, ThrowOnError>) {
        return (options.client ?? client).get<BacktestsGetBacktestExecutionsResponses, BacktestsGetBacktestExecutionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/{backtest_id}/executions',
            ...options
        });
    }

    /**
     * Get Backtest Results
     * Get backtest results from DuckDB (고성능 분석용)
     */
    public static getBacktestResults<ThrowOnError extends boolean = false>(options?: Options<BacktestsGetBacktestResultsData, ThrowOnError>) {
        return (options?.client ?? client).get<BacktestsGetBacktestResultsResponses, BacktestsGetBacktestResultsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/results/',
            ...options
        });
    }

    /**
     * Create And Run Integrated Backtest
     * 통합 백테스트 생성 및 실행 - 모든 서비스 연동
     */
    public static createAndRunIntegratedBacktest<ThrowOnError extends boolean = false>(options: Options<BacktestsCreateAndRunIntegratedBacktestData, ThrowOnError>) {
        return (options.client ?? client).post<BacktestsCreateAndRunIntegratedBacktestResponses, BacktestsCreateAndRunIntegratedBacktestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/integrated',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Health Check
     * 백테스트 시스템 상태 확인 (DuckDB + MongoDB 통합 상태)
     */
    public static healthCheck<ThrowOnError extends boolean = false>(options?: Options<BacktestsHealthCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<BacktestsHealthCheckResponses, BacktestsHealthCheckErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/health',
            ...options
        });
    }

    /**
     * Get Performance Analytics
     * 백테스트 성과 분석 (DuckDB 고성능 분석)
     */
    public static getPerformanceAnalytics<ThrowOnError extends boolean = false>(options?: Options<BacktestsGetPerformanceAnalyticsData, ThrowOnError>) {
        return (options?.client ?? client).get<BacktestsGetPerformanceAnalyticsResponses, BacktestsGetPerformanceAnalyticsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/analytics/performance-stats',
            ...options
        });
    }

    /**
     * Get Trades Analytics
     * 거래 기록 분석 (DuckDB 고성능 쿼리)
     */
    public static getTradesAnalytics<ThrowOnError extends boolean = false>(options?: Options<BacktestsGetTradesAnalyticsData, ThrowOnError>) {
        return (options?.client ?? client).get<BacktestsGetTradesAnalyticsResponses, BacktestsGetTradesAnalyticsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/analytics/trades',
            ...options
        });
    }

    /**
     * Get Backtest Summary Analytics
     * 백테스트 결과 요약 분석 (DuckDB 기반)
     */
    public static getBacktestSummaryAnalytics<ThrowOnError extends boolean = false>(options?: Options<BacktestsGetBacktestSummaryAnalyticsData, ThrowOnError>) {
        return (options?.client ?? client).get<BacktestsGetBacktestSummaryAnalyticsResponses, BacktestsGetBacktestSummaryAnalyticsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/backtests/analytics/summary',
            ...options
        });
    }
}

export class WatchlistsService {
    /**
     * 워치리스트 목록 조회
     * 사용자의 모든 워치리스트 목록 조회
     *
     * 사용자에게 속한 모든 워치리스트의 요약 정보를 반환합니다.
     */
    public static 워치리스트목록조회<ThrowOnError extends boolean = false>(options?: Options<WatchlistsListWatchlistsData, ThrowOnError>) {
        return (options?.client ?? client).get<WatchlistsListWatchlistsResponses, WatchlistsListWatchlistsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/',
            ...options
        });
    }

    /**
     * 워치리스트 생성/업데이트
     * 워치리스트 생성 또는 업데이트
     *
     * 유연한 워치리스트 관리를 위한 엔드포인트입니다.
     * - 이름이 없으면 'default' 워치리스트로 처리
     * - 기존 워치리스트가 있으면 업데이트, 없으면 생성
     * - 심볼 데이터는 백그라운드에서 자동 수집
     */
    public static 워치리스트생성/업데이트<ThrowOnError extends boolean = false>(options: Options<WatchlistsCreateOrUpdateWatchlistData, ThrowOnError>) {
        return (options.client ?? client).post<WatchlistsCreateOrUpdateWatchlistResponses, WatchlistsCreateOrUpdateWatchlistErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * 새 워치리스트 생성
     * 새로운 명명된 워치리스트 생성
     *
     * 명시적인 이름을 가진 새 워치리스트를 생성합니다.
     * 동일한 이름의 워치리스트가 이미 있으면 실패합니다.
     */
    public static 새워치리스트생성<ThrowOnError extends boolean = false>(options: Options<WatchlistsCreateWatchlistData, ThrowOnError>) {
        return (options.client ?? client).post<WatchlistsCreateWatchlistResponses, WatchlistsCreateWatchlistErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/create',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * 워치리스트 삭제
     * 워치리스트 삭제
     */
    public static 워치리스트삭제<ThrowOnError extends boolean = false>(options: Options<WatchlistsDeleteWatchlistData, ThrowOnError>) {
        return (options.client ?? client).delete<WatchlistsDeleteWatchlistResponses, WatchlistsDeleteWatchlistErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/{name}',
            ...options
        });
    }

    /**
     * 특정 워치리스트 조회
     * 특정 워치리스트의 상세 정보 조회
     */
    public static 특정워치리스트조회<ThrowOnError extends boolean = false>(options: Options<WatchlistsGetWatchlistData, ThrowOnError>) {
        return (options.client ?? client).get<WatchlistsGetWatchlistResponses, WatchlistsGetWatchlistErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/{name}',
            ...options
        });
    }

    /**
     * 워치리스트 업데이트
     * 기존 워치리스트 업데이트
     */
    public static 워치리스트업데이트<ThrowOnError extends boolean = false>(options: Options<WatchlistsUpdateWatchlistData, ThrowOnError>) {
        return (options.client ?? client).put<WatchlistsUpdateWatchlistResponses, WatchlistsUpdateWatchlistErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/{name}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * 워치리스트 데이터 커버리지
     * 워치리스트의 데이터 커버리지 정보 조회
     *
     * 각 심볼별로 수집된 데이터의 상태와 품질을 확인합니다.
     */
    public static 워치리스트데이터커버리지<ThrowOnError extends boolean = false>(options: Options<WatchlistsGetWatchlistCoverageData, ThrowOnError>) {
        return (options.client ?? client).get<WatchlistsGetWatchlistCoverageResponses, WatchlistsGetWatchlistCoverageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/{name}/coverage',
            ...options
        });
    }

    /**
     * 기본 워치리스트 설정
     * 기본 워치리스트 설정
     *
     * 인기 주식들로 구성된 기본 워치리스트를 생성합니다.
     */
    public static 기본워치리스트설정<ThrowOnError extends boolean = false>(options?: Options<WatchlistsSetupDefaultWatchlistData, ThrowOnError>) {
        return (options?.client ?? client).post<WatchlistsSetupDefaultWatchlistResponses, WatchlistsSetupDefaultWatchlistErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/watchlists/setup-default',
            ...options
        });
    }
}
