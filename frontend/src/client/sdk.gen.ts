// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer,
} from "./client";
import { client } from "./client.gen";
import type {
	AuthForgotPasswordData,
	AuthForgotPasswordErrors,
	AuthForgotPasswordResponses,
	AuthLoginData,
	AuthLoginErrors,
	AuthLoginResponses,
	AuthLogoutData,
	AuthLogoutErrors,
	AuthLogoutResponses,
	AuthRefreshTokenData,
	AuthRefreshTokenErrors,
	AuthRefreshTokenResponses,
	AuthRegisterData,
	AuthRegisterErrors,
	AuthRegisterResponses,
	AuthRequestVerifyTokenData,
	AuthRequestVerifyTokenErrors,
	AuthRequestVerifyTokenResponses,
	AuthResetPasswordData,
	AuthResetPasswordErrors,
	AuthResetPasswordResponses,
	AuthVerifyData,
	AuthVerifyErrors,
	AuthVerifyResponses,
	AuthVerifyTokenData,
	AuthVerifyTokenErrors,
	AuthVerifyTokenResponses,
	BacktestCreateAndRunIntegratedBacktestData,
	BacktestCreateAndRunIntegratedBacktestErrors,
	BacktestCreateAndRunIntegratedBacktestResponses,
	BacktestCreateBacktestData,
	BacktestCreateBacktestErrors,
	BacktestCreateBacktestResponses,
	BacktestDeleteBacktestData,
	BacktestDeleteBacktestErrors,
	BacktestDeleteBacktestResponses,
	BacktestExecuteBacktestData,
	BacktestExecuteBacktestErrors,
	BacktestExecuteBacktestResponses,
	BacktestGetBacktestData,
	BacktestGetBacktestErrors,
	BacktestGetBacktestExecutionsData,
	BacktestGetBacktestExecutionsErrors,
	BacktestGetBacktestExecutionsResponses,
	BacktestGetBacktestResponses,
	BacktestGetBacktestResultsData,
	BacktestGetBacktestResultsErrors,
	BacktestGetBacktestResultsResponses,
	BacktestGetBacktestsData,
	BacktestGetBacktestsErrors,
	BacktestGetBacktestsResponses,
	BacktestGetBacktestSummaryAnalyticsData,
	BacktestGetBacktestSummaryAnalyticsErrors,
	BacktestGetBacktestSummaryAnalyticsResponses,
	BacktestGetPerformanceAnalyticsData,
	BacktestGetPerformanceAnalyticsErrors,
	BacktestGetPerformanceAnalyticsResponses,
	BacktestGetTradesAnalyticsData,
	BacktestGetTradesAnalyticsErrors,
	BacktestGetTradesAnalyticsResponses,
	BacktestHealthCheckData,
	BacktestHealthCheckErrors,
	BacktestHealthCheckResponses,
	BacktestUpdateBacktestData,
	BacktestUpdateBacktestErrors,
	BacktestUpdateBacktestResponses,
	CryptoGetBitcoinPriceData,
	CryptoGetBitcoinPriceErrors,
	CryptoGetBitcoinPriceResponses,
	CryptoGetBulkExchangeRatesData,
	CryptoGetBulkExchangeRatesErrors,
	CryptoGetBulkExchangeRatesResponses,
	CryptoGetDailyPricesData,
	CryptoGetDailyPricesErrors,
	CryptoGetDailyPricesResponses,
	CryptoGetEthereumPriceData,
	CryptoGetEthereumPriceErrors,
	CryptoGetEthereumPriceResponses,
	CryptoGetExchangeRateData,
	CryptoGetExchangeRateErrors,
	CryptoGetExchangeRateResponses,
	CryptoGetMonthlyPricesData,
	CryptoGetMonthlyPricesErrors,
	CryptoGetMonthlyPricesResponses,
	CryptoGetWeeklyPricesData,
	CryptoGetWeeklyPricesErrors,
	CryptoGetWeeklyPricesResponses,
	DashboardGetDashboardSummaryData,
	DashboardGetDashboardSummaryErrors,
	DashboardGetDashboardSummaryResponses,
	DashboardGetEconomicCalendarData,
	DashboardGetEconomicCalendarErrors,
	DashboardGetEconomicCalendarResponses,
	DashboardGetNewsFeedData,
	DashboardGetNewsFeedErrors,
	DashboardGetNewsFeedResponses,
	DashboardGetPortfolioPerformanceData,
	DashboardGetPortfolioPerformanceErrors,
	DashboardGetPortfolioPerformanceResponses,
	DashboardGetRecentTradesData,
	DashboardGetRecentTradesErrors,
	DashboardGetRecentTradesResponses,
	DashboardGetStrategyComparisonData,
	DashboardGetStrategyComparisonErrors,
	DashboardGetStrategyComparisonResponses,
	DashboardGetWatchlistQuotesData,
	DashboardGetWatchlistQuotesErrors,
	DashboardGetWatchlistQuotesResponses,
	EconomicGetEmploymentDataData,
	EconomicGetEmploymentDataErrors,
	EconomicGetEmploymentDataResponses,
	EconomicGetGdpDataData,
	EconomicGetGdpDataErrors,
	EconomicGetGdpDataResponses,
	EconomicGetInflationDataData,
	EconomicGetInflationDataErrors,
	EconomicGetInflationDataResponses,
	EconomicGetInterestRatesData,
	EconomicGetInterestRatesErrors,
	EconomicGetInterestRatesResponses,
	FundamentalGetBalanceSheetData,
	FundamentalGetBalanceSheetErrors,
	FundamentalGetBalanceSheetResponses,
	FundamentalGetCashFlowData,
	FundamentalGetCashFlowErrors,
	FundamentalGetCashFlowResponses,
	FundamentalGetCompanyOverviewData,
	FundamentalGetCompanyOverviewErrors,
	FundamentalGetCompanyOverviewResponses,
	FundamentalGetEarningsData,
	FundamentalGetEarningsErrors,
	FundamentalGetEarningsResponses,
	FundamentalGetIncomeStatementData,
	FundamentalGetIncomeStatementErrors,
	FundamentalGetIncomeStatementResponses,
	HealthHealthCheckData,
	HealthHealthCheckResponses,
	HealthLivenessProbeData,
	HealthLivenessProbeResponses,
	HealthReadinessProbeData,
	HealthReadinessProbeResponses,
	IntelligenceGetAnalystRecommendationsData,
	IntelligenceGetAnalystRecommendationsErrors,
	IntelligenceGetAnalystRecommendationsResponses,
	IntelligenceGetNewsData,
	IntelligenceGetNewsErrors,
	IntelligenceGetNewsResponses,
	IntelligenceGetSentimentAnalysisData,
	IntelligenceGetSentimentAnalysisErrors,
	IntelligenceGetSentimentAnalysisResponses,
	IntelligenceGetSocialSentimentData,
	IntelligenceGetSocialSentimentErrors,
	IntelligenceGetSocialSentimentResponses,
	MarketDataCollectBulkDataData,
	MarketDataCollectBulkDataErrors,
	MarketDataCollectBulkDataResponses,
	MarketDataCollectCompanyInfoData,
	MarketDataCollectCompanyInfoErrors,
	MarketDataCollectCompanyInfoResponses,
	MarketDataCollectMarketDataData,
	MarketDataCollectMarketDataErrors,
	MarketDataCollectMarketDataResponses,
	MarketDataGetDataCoverageData,
	MarketDataGetDataCoverageErrors,
	MarketDataGetDataCoverageResponses,
	MarketDataGetMarketDataInfoData,
	MarketDataGetMarketDataInfoErrors,
	MarketDataGetMarketDataInfoResponses,
	MarketDataGetSystemStatusData,
	MarketDataGetSystemStatusErrors,
	MarketDataGetSystemStatusResponses,
	MarketDataHealthCheckData,
	MarketDataHealthCheckErrors,
	MarketDataHealthCheckResponses,
	OAuth2AuthorizeData,
	OAuth2AuthorizeErrors,
	OAuth2AuthorizeResponses,
	OAuth2CallbackData,
	OAuth2CallbackErrors,
	OAuth2CallbackResponses,
	StockGetDailyPricesData,
	StockGetDailyPricesErrors,
	StockGetDailyPricesResponses,
	StockGetIntradayDataData,
	StockGetIntradayDataErrors,
	StockGetIntradayDataResponses,
	StockGetMonthlyPricesData,
	StockGetMonthlyPricesErrors,
	StockGetMonthlyPricesResponses,
	StockGetQuoteData,
	StockGetQuoteErrors,
	StockGetQuoteResponses,
	StockGetWeeklyPricesData,
	StockGetWeeklyPricesErrors,
	StockGetWeeklyPricesResponses,
	StockSearchStockSymbolsData,
	StockSearchStockSymbolsErrors,
	StockSearchStockSymbolsResponses,
	StrategyCreateStrategyData,
	StrategyCreateStrategyErrors,
	StrategyCreateStrategyResponses,
	StrategyDeleteStrategyData,
	StrategyDeleteStrategyErrors,
	StrategyDeleteStrategyResponses,
	StrategyExecuteStrategyData,
	StrategyExecuteStrategyErrors,
	StrategyExecuteStrategyResponses,
	StrategyGetStrategiesData,
	StrategyGetStrategiesErrors,
	StrategyGetStrategiesResponses,
	StrategyGetStrategyData,
	StrategyGetStrategyErrors,
	StrategyGetStrategyExecutionsData,
	StrategyGetStrategyExecutionsErrors,
	StrategyGetStrategyExecutionsResponses,
	StrategyGetStrategyPerformanceData,
	StrategyGetStrategyPerformanceErrors,
	StrategyGetStrategyPerformanceResponses,
	StrategyGetStrategyResponses,
	StrategyUpdateStrategyData,
	StrategyUpdateStrategyErrors,
	StrategyUpdateStrategyResponses,
	TasksGetStockUpdateStatusData,
	TasksGetStockUpdateStatusResponses,
	TasksRunStockDeltaUpdateData,
	TasksRunStockDeltaUpdateResponses,
	TasksRunStockForceUpdateData,
	TasksRunStockForceUpdateResponses,
	TechnicalIndicatorGetAdxData,
	TechnicalIndicatorGetAdxErrors,
	TechnicalIndicatorGetAdxResponses,
	TechnicalIndicatorGetAtrData,
	TechnicalIndicatorGetAtrErrors,
	TechnicalIndicatorGetAtrResponses,
	TechnicalIndicatorGetBbandsData,
	TechnicalIndicatorGetBbandsErrors,
	TechnicalIndicatorGetBbandsResponses,
	TechnicalIndicatorGetDemaData,
	TechnicalIndicatorGetDemaErrors,
	TechnicalIndicatorGetDemaResponses,
	TechnicalIndicatorGetEmaData,
	TechnicalIndicatorGetEmaErrors,
	TechnicalIndicatorGetEmaResponses,
	TechnicalIndicatorGetIndicatorListData,
	TechnicalIndicatorGetIndicatorListErrors,
	TechnicalIndicatorGetIndicatorListResponses,
	TechnicalIndicatorGetMacdData,
	TechnicalIndicatorGetMacdErrors,
	TechnicalIndicatorGetMacdResponses,
	TechnicalIndicatorGetRsiData,
	TechnicalIndicatorGetRsiErrors,
	TechnicalIndicatorGetRsiResponses,
	TechnicalIndicatorGetSmaData,
	TechnicalIndicatorGetSmaErrors,
	TechnicalIndicatorGetSmaResponses,
	TechnicalIndicatorGetStochData,
	TechnicalIndicatorGetStochErrors,
	TechnicalIndicatorGetStochResponses,
	TechnicalIndicatorGetTemaData,
	TechnicalIndicatorGetTemaErrors,
	TechnicalIndicatorGetTemaResponses,
	TechnicalIndicatorGetWmaData,
	TechnicalIndicatorGetWmaErrors,
	TechnicalIndicatorGetWmaResponses,
	TemplateCreateStrategyFromTemplateData,
	TemplateCreateStrategyFromTemplateErrors,
	TemplateCreateStrategyFromTemplateResponses,
	TemplateCreateTemplateData,
	TemplateCreateTemplateErrors,
	TemplateCreateTemplateResponses,
	TemplateDeleteTemplateData,
	TemplateDeleteTemplateErrors,
	TemplateDeleteTemplateResponses,
	TemplateGetTemplateData,
	TemplateGetTemplateErrors,
	TemplateGetTemplateResponses,
	TemplateGetTemplatesData,
	TemplateGetTemplatesErrors,
	TemplateGetTemplatesResponses,
	TemplateGetTemplateUsageStatsData,
	TemplateGetTemplateUsageStatsErrors,
	TemplateGetTemplateUsageStatsResponses,
	TemplateUpdateTemplateData,
	TemplateUpdateTemplateErrors,
	TemplateUpdateTemplateResponses,
	UserDeleteUserData,
	UserDeleteUserErrors,
	UserDeleteUserResponses,
	UserGetMyOauthAccountsData,
	UserGetMyOauthAccountsErrors,
	UserGetMyOauthAccountsResponses,
	UserGetUserData,
	UserGetUserErrors,
	UserGetUserMeData,
	UserGetUserMeErrors,
	UserGetUserMeResponses,
	UserGetUserOauthAccountsData,
	UserGetUserOauthAccountsErrors,
	UserGetUserOauthAccountsResponses,
	UserGetUserResponses,
	UserRemoveOauthAccountData,
	UserRemoveOauthAccountErrors,
	UserRemoveOauthAccountResponses,
	UserUpdateUserData,
	UserUpdateUserErrors,
	UserUpdateUserMeData,
	UserUpdateUserMeErrors,
	UserUpdateUserMeResponses,
	UserUpdateUserResponses,
	WatchlistCreateOrUpdateWatchlistData,
	WatchlistCreateOrUpdateWatchlistErrors,
	WatchlistCreateOrUpdateWatchlistResponses,
	WatchlistCreateWatchlistData,
	WatchlistCreateWatchlistErrors,
	WatchlistCreateWatchlistResponses,
	WatchlistDeleteWatchlistData,
	WatchlistDeleteWatchlistErrors,
	WatchlistDeleteWatchlistResponses,
	WatchlistGetWatchlistCoverageData,
	WatchlistGetWatchlistCoverageErrors,
	WatchlistGetWatchlistCoverageResponses,
	WatchlistGetWatchlistData,
	WatchlistGetWatchlistErrors,
	WatchlistGetWatchlistResponses,
	WatchlistListWatchlistsData,
	WatchlistListWatchlistsErrors,
	WatchlistListWatchlistsResponses,
	WatchlistSetupDefaultWatchlistData,
	WatchlistSetupDefaultWatchlistErrors,
	WatchlistSetupDefaultWatchlistResponses,
	WatchlistUpdateWatchlistData,
	WatchlistUpdateWatchlistErrors,
	WatchlistUpdateWatchlistResponses,
} from "./types.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

export class HealthService {
	/**
	 * Health Check
	 * Get comprehensive health status.
	 */
	public static healthCheck<ThrowOnError extends boolean = false>(
		options?: Options<HealthHealthCheckData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			HealthHealthCheckResponses,
			unknown,
			ThrowOnError
		>({
			url: "/health/",
			...options,
		});
	}

	/**
	 * Liveness Probe
	 * Kubernetes liveness probe endpoint.
	 */
	public static livenessProbe<ThrowOnError extends boolean = false>(
		options?: Options<HealthLivenessProbeData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			HealthLivenessProbeResponses,
			unknown,
			ThrowOnError
		>({
			url: "/health/live",
			...options,
		});
	}

	/**
	 * Readiness Probe
	 * Kubernetes readiness probe endpoint.
	 */
	public static readinessProbe<ThrowOnError extends boolean = false>(
		options?: Options<HealthReadinessProbeData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			HealthReadinessProbeResponses,
			unknown,
			ThrowOnError
		>({
			url: "/health/ready",
			...options,
		});
	}
}

export class AuthService {
	/**
	 * Login
	 */
	public static login<ThrowOnError extends boolean = false>(
		options: Options<AuthLoginData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthLoginResponses,
			AuthLoginErrors,
			ThrowOnError
		>({
			...urlSearchParamsBodySerializer,
			url: "/api/v1/auth/login",
			...options,
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
				...options.headers,
			},
		});
	}

	/**
	 * Logout
	 * 로그아웃 엔드포인트.
	 *
	 * 쿠키에서 토큰을 삭제하고 로그아웃 처리를 합니다.
	 */
	public static logout<ThrowOnError extends boolean = false>(
		options?: Options<AuthLogoutData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			AuthLogoutResponses,
			AuthLogoutErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/auth/logout",
			...options,
		});
	}

	/**
	 * Refresh Token
	 * JWT 토큰 갱신 엔드포인트
	 */
	public static refreshToken<ThrowOnError extends boolean = false>(
		options?: Options<AuthRefreshTokenData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			AuthRefreshTokenResponses,
			AuthRefreshTokenErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/refresh",
			...options,
		});
	}

	/**
	 * Verify Token
	 * 토큰 검증 및 사용자 정보 반환 (디버깅용)
	 */
	public static verifyToken<ThrowOnError extends boolean = false>(
		options?: Options<AuthVerifyTokenData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			AuthVerifyTokenResponses,
			AuthVerifyTokenErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/auth/token/verify",
			...options,
		});
	}

	/**
	 * Register
	 */
	public static register<ThrowOnError extends boolean = false>(
		options: Options<AuthRegisterData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthRegisterResponses,
			AuthRegisterErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/register",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Forgot Password
	 */
	public static forgotPassword<ThrowOnError extends boolean = false>(
		options: Options<AuthForgotPasswordData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthForgotPasswordResponses,
			AuthForgotPasswordErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/forgot-password",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Reset Password
	 */
	public static resetPassword<ThrowOnError extends boolean = false>(
		options: Options<AuthResetPasswordData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthResetPasswordResponses,
			AuthResetPasswordErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/reset-password",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Request Verify Token
	 */
	public static requestVerifyToken<ThrowOnError extends boolean = false>(
		options: Options<AuthRequestVerifyTokenData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthRequestVerifyTokenResponses,
			AuthRequestVerifyTokenErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/request-verify-token",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Verify
	 */
	public static verify<ThrowOnError extends boolean = false>(
		options: Options<AuthVerifyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthVerifyResponses,
			AuthVerifyErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/verify",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}
}

export class UserService {
	/**
	 * Get User Me
	 */
	public static getUserMe<ThrowOnError extends boolean = false>(
		options?: Options<UserGetUserMeData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			UserGetUserMeResponses,
			UserGetUserMeErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me",
			...options,
		});
	}

	/**
	 * Update User Me
	 */
	public static updateUserMe<ThrowOnError extends boolean = false>(
		options: Options<UserUpdateUserMeData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			UserUpdateUserMeResponses,
			UserUpdateUserMeErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete User
	 */
	public static deleteUser<ThrowOnError extends boolean = false>(
		options: Options<UserDeleteUserData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			UserDeleteUserResponses,
			UserDeleteUserErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{id}",
			...options,
		});
	}

	/**
	 * Get User
	 */
	public static getUser<ThrowOnError extends boolean = false>(
		options: Options<UserGetUserData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			UserGetUserResponses,
			UserGetUserErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{id}",
			...options,
		});
	}

	/**
	 * Update User
	 */
	public static updateUser<ThrowOnError extends boolean = false>(
		options: Options<UserUpdateUserData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			UserUpdateUserResponses,
			UserUpdateUserErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get My Oauth Accounts
	 * 현재 사용자의 연결된 OAuth 계정 목록을 조회합니다.
	 */
	public static getMyOauthAccounts<ThrowOnError extends boolean = false>(
		options?: Options<UserGetMyOauthAccountsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			UserGetMyOauthAccountsResponses,
			UserGetMyOauthAccountsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me/oauth-accounts",
			...options,
		});
	}

	/**
	 * Remove Oauth Account
	 * 특정 OAuth 계정 연결을 해제합니다.
	 */
	public static removeOauthAccount<ThrowOnError extends boolean = false>(
		options: Options<UserRemoveOauthAccountData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			UserRemoveOauthAccountResponses,
			UserRemoveOauthAccountErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me/oauth-accounts/{oauth_name}/{account_id}",
			...options,
		});
	}

	/**
	 * Get User Oauth Accounts
	 * 특정 사용자의 OAuth 계정 목록을 조회합니다. (관리자 전용)
	 */
	public static getUserOauthAccounts<ThrowOnError extends boolean = false>(
		options: Options<UserGetUserOauthAccountsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			UserGetUserOauthAccountsResponses,
			UserGetUserOauthAccountsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{user_id}/oauth-accounts",
			...options,
		});
	}
}

export class OAuth2Service {
	/**
	 * Authorize
	 * Initiate the OAuth2 authorization process for associating an OAuth account
	 * with the currently authenticated user.
	 */
	public static authorize<ThrowOnError extends boolean = false>(
		options: Options<OAuth2AuthorizeData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			OAuth2AuthorizeResponses,
			OAuth2AuthorizeErrors,
			ThrowOnError
		>({
			url: "/api/v1/oauth2/{provider}/authorize",
			...options,
		});
	}

	/**
	 * Callback
	 * The response varies based on the authentication backend used.
	 */
	public static callback<ThrowOnError extends boolean = false>(
		options: Options<OAuth2CallbackData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			OAuth2CallbackResponses,
			OAuth2CallbackErrors,
			ThrowOnError
		>({
			url: "/api/v1/oauth2/{provider}/callback",
			...options,
		});
	}
}

export class StockService {
	/**
	 * Get Daily Prices
	 * 지정된 종목의 일일 주가 데이터(OHLCV)를 조회합니다.
	 */
	public static getDailyPrices<ThrowOnError extends boolean = false>(
		options: Options<StockGetDailyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetDailyPricesResponses,
			StockGetDailyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/daily/{symbol}",
			...options,
		});
	}

	/**
	 * Get Weekly Prices
	 * 지정된 종목의 주간 주가 데이터(OHLCV)를 조회합니다.
	 */
	public static getWeeklyPrices<ThrowOnError extends boolean = false>(
		options: Options<StockGetWeeklyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetWeeklyPricesResponses,
			StockGetWeeklyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/weekly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Monthly Prices
	 * 지정된 종목의 월간 주가 데이터(OHLCV)를 조회합니다.
	 */
	public static getMonthlyPrices<ThrowOnError extends boolean = false>(
		options: Options<StockGetMonthlyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetMonthlyPricesResponses,
			StockGetMonthlyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/monthly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Quote
	 * 지정된 종목의 실시간 호가 정보를 조회합니다.
	 */
	public static getQuote<ThrowOnError extends boolean = false>(
		options: Options<StockGetQuoteData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetQuoteResponses,
			StockGetQuoteErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/quote/{symbol}",
			...options,
		});
	}

	/**
	 * Get Intraday Data
	 * 지정된 종목의 실시간 또는 분봉 데이터를 조회합니다.
	 */
	public static getIntradayData<ThrowOnError extends boolean = false>(
		options: Options<StockGetIntradayDataData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetIntradayDataResponses,
			StockGetIntradayDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/intraday/{symbol}",
			...options,
		});
	}

	/**
	 * Search Stock Symbols
	 * 주식 심볼 검색 (Alpha Vantage의 심볼 서치 기능 활용)
	 */
	public static searchStockSymbols<ThrowOnError extends boolean = false>(
		options: Options<StockSearchStockSymbolsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockSearchStockSymbolsResponses,
			StockSearchStockSymbolsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/search",
			...options,
		});
	}
}

export class CryptoService {
	/**
	 * Get Exchange Rate
	 * 암호화폐/법정화폐 간의 실시간 환율을 조회합니다.
	 */
	public static getExchangeRate<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetExchangeRateData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetExchangeRateResponses,
			CryptoGetExchangeRateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/exchange-rate/{from_currency}/{to_currency}",
			...options,
		});
	}

	/**
	 * Get Bulk Exchange Rates
	 * 여러 암호화폐의 환율을 일괄 조회합니다.
	 */
	public static getBulkExchangeRates<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetBulkExchangeRatesData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			CryptoGetBulkExchangeRatesResponses,
			CryptoGetBulkExchangeRatesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/exchange-rates/bulk",
			...options,
		});
	}

	/**
	 * Get Daily Prices
	 * 암호화폐의 일일 가격 데이터(OHLCV)를 조회합니다.
	 */
	public static getDailyPrices<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetDailyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetDailyPricesResponses,
			CryptoGetDailyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/daily/{symbol}",
			...options,
		});
	}

	/**
	 * Get Weekly Prices
	 * 암호화폐의 주간 가격 데이터(OHLCV)를 조회합니다.
	 */
	public static getWeeklyPrices<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetWeeklyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetWeeklyPricesResponses,
			CryptoGetWeeklyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/weekly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Monthly Prices
	 * 암호화폐의 월간 가격 데이터(OHLCV)를 조회합니다.
	 */
	public static getMonthlyPrices<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetMonthlyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetMonthlyPricesResponses,
			CryptoGetMonthlyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/monthly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Bitcoin Price
	 * 비트코인 가격 데이터를 조회합니다.
	 */
	public static getBitcoinPrice<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetBitcoinPriceData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetBitcoinPriceResponses,
			CryptoGetBitcoinPriceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/bitcoin/{period}",
			...options,
		});
	}

	/**
	 * Get Ethereum Price
	 * 이더리움 가격 데이터를 조회합니다.
	 */
	public static getEthereumPrice<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetEthereumPriceData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetEthereumPriceResponses,
			CryptoGetEthereumPriceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/ethereum/{period}",
			...options,
		});
	}
}

export class FundamentalService {
	/**
	 * Get Company Overview
	 * 지정된 종목의 기업 개요 정보를 조회합니다.
	 */
	public static getCompanyOverview<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetCompanyOverviewData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetCompanyOverviewResponses,
			FundamentalGetCompanyOverviewErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/overview/{symbol}",
			...options,
		});
	}

	/**
	 * Get Income Statement
	 * 지정된 종목의 손익계산서를 조회합니다.
	 */
	public static getIncomeStatement<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetIncomeStatementData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetIncomeStatementResponses,
			FundamentalGetIncomeStatementErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/income-statement/{symbol}",
			...options,
		});
	}

	/**
	 * Get Balance Sheet
	 * 지정된 종목의 재무상태표를 조회합니다.
	 */
	public static getBalanceSheet<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetBalanceSheetData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetBalanceSheetResponses,
			FundamentalGetBalanceSheetErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/balance-sheet/{symbol}",
			...options,
		});
	}

	/**
	 * Get Cash Flow
	 * 지정된 종목의 현금흐름표를 조회합니다.
	 */
	public static getCashFlow<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetCashFlowData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetCashFlowResponses,
			FundamentalGetCashFlowErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/cash-flow/{symbol}",
			...options,
		});
	}

	/**
	 * Get Earnings
	 * 지정된 종목의 실적 데이터를 조회합니다.
	 */
	public static getEarnings<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetEarningsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetEarningsResponses,
			FundamentalGetEarningsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/earnings/{symbol}",
			...options,
		});
	}
}

export class EconomicService {
	/**
	 * Get Gdp Data
	 * 미국 GDP 데이터를 조회합니다.
	 */
	public static getGdpData<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetGdpDataData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetGdpDataResponses,
			EconomicGetGdpDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/gdp",
			...options,
		});
	}

	/**
	 * Get Inflation Data
	 * 미국 인플레이션 지표 데이터를 조회합니다.
	 */
	public static getInflationData<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetInflationDataData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetInflationDataResponses,
			EconomicGetInflationDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/inflation",
			...options,
		});
	}

	/**
	 * Get Interest Rates
	 * 미국 기준금리 및 채권 수익률 데이터를 조회합니다.
	 */
	public static getInterestRates<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetInterestRatesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetInterestRatesResponses,
			EconomicGetInterestRatesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/interest-rates",
			...options,
		});
	}

	/**
	 * Get Employment Data
	 * 미국 실업률 및 고용 관련 지표를 조회합니다.
	 */
	public static getEmploymentData<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetEmploymentDataData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetEmploymentDataResponses,
			EconomicGetEmploymentDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/employment",
			...options,
		});
	}
}

export class IntelligenceService {
	/**
	 * Get News
	 * 지정된 종목 관련 뉴스를 조회합니다.
	 */
	public static getNews<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetNewsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetNewsResponses,
			IntelligenceGetNewsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/news/{symbol}",
			...options,
		});
	}

	/**
	 * Get Sentiment Analysis
	 * 지정된 종목의 감정 분석 결과를 조회합니다.
	 */
	public static getSentimentAnalysis<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetSentimentAnalysisData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetSentimentAnalysisResponses,
			IntelligenceGetSentimentAnalysisErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/sentiment/{symbol}",
			...options,
		});
	}

	/**
	 * Get Analyst Recommendations
	 * 지정된 종목의 분석가 추천 정보를 조회합니다.
	 */
	public static getAnalystRecommendations<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetAnalystRecommendationsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetAnalystRecommendationsResponses,
			IntelligenceGetAnalystRecommendationsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/analyst-recommendations/{symbol}",
			...options,
		});
	}

	/**
	 * Get Social Sentiment
	 * 지정된 종목의 소셜 미디어 감정 분석을 조회합니다.
	 */
	public static getSocialSentiment<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetSocialSentimentData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetSocialSentimentResponses,
			IntelligenceGetSocialSentimentErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/social-sentiment/{symbol}",
			...options,
		});
	}
}

export class MarketDataService {
	/**
	 * Collect Company Info
	 * 지정된 심볼의 기업 정보를 수집하여 저장
	 *
	 * Alpha Vantage API를 통해 기업의 기본 정보, 재무 지표,
	 * 업종 분류 등을 수집하고 데이터베이스에 저장합니다.
	 */
	public static collectCompanyInfo<ThrowOnError extends boolean = false>(
		options: Options<MarketDataCollectCompanyInfoData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MarketDataCollectCompanyInfoResponses,
			MarketDataCollectCompanyInfoErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/collect/company-info/{symbol}",
			...options,
		});
	}

	/**
	 * Collect Market Data
	 * 지정된 심볼의 주가 데이터를 수집하여 저장
	 *
	 * Alpha Vantage API를 통해 일일 OHLCV 데이터를 수집하고
	 * DuckDB 캐시 및 MongoDB에 저장합니다.
	 */
	public static collectMarketData<ThrowOnError extends boolean = false>(
		options: Options<MarketDataCollectMarketDataData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MarketDataCollectMarketDataResponses,
			MarketDataCollectMarketDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/collect/market-data/{symbol}",
			...options,
		});
	}

	/**
	 * Collect Bulk Data
	 * 여러 심볼의 데이터를 일괄 수집
	 *
	 * 백그라운드 작업으로 처리되며, 대량의 심볼에 대해
	 * 기업 정보와 주가 데이터를 순차적으로 수집합니다.
	 */
	public static collectBulkData<ThrowOnError extends boolean = false>(
		options: Options<MarketDataCollectBulkDataData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MarketDataCollectBulkDataResponses,
			MarketDataCollectBulkDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/collect/bulk",
			...options,
		});
	}

	/**
	 * Get Data Coverage
	 * 지정된 심볼의 데이터 커버리지 정보 조회
	 *
	 * 기업 정보, 주가 데이터의 수집 상태와 품질을 확인합니다.
	 */
	public static getDataCoverage<ThrowOnError extends boolean = false>(
		options: Options<MarketDataGetDataCoverageData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MarketDataGetDataCoverageResponses,
			MarketDataGetDataCoverageErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/coverage/{symbol}",
			...options,
		});
	}

	/**
	 * Get System Status
	 * 시장 데이터 시스템의 전반적인 상태 조회
	 *
	 * API 연결 상태, 캐시 성능, 수집 통계 등을 확인합니다.
	 */
	public static getSystemStatus<ThrowOnError extends boolean = false>(
		options?: Options<MarketDataGetSystemStatusData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MarketDataGetSystemStatusResponses,
			MarketDataGetSystemStatusErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/status",
			...options,
		});
	}

	/**
	 * Get Market Data Info
	 * 마켓 데이터 API 정보 및 사용 가능한 엔드포인트 목록
	 */
	public static getMarketDataInfo<ThrowOnError extends boolean = false>(
		options?: Options<MarketDataGetMarketDataInfoData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MarketDataGetMarketDataInfoResponses,
			MarketDataGetMarketDataInfoErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/",
			...options,
		});
	}

	/**
	 * Health Check
	 * 마켓 데이터 서비스 상태 확인
	 */
	public static healthCheck<ThrowOnError extends boolean = false>(
		options?: Options<MarketDataHealthCheckData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MarketDataHealthCheckResponses,
			MarketDataHealthCheckErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/health",
			...options,
		});
	}
}

export class TechnicalIndicatorService {
	/**
	 * Get Indicator List
	 * 지원하는 기술적 지표 목록을 조회합니다.
	 */
	public static getIndicatorList<ThrowOnError extends boolean = false>(
		options?: Options<TechnicalIndicatorGetIndicatorListData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TechnicalIndicatorGetIndicatorListResponses,
			TechnicalIndicatorGetIndicatorListErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/indicators",
			...options,
		});
	}

	/**
	 * Get Sma
	 * 단순이동평균(SMA)을 조회합니다.
	 */
	public static getSma<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetSmaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetSmaResponses,
			TechnicalIndicatorGetSmaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/sma",
			...options,
		});
	}

	/**
	 * Get Wma
	 * 가중이동평균(WMA)을 조회합니다.
	 */
	public static getWma<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetWmaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetWmaResponses,
			TechnicalIndicatorGetWmaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/wma",
			...options,
		});
	}

	/**
	 * Get Dema
	 * 이중지수이동평균(DEMA)을 조회합니다.
	 */
	public static getDema<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetDemaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetDemaResponses,
			TechnicalIndicatorGetDemaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/dema",
			...options,
		});
	}

	/**
	 * Get Tema
	 * 삼중지수이동평균(TEMA)을 조회합니다.
	 */
	public static getTema<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetTemaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetTemaResponses,
			TechnicalIndicatorGetTemaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/tema",
			...options,
		});
	}

	/**
	 * Get Ema
	 * 지수이동평균(EMA)을 조회합니다.
	 */
	public static getEma<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetEmaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetEmaResponses,
			TechnicalIndicatorGetEmaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/ema",
			...options,
		});
	}

	/**
	 * Get Rsi
	 * 상대강도지수(RSI)를 조회합니다.
	 */
	public static getRsi<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetRsiData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetRsiResponses,
			TechnicalIndicatorGetRsiErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/rsi",
			...options,
		});
	}

	/**
	 * Get Macd
	 * MACD를 조회합니다.
	 */
	public static getMacd<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetMacdData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetMacdResponses,
			TechnicalIndicatorGetMacdErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/macd",
			...options,
		});
	}

	/**
	 * Get Bbands
	 * 볼린저밴드(BBANDS)를 조회합니다.
	 */
	public static getBbands<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetBbandsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetBbandsResponses,
			TechnicalIndicatorGetBbandsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/bbands",
			...options,
		});
	}

	/**
	 * Get Adx
	 * 평균방향지수(ADX)를 조회합니다.
	 */
	public static getAdx<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetAdxData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetAdxResponses,
			TechnicalIndicatorGetAdxErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/adx",
			...options,
		});
	}

	/**
	 * Get Atr
	 * 평균진폭(ATR)을 조회합니다.
	 */
	public static getAtr<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetAtrData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetAtrResponses,
			TechnicalIndicatorGetAtrErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/atr",
			...options,
		});
	}

	/**
	 * Get Stoch
	 * 스토캐스틱 오실레이터(STOCH)를 조회합니다.
	 */
	public static getStoch<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetStochData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetStochResponses,
			TechnicalIndicatorGetStochErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/stoch",
			...options,
		});
	}
}

export class StrategyService {
	/**
	 * Get Strategies
	 * Get list of strategies
	 */
	public static getStrategies<ThrowOnError extends boolean = false>(
		options?: Options<StrategyGetStrategiesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			StrategyGetStrategiesResponses,
			StrategyGetStrategiesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/",
			...options,
		});
	}

	/**
	 * Create Strategy
	 * Create a new strategy
	 */
	public static createStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyCreateStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			StrategyCreateStrategyResponses,
			StrategyCreateStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Strategy
	 * Delete strategy (soft delete)
	 */
	public static deleteStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyDeleteStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			StrategyDeleteStrategyResponses,
			StrategyDeleteStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}",
			...options,
		});
	}

	/**
	 * Get Strategy
	 * Get strategy by ID
	 */
	public static getStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyGetStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StrategyGetStrategyResponses,
			StrategyGetStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}",
			...options,
		});
	}

	/**
	 * Update Strategy
	 * Update strategy
	 */
	public static updateStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyUpdateStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).put<
			StrategyUpdateStrategyResponses,
			StrategyUpdateStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Execute Strategy
	 * Execute strategy and generate signal
	 */
	public static executeStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyExecuteStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			StrategyExecuteStrategyResponses,
			StrategyExecuteStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}/execute",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Strategy Executions
	 * Get strategy execution history
	 */
	public static getStrategyExecutions<ThrowOnError extends boolean = false>(
		options: Options<StrategyGetStrategyExecutionsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StrategyGetStrategyExecutionsResponses,
			StrategyGetStrategyExecutionsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}/executions",
			...options,
		});
	}

	/**
	 * Get Strategy Performance
	 * Get strategy performance metrics
	 */
	public static getStrategyPerformance<ThrowOnError extends boolean = false>(
		options: Options<StrategyGetStrategyPerformanceData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StrategyGetStrategyPerformanceResponses,
			StrategyGetStrategyPerformanceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}/performance",
			...options,
		});
	}
}

export class TemplateService {
	/**
	 * Get Templates
	 * Get list of strategy templates
	 */
	public static getTemplates<ThrowOnError extends boolean = false>(
		options?: Options<TemplateGetTemplatesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TemplateGetTemplatesResponses,
			TemplateGetTemplatesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/",
			...options,
		});
	}

	/**
	 * Create Template
	 * Create a new strategy template (Superuser only)
	 */
	public static createTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateCreateTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			TemplateCreateTemplateResponses,
			TemplateCreateTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Template
	 * Delete template by ID (Superuser only)
	 */
	public static deleteTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateDeleteTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			TemplateDeleteTemplateResponses,
			TemplateDeleteTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}",
			...options,
		});
	}

	/**
	 * Get Template
	 * Get template by ID
	 */
	public static getTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateGetTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TemplateGetTemplateResponses,
			TemplateGetTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}",
			...options,
		});
	}

	/**
	 * Update Template
	 * Update template by ID (Superuser only)
	 */
	public static updateTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateUpdateTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			TemplateUpdateTemplateResponses,
			TemplateUpdateTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Create Strategy From Template
	 * Create a strategy instance from template
	 */
	public static createStrategyFromTemplate<
		ThrowOnError extends boolean = false,
	>(options: Options<TemplateCreateStrategyFromTemplateData, ThrowOnError>) {
		return (options.client ?? client).post<
			TemplateCreateStrategyFromTemplateResponses,
			TemplateCreateStrategyFromTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}/create-strategy",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Template Usage Stats
	 * Get template usage statistics
	 */
	public static getTemplateUsageStats<ThrowOnError extends boolean = false>(
		options?: Options<TemplateGetTemplateUsageStatsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TemplateGetTemplateUsageStatsResponses,
			TemplateGetTemplateUsageStatsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/analytics/usage-stats",
			...options,
		});
	}
}

export class BacktestService {
	/**
	 * Get Backtests
	 * Get list of backtests
	 */
	public static getBacktests<ThrowOnError extends boolean = false>(
		options?: Options<BacktestGetBacktestsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestGetBacktestsResponses,
			BacktestGetBacktestsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/",
			...options,
		});
	}

	/**
	 * Create Backtest
	 * Create a new backtest
	 */
	public static createBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestCreateBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			BacktestCreateBacktestResponses,
			BacktestCreateBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Backtest
	 * Delete backtest
	 */
	public static deleteBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestDeleteBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			BacktestDeleteBacktestResponses,
			BacktestDeleteBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}",
			...options,
		});
	}

	/**
	 * Get Backtest
	 * Get backtest by ID
	 */
	public static getBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetBacktestResponses,
			BacktestGetBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}",
			...options,
		});
	}

	/**
	 * Update Backtest
	 * Update backtest
	 */
	public static updateBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestUpdateBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).put<
			BacktestUpdateBacktestResponses,
			BacktestUpdateBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Execute Backtest
	 * Execute backtest with trading signals
	 */
	public static executeBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestExecuteBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			BacktestExecuteBacktestResponses,
			BacktestExecuteBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}/execute",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Backtest Executions
	 * Get execution history for a backtest
	 */
	public static getBacktestExecutions<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetBacktestExecutionsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetBacktestExecutionsResponses,
			BacktestGetBacktestExecutionsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}/executions",
			...options,
		});
	}

	/**
	 * Get Backtest Results
	 * Get backtest results from DuckDB (고성능 분석용)
	 */
	public static getBacktestResults<ThrowOnError extends boolean = false>(
		options?: Options<BacktestGetBacktestResultsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestGetBacktestResultsResponses,
			BacktestGetBacktestResultsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/results/",
			...options,
		});
	}

	/**
	 * Create And Run Integrated Backtest
	 * 통합 백테스트 생성 및 실행 - 모든 서비스 연동
	 */
	public static createAndRunIntegratedBacktest<
		ThrowOnError extends boolean = false,
	>(
		options: Options<BacktestCreateAndRunIntegratedBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			BacktestCreateAndRunIntegratedBacktestResponses,
			BacktestCreateAndRunIntegratedBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/integrated",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Health Check
	 * 백테스트 시스템 상태 확인 (DuckDB + MongoDB 통합 상태)
	 */
	public static healthCheck<ThrowOnError extends boolean = false>(
		options?: Options<BacktestHealthCheckData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestHealthCheckResponses,
			BacktestHealthCheckErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/health",
			...options,
		});
	}

	/**
	 * Get Performance Analytics
	 * 백테스트 성과 분석 (DuckDB 고성능 분석)
	 */
	public static getPerformanceAnalytics<ThrowOnError extends boolean = false>(
		options?: Options<BacktestGetPerformanceAnalyticsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestGetPerformanceAnalyticsResponses,
			BacktestGetPerformanceAnalyticsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/analytics/performance-stats",
			...options,
		});
	}

	/**
	 * Get Trades Analytics
	 * 거래 기록 분석 (DuckDB 고성능 쿼리)
	 */
	public static getTradesAnalytics<ThrowOnError extends boolean = false>(
		options?: Options<BacktestGetTradesAnalyticsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestGetTradesAnalyticsResponses,
			BacktestGetTradesAnalyticsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/analytics/trades",
			...options,
		});
	}

	/**
	 * Get Backtest Summary Analytics
	 * 백테스트 결과 요약 분석 (DuckDB 기반)
	 */
	public static getBacktestSummaryAnalytics<
		ThrowOnError extends boolean = false,
	>(options?: Options<BacktestGetBacktestSummaryAnalyticsData, ThrowOnError>) {
		return (options?.client ?? client).get<
			BacktestGetBacktestSummaryAnalyticsResponses,
			BacktestGetBacktestSummaryAnalyticsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/analytics/summary",
			...options,
		});
	}
}

export class WatchlistService {
	/**
	 * List Watchlists
	 * 사용자의 모든 워치리스트 목록 조회
	 *
	 * 사용자에게 속한 모든 워치리스트의 요약 정보를 반환합니다.
	 */
	public static listWatchlists<ThrowOnError extends boolean = false>(
		options?: Options<WatchlistListWatchlistsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			WatchlistListWatchlistsResponses,
			WatchlistListWatchlistsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/",
			...options,
		});
	}

	/**
	 * Create Or Update Watchlist
	 * 워치리스트 생성 또는 업데이트
	 *
	 * 유연한 워치리스트 관리를 위한 엔드포인트입니다.
	 * - 이름이 없으면 'default' 워치리스트로 처리
	 * - 기존 워치리스트가 있으면 업데이트, 없으면 생성
	 * - 심볼 데이터는 백그라운드에서 자동 수집
	 */
	public static createOrUpdateWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistCreateOrUpdateWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			WatchlistCreateOrUpdateWatchlistResponses,
			WatchlistCreateOrUpdateWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Create Watchlist
	 * 새로운 명명된 워치리스트 생성
	 *
	 * 명시적인 이름을 가진 새 워치리스트를 생성합니다.
	 * 동일한 이름의 워치리스트가 이미 있으면 실패합니다.
	 */
	public static createWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistCreateWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			WatchlistCreateWatchlistResponses,
			WatchlistCreateWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/create",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Watchlist
	 * 워치리스트 삭제
	 */
	public static deleteWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistDeleteWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			WatchlistDeleteWatchlistResponses,
			WatchlistDeleteWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}",
			...options,
		});
	}

	/**
	 * Get Watchlist
	 * 특정 워치리스트의 상세 정보 조회
	 */
	public static getWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistGetWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			WatchlistGetWatchlistResponses,
			WatchlistGetWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}",
			...options,
		});
	}

	/**
	 * Update Watchlist
	 * 기존 워치리스트 업데이트
	 */
	public static updateWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistUpdateWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).put<
			WatchlistUpdateWatchlistResponses,
			WatchlistUpdateWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Watchlist Coverage
	 * 워치리스트의 데이터 커버리지 정보 조회
	 *
	 * 각 심볼별로 수집된 데이터의 상태와 품질을 확인합니다.
	 */
	public static getWatchlistCoverage<ThrowOnError extends boolean = false>(
		options: Options<WatchlistGetWatchlistCoverageData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			WatchlistGetWatchlistCoverageResponses,
			WatchlistGetWatchlistCoverageErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}/coverage",
			...options,
		});
	}

	/**
	 * Setup Default Watchlist
	 * 기본 워치리스트 설정
	 *
	 * 인기 주식들로 구성된 기본 워치리스트를 생성합니다.
	 */
	public static setupDefaultWatchlist<ThrowOnError extends boolean = false>(
		options?: Options<WatchlistSetupDefaultWatchlistData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			WatchlistSetupDefaultWatchlistResponses,
			WatchlistSetupDefaultWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/setup-default",
			...options,
		});
	}
}

export class DashboardService {
	/**
	 * Get Dashboard Summary
	 * 대시보드 요약 데이터를 조회합니다.
	 *
	 * 사용자의 포트폴리오, 전략, 최근 활동 요약 정보를 반환합니다.
	 */
	public static getDashboardSummary<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetDashboardSummaryData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetDashboardSummaryResponses,
			DashboardGetDashboardSummaryErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/summary",
			...options,
		});
	}

	/**
	 * Get Portfolio Performance
	 * 포트폴리오 성과 차트 데이터를 조회합니다.
	 *
	 * 지정된 기간의 포트폴리오 성과 데이터와 요약 지표를 반환합니다.
	 */
	public static getPortfolioPerformance<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetPortfolioPerformanceData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetPortfolioPerformanceResponses,
			DashboardGetPortfolioPerformanceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/portfolio/performance",
			...options,
		});
	}

	/**
	 * Get Strategy Comparison
	 * 전략 성과 비교 데이터를 조회합니다.
	 *
	 * 사용자의 전략들을 성과별로 비교한 데이터를 반환합니다.
	 */
	public static getStrategyComparison<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetStrategyComparisonData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetStrategyComparisonResponses,
			DashboardGetStrategyComparisonErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/strategies/comparison",
			...options,
		});
	}

	/**
	 * Get Recent Trades
	 * 최근 거래 내역을 조회합니다.
	 *
	 * 지정된 기간의 최근 거래 내역과 요약 정보를 반환합니다.
	 */
	public static getRecentTrades<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetRecentTradesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetRecentTradesResponses,
			DashboardGetRecentTradesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/trades/recent",
			...options,
		});
	}

	/**
	 * Get Watchlist Quotes
	 * 관심종목 현재가를 조회합니다.
	 *
	 * 사용자의 관심종목의 현재 주가 정보를 반환합니다.
	 */
	public static getWatchlistQuotes<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetWatchlistQuotesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetWatchlistQuotesResponses,
			DashboardGetWatchlistQuotesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/watchlist/quotes",
			...options,
		});
	}

	/**
	 * Get News Feed
	 * 뉴스 피드를 조회합니다.
	 *
	 * 사용자와 관련된 뉴스 피드를 반환합니다.
	 */
	public static getNewsFeed<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetNewsFeedData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetNewsFeedResponses,
			DashboardGetNewsFeedErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/news/feed",
			...options,
		});
	}

	/**
	 * Get Economic Calendar
	 * 경제 캘린더를 조회합니다.
	 *
	 * 예정된 경제 지표 발표 일정을 반환합니다.
	 */
	public static getEconomicCalendar<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetEconomicCalendarData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetEconomicCalendarResponses,
			DashboardGetEconomicCalendarErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/economic/calendar",
			...options,
		});
	}
}

export class TasksService {
	/**
	 * Run Stock Delta Update
	 * 만료된 주식 데이터를 증분 업데이트합니다.
	 */
	public static runStockDeltaUpdate<ThrowOnError extends boolean = false>(
		options?: Options<TasksRunStockDeltaUpdateData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			TasksRunStockDeltaUpdateResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/tasks/stock-update/delta",
			...options,
		});
	}

	/**
	 * Run Stock Force Update
	 * 모든 활성 심볼의 주식 데이터를 강제 전체 업데이트합니다.
	 */
	public static runStockForceUpdate<ThrowOnError extends boolean = false>(
		options?: Options<TasksRunStockForceUpdateData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			TasksRunStockForceUpdateResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/tasks/stock-update/force-all",
			...options,
		});
	}

	/**
	 * Get Stock Update Status
	 * 주식 데이터 업데이트 상태를 조회합니다.
	 */
	public static getStockUpdateStatus<ThrowOnError extends boolean = false>(
		options?: Options<TasksGetStockUpdateStatusData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TasksGetStockUpdateStatusResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/tasks/stock-update/status",
			...options,
		});
	}
}
