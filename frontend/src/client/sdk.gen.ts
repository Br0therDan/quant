// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer,
} from "./client";
import { client } from "./client.gen";
import type {
	AuthForgotPasswordData,
	AuthForgotPasswordErrors,
	AuthForgotPasswordResponses,
	AuthLoginData,
	AuthLoginErrors,
	AuthLoginResponses,
	AuthLogoutData,
	AuthLogoutErrors,
	AuthLogoutResponses,
	AuthRefreshTokenData,
	AuthRefreshTokenErrors,
	AuthRefreshTokenResponses,
	AuthRegisterData,
	AuthRegisterErrors,
	AuthRegisterResponses,
	AuthRequestVerifyTokenData,
	AuthRequestVerifyTokenErrors,
	AuthRequestVerifyTokenResponses,
	AuthResetPasswordData,
	AuthResetPasswordErrors,
	AuthResetPasswordResponses,
	AuthVerifyData,
	AuthVerifyErrors,
	AuthVerifyResponses,
	AuthVerifyTokenData,
	AuthVerifyTokenErrors,
	AuthVerifyTokenResponses,
	BacktestCreateBacktestData,
	BacktestCreateBacktestErrors,
	BacktestCreateBacktestResponses,
	BacktestCreateOptimizationStudyData,
	BacktestCreateOptimizationStudyErrors,
	BacktestCreateOptimizationStudyResponses,
	BacktestDeleteBacktestData,
	BacktestDeleteBacktestErrors,
	BacktestDeleteBacktestResponses,
	BacktestExecuteBacktestData,
	BacktestExecuteBacktestErrors,
	BacktestExecuteBacktestResponses,
	BacktestGetBacktestData,
	BacktestGetBacktestErrors,
	BacktestGetBacktestExecutionsData,
	BacktestGetBacktestExecutionsErrors,
	BacktestGetBacktestExecutionsResponses,
	BacktestGetBacktestResponses,
	BacktestGetBacktestsData,
	BacktestGetBacktestsErrors,
	BacktestGetBacktestsResponses,
	BacktestGetOptimizationProgressData,
	BacktestGetOptimizationProgressErrors,
	BacktestGetOptimizationProgressResponses,
	BacktestGetOptimizationResultData,
	BacktestGetOptimizationResultErrors,
	BacktestGetOptimizationResultResponses,
	BacktestGetPerformanceAnalyticsData,
	BacktestGetPerformanceAnalyticsErrors,
	BacktestGetPerformanceAnalyticsResponses,
	BacktestGetPortfolioHistoryData,
	BacktestGetPortfolioHistoryErrors,
	BacktestGetPortfolioHistoryResponses,
	BacktestGetTradesAnalyticsData,
	BacktestGetTradesAnalyticsErrors,
	BacktestGetTradesAnalyticsResponses,
	BacktestGetTradesHistoryData,
	BacktestGetTradesHistoryErrors,
	BacktestGetTradesHistoryResponses,
	BacktestHealthCheckData,
	BacktestHealthCheckErrors,
	BacktestHealthCheckResponses,
	BacktestListOptimizationStudiesData,
	BacktestListOptimizationStudiesErrors,
	BacktestListOptimizationStudiesResponses,
	BacktestUpdateBacktestData,
	BacktestUpdateBacktestErrors,
	BacktestUpdateBacktestResponses,
	ChatOpsAdvancedChatWithSessionData,
	ChatOpsAdvancedChatWithSessionErrors,
	ChatOpsAdvancedChatWithSessionResponses,
	ChatOpsAdvancedCompareStrategiesData,
	ChatOpsAdvancedCompareStrategiesErrors,
	ChatOpsAdvancedCompareStrategiesResponses,
	ChatOpsAdvancedCreateChatSessionData,
	ChatOpsAdvancedCreateChatSessionErrors,
	ChatOpsAdvancedCreateChatSessionResponses,
	ChatOpsAdvancedDebugCompareStrategiesData,
	ChatOpsAdvancedDebugCompareStrategiesErrors,
	ChatOpsAdvancedDebugCompareStrategiesResponses,
	ChatOpsAdvancedTriggerAutoBacktestData,
	ChatOpsAdvancedTriggerAutoBacktestErrors,
	ChatOpsAdvancedTriggerAutoBacktestResponses,
	ChatOpsExecuteChatopsData,
	ChatOpsExecuteChatopsErrors,
	ChatOpsExecuteChatopsResponses,
	CryptoGetBitcoinPriceData,
	CryptoGetBitcoinPriceErrors,
	CryptoGetBitcoinPriceResponses,
	CryptoGetBulkExchangeRatesData,
	CryptoGetBulkExchangeRatesErrors,
	CryptoGetBulkExchangeRatesResponses,
	CryptoGetDailyPricesData,
	CryptoGetDailyPricesErrors,
	CryptoGetDailyPricesResponses,
	CryptoGetEthereumPriceData,
	CryptoGetEthereumPriceErrors,
	CryptoGetEthereumPriceResponses,
	CryptoGetExchangeRateData,
	CryptoGetExchangeRateErrors,
	CryptoGetExchangeRateResponses,
	CryptoGetMonthlyPricesData,
	CryptoGetMonthlyPricesErrors,
	CryptoGetMonthlyPricesResponses,
	CryptoGetWeeklyPricesData,
	CryptoGetWeeklyPricesErrors,
	CryptoGetWeeklyPricesResponses,
	DashboardGetDashboardSummaryData,
	DashboardGetDashboardSummaryErrors,
	DashboardGetDashboardSummaryResponses,
	DashboardGetEconomicCalendarData,
	DashboardGetEconomicCalendarErrors,
	DashboardGetEconomicCalendarResponses,
	DashboardGetNewsFeedData,
	DashboardGetNewsFeedErrors,
	DashboardGetNewsFeedResponses,
	DashboardGetPortfolioForecastData,
	DashboardGetPortfolioForecastErrors,
	DashboardGetPortfolioForecastResponses,
	DashboardGetPortfolioPerformanceData,
	DashboardGetPortfolioPerformanceErrors,
	DashboardGetPortfolioPerformanceResponses,
	DashboardGetPredictiveOverviewData,
	DashboardGetPredictiveOverviewErrors,
	DashboardGetPredictiveOverviewResponses,
	DashboardGetRecentTradesData,
	DashboardGetRecentTradesErrors,
	DashboardGetRecentTradesResponses,
	DashboardGetStrategyComparisonData,
	DashboardGetStrategyComparisonErrors,
	DashboardGetStrategyComparisonResponses,
	DashboardGetWatchlistQuotesData,
	DashboardGetWatchlistQuotesErrors,
	DashboardGetWatchlistQuotesResponses,
	EconomicGetEmploymentDataData,
	EconomicGetEmploymentDataErrors,
	EconomicGetEmploymentDataResponses,
	EconomicGetGdpDataData,
	EconomicGetGdpDataErrors,
	EconomicGetGdpDataResponses,
	EconomicGetInflationDataData,
	EconomicGetInflationDataErrors,
	EconomicGetInflationDataResponses,
	EconomicGetInterestRatesData,
	EconomicGetInterestRatesErrors,
	EconomicGetInterestRatesResponses,
	FeatureStoreActivateFeatureData,
	FeatureStoreActivateFeatureErrors,
	FeatureStoreActivateFeatureResponses,
	FeatureStoreCreateFeatureData,
	FeatureStoreCreateFeatureErrors,
	FeatureStoreCreateFeatureResponses,
	FeatureStoreCreateVersionData,
	FeatureStoreCreateVersionErrors,
	FeatureStoreCreateVersionResponses,
	FeatureStoreDeleteFeatureData,
	FeatureStoreDeleteFeatureErrors,
	FeatureStoreDeleteFeatureResponses,
	FeatureStoreDeprecateFeatureData,
	FeatureStoreDeprecateFeatureErrors,
	FeatureStoreDeprecateFeatureResponses,
	FeatureStoreGetDatasetData,
	FeatureStoreGetDatasetErrors,
	FeatureStoreGetDatasetResponses,
	FeatureStoreGetFeatureData,
	FeatureStoreGetFeatureErrors,
	FeatureStoreGetFeatureLineageData,
	FeatureStoreGetFeatureLineageErrors,
	FeatureStoreGetFeatureLineageResponses,
	FeatureStoreGetFeatureResponses,
	FeatureStoreGetFeatureStatisticsData,
	FeatureStoreGetFeatureStatisticsErrors,
	FeatureStoreGetFeatureStatisticsResponses,
	FeatureStoreGetFeatureVersionsData,
	FeatureStoreGetFeatureVersionsErrors,
	FeatureStoreGetFeatureVersionsResponses,
	FeatureStoreListDatasetsData,
	FeatureStoreListDatasetsResponses,
	FeatureStoreListFeaturesData,
	FeatureStoreListFeaturesErrors,
	FeatureStoreListFeaturesResponses,
	FeatureStoreRecordFeatureUsageData,
	FeatureStoreRecordFeatureUsageErrors,
	FeatureStoreRecordFeatureUsageResponses,
	FeatureStoreRollbackVersionData,
	FeatureStoreRollbackVersionErrors,
	FeatureStoreRollbackVersionResponses,
	FeatureStoreUpdateFeatureData,
	FeatureStoreUpdateFeatureErrors,
	FeatureStoreUpdateFeatureResponses,
	FundamentalGetBalanceSheetData,
	FundamentalGetBalanceSheetErrors,
	FundamentalGetBalanceSheetResponses,
	FundamentalGetCashFlowData,
	FundamentalGetCashFlowErrors,
	FundamentalGetCashFlowResponses,
	FundamentalGetCompanyOverviewData,
	FundamentalGetCompanyOverviewErrors,
	FundamentalGetCompanyOverviewResponses,
	FundamentalGetEarningsData,
	FundamentalGetEarningsErrors,
	FundamentalGetEarningsResponses,
	FundamentalGetIncomeStatementData,
	FundamentalGetIncomeStatementErrors,
	FundamentalGetIncomeStatementResponses,
	HealthHealthCheckData,
	HealthHealthCheckResponses,
	HealthLivenessProbeData,
	HealthLivenessProbeResponses,
	HealthReadinessProbeData,
	HealthReadinessProbeResponses,
	IntelligenceGetAnalystRecommendationsData,
	IntelligenceGetAnalystRecommendationsErrors,
	IntelligenceGetAnalystRecommendationsResponses,
	IntelligenceGetNewsData,
	IntelligenceGetNewsErrors,
	IntelligenceGetNewsResponses,
	IntelligenceGetSentimentAnalysisData,
	IntelligenceGetSentimentAnalysisErrors,
	IntelligenceGetSentimentAnalysisResponses,
	IntelligenceGetSocialSentimentData,
	IntelligenceGetSocialSentimentErrors,
	IntelligenceGetSocialSentimentResponses,
	MarketDataCollectBulkDataData,
	MarketDataCollectBulkDataErrors,
	MarketDataCollectBulkDataResponses,
	MarketDataCollectCompanyInfoData,
	MarketDataCollectCompanyInfoErrors,
	MarketDataCollectCompanyInfoResponses,
	MarketDataCollectMarketDataData,
	MarketDataCollectMarketDataErrors,
	MarketDataCollectMarketDataResponses,
	MarketDataGetDataCoverageData,
	MarketDataGetDataCoverageErrors,
	MarketDataGetDataCoverageResponses,
	MarketDataGetMarketDataInfoData,
	MarketDataGetMarketDataInfoErrors,
	MarketDataGetMarketDataInfoResponses,
	MarketDataGetSystemStatusData,
	MarketDataGetSystemStatusErrors,
	MarketDataGetSystemStatusResponses,
	MarketDataHealthCheckData,
	MarketDataHealthCheckErrors,
	MarketDataHealthCheckResponses,
	MarketRegimeGetMarketRegimeData,
	MarketRegimeGetMarketRegimeErrors,
	MarketRegimeGetMarketRegimeResponses,
	MlCompareModelsData,
	MlCompareModelsErrors,
	MlCompareModelsResponses,
	MlCompareModelVersionsData,
	MlCompareModelVersionsErrors,
	MlCompareModelVersionsResponses,
	MlCreateAbTestData,
	MlCreateAbTestErrors,
	MlCreateAbTestResponses,
	MlCreateBenchmarkData,
	MlCreateBenchmarkErrors,
	MlCreateBenchmarkResponses,
	MlCreateDeploymentData,
	MlCreateDeploymentErrors,
	MlCreateDeploymentResponses,
	MlCreateExperimentData,
	MlCreateExperimentErrors,
	MlCreateExperimentResponses,
	MlDeleteModelData,
	MlDeleteModelErrors,
	MlDeleteModelResponses,
	MlGetAbTestData,
	MlGetAbTestErrors,
	MlGetAbTestResponses,
	MlGetDeploymentData,
	MlGetDeploymentErrors,
	MlGetDeploymentResponses,
	MlGetDetailedMetricsData,
	MlGetDetailedMetricsErrors,
	MlGetDetailedMetricsResponses,
	MlGetEvaluationReportData,
	MlGetEvaluationReportErrors,
	MlGetEvaluationReportResponses,
	MlGetExperimentData,
	MlGetExperimentErrors,
	MlGetExperimentResponses,
	MlGetFairnessReportData,
	MlGetFairnessReportErrors,
	MlGetFairnessReportResponses,
	MlGetModelInfoData,
	MlGetModelInfoErrors,
	MlGetModelInfoResponses,
	MlGetModelVersionData,
	MlGetModelVersionErrors,
	MlGetModelVersionResponses,
	MlGetRunData,
	MlGetRunErrors,
	MlGetRunResponses,
	MlListAbTestsData,
	MlListAbTestsResponses,
	MlListBenchmarksData,
	MlListBenchmarksResponses,
	MlListDeploymentsData,
	MlListDeploymentsErrors,
	MlListDeploymentsResponses,
	MlListDriftEventsData,
	MlListDriftEventsErrors,
	MlListDriftEventsResponses,
	MlListEvaluationRunsData,
	MlListEvaluationRunsErrors,
	MlListEvaluationRunsResponses,
	MlListExperimentsData,
	MlListExperimentsErrors,
	MlListExperimentsResponses,
	MlListFairnessReportsData,
	MlListFairnessReportsErrors,
	MlListFairnessReportsResponses,
	MlListModelsData,
	MlListModelsErrors,
	MlListModelsResponses,
	MlListModelVersionsData,
	MlListModelVersionsErrors,
	MlListModelVersionsResponses,
	MlListRunsData,
	MlListRunsErrors,
	MlListRunsResponses,
	MlListScenariosData,
	MlListScenariosResponses,
	MlLogRunData,
	MlLogRunErrors,
	MlLogRunResponses,
	MlRecordDriftEventData,
	MlRecordDriftEventErrors,
	MlRecordDriftEventResponses,
	MlRegisterModelVersionData,
	MlRegisterModelVersionErrors,
	MlRegisterModelVersionResponses,
	MlRegisterScenarioData,
	MlRegisterScenarioErrors,
	MlRegisterScenarioResponses,
	MlRequestFairnessAuditData,
	MlRequestFairnessAuditErrors,
	MlRequestFairnessAuditResponses,
	MlRunBenchmarkData,
	MlRunBenchmarkErrors,
	MlRunBenchmarkResponses,
	MlRunEvaluationData,
	MlRunEvaluationErrors,
	MlRunEvaluationResponses,
	MlTrainModelData,
	MlTrainModelErrors,
	MlTrainModelResponses,
	MlUpdateDeploymentData,
	MlUpdateDeploymentErrors,
	MlUpdateDeploymentResponses,
	MlUpdateExperimentData,
	MlUpdateExperimentErrors,
	MlUpdateExperimentResponses,
	MlUpdateModelVersionData,
	MlUpdateModelVersionErrors,
	MlUpdateModelVersionResponses,
	MlUpdateRunData,
	MlUpdateRunErrors,
	MlUpdateRunResponses,
	MlUpdateScenarioData,
	MlUpdateScenarioErrors,
	MlUpdateScenarioResponses,
	NarrativeGenerateNarrativeReportData,
	NarrativeGenerateNarrativeReportErrors,
	NarrativeGenerateNarrativeReportResponses,
	OAuth2AuthorizeData,
	OAuth2AuthorizeErrors,
	OAuth2AuthorizeResponses,
	OAuth2CallbackData,
	OAuth2CallbackErrors,
	OAuth2CallbackResponses,
	PromptGovernanceApprovePromptData,
	PromptGovernanceApprovePromptErrors,
	PromptGovernanceApprovePromptResponses,
	PromptGovernanceCreatePromptTemplateData,
	PromptGovernanceCreatePromptTemplateErrors,
	PromptGovernanceCreatePromptTemplateResponses,
	PromptGovernanceEvaluatePromptData,
	PromptGovernanceEvaluatePromptErrors,
	PromptGovernanceEvaluatePromptResponses,
	PromptGovernanceListPromptAuditLogsData,
	PromptGovernanceListPromptAuditLogsErrors,
	PromptGovernanceListPromptAuditLogsResponses,
	PromptGovernanceListPromptTemplatesData,
	PromptGovernanceListPromptTemplatesErrors,
	PromptGovernanceListPromptTemplatesResponses,
	PromptGovernanceLogPromptUsageData,
	PromptGovernanceLogPromptUsageErrors,
	PromptGovernanceLogPromptUsageResponses,
	PromptGovernanceRejectPromptData,
	PromptGovernanceRejectPromptErrors,
	PromptGovernanceRejectPromptResponses,
	PromptGovernanceSubmitPromptForReviewData,
	PromptGovernanceSubmitPromptForReviewErrors,
	PromptGovernanceSubmitPromptForReviewResponses,
	PromptGovernanceUpdatePromptTemplateData,
	PromptGovernanceUpdatePromptTemplateErrors,
	PromptGovernanceUpdatePromptTemplateResponses,
	SignalsGetMlSignalData,
	SignalsGetMlSignalErrors,
	SignalsGetMlSignalResponses,
	StockGetDailyPricesData,
	StockGetDailyPricesErrors,
	StockGetDailyPricesResponses,
	StockGetIntradayDataData,
	StockGetIntradayDataErrors,
	StockGetIntradayDataResponses,
	StockGetMonthlyPricesData,
	StockGetMonthlyPricesErrors,
	StockGetMonthlyPricesResponses,
	StockGetQuoteData,
	StockGetQuoteErrors,
	StockGetQuoteResponses,
	StockGetWeeklyPricesData,
	StockGetWeeklyPricesErrors,
	StockGetWeeklyPricesResponses,
	StockSearchStockSymbolsData,
	StockSearchStockSymbolsErrors,
	StockSearchStockSymbolsResponses,
	StrategyBuilderApproveStrategyData,
	StrategyBuilderApproveStrategyErrors,
	StrategyBuilderApproveStrategyResponses,
	StrategyBuilderGenerateStrategyData,
	StrategyBuilderGenerateStrategyErrors,
	StrategyBuilderGenerateStrategyResponses,
	StrategyBuilderSearchIndicatorsData,
	StrategyBuilderSearchIndicatorsErrors,
	StrategyBuilderSearchIndicatorsResponses,
	StrategyCreateStrategyData,
	StrategyCreateStrategyErrors,
	StrategyCreateStrategyResponses,
	StrategyDeleteStrategyData,
	StrategyDeleteStrategyErrors,
	StrategyDeleteStrategyResponses,
	StrategyExecuteStrategyData,
	StrategyExecuteStrategyErrors,
	StrategyExecuteStrategyResponses,
	StrategyGetStrategiesData,
	StrategyGetStrategiesErrors,
	StrategyGetStrategiesResponses,
	StrategyGetStrategyData,
	StrategyGetStrategyErrors,
	StrategyGetStrategyExecutionsData,
	StrategyGetStrategyExecutionsErrors,
	StrategyGetStrategyExecutionsResponses,
	StrategyGetStrategyPerformanceData,
	StrategyGetStrategyPerformanceErrors,
	StrategyGetStrategyPerformanceResponses,
	StrategyGetStrategyResponses,
	StrategyUpdateStrategyData,
	StrategyUpdateStrategyErrors,
	StrategyUpdateStrategyResponses,
	TasksGetStockUpdateStatusData,
	TasksGetStockUpdateStatusResponses,
	TasksRunStockDeltaUpdateData,
	TasksRunStockDeltaUpdateResponses,
	TasksRunStockForceUpdateData,
	TasksRunStockForceUpdateResponses,
	TechnicalIndicatorGetAdxData,
	TechnicalIndicatorGetAdxErrors,
	TechnicalIndicatorGetAdxResponses,
	TechnicalIndicatorGetAtrData,
	TechnicalIndicatorGetAtrErrors,
	TechnicalIndicatorGetAtrResponses,
	TechnicalIndicatorGetBbandsData,
	TechnicalIndicatorGetBbandsErrors,
	TechnicalIndicatorGetBbandsResponses,
	TechnicalIndicatorGetDemaData,
	TechnicalIndicatorGetDemaErrors,
	TechnicalIndicatorGetDemaResponses,
	TechnicalIndicatorGetEmaData,
	TechnicalIndicatorGetEmaErrors,
	TechnicalIndicatorGetEmaResponses,
	TechnicalIndicatorGetIndicatorListData,
	TechnicalIndicatorGetIndicatorListErrors,
	TechnicalIndicatorGetIndicatorListResponses,
	TechnicalIndicatorGetMacdData,
	TechnicalIndicatorGetMacdErrors,
	TechnicalIndicatorGetMacdResponses,
	TechnicalIndicatorGetRsiData,
	TechnicalIndicatorGetRsiErrors,
	TechnicalIndicatorGetRsiResponses,
	TechnicalIndicatorGetSmaData,
	TechnicalIndicatorGetSmaErrors,
	TechnicalIndicatorGetSmaResponses,
	TechnicalIndicatorGetStochData,
	TechnicalIndicatorGetStochErrors,
	TechnicalIndicatorGetStochResponses,
	TechnicalIndicatorGetTemaData,
	TechnicalIndicatorGetTemaErrors,
	TechnicalIndicatorGetTemaResponses,
	TechnicalIndicatorGetWmaData,
	TechnicalIndicatorGetWmaErrors,
	TechnicalIndicatorGetWmaResponses,
	TemplateCreateStrategyFromTemplateData,
	TemplateCreateStrategyFromTemplateErrors,
	TemplateCreateStrategyFromTemplateResponses,
	TemplateCreateTemplateData,
	TemplateCreateTemplateErrors,
	TemplateCreateTemplateResponses,
	TemplateDeleteTemplateData,
	TemplateDeleteTemplateErrors,
	TemplateDeleteTemplateResponses,
	TemplateGetTemplateData,
	TemplateGetTemplateErrors,
	TemplateGetTemplateResponses,
	TemplateGetTemplatesData,
	TemplateGetTemplatesErrors,
	TemplateGetTemplatesResponses,
	TemplateGetTemplateUsageStatsData,
	TemplateGetTemplateUsageStatsErrors,
	TemplateGetTemplateUsageStatsResponses,
	TemplateUpdateTemplateData,
	TemplateUpdateTemplateErrors,
	TemplateUpdateTemplateResponses,
	UserDeleteUserData,
	UserDeleteUserErrors,
	UserDeleteUserResponses,
	UserGetMyOauthAccountsData,
	UserGetMyOauthAccountsErrors,
	UserGetMyOauthAccountsResponses,
	UserGetUserData,
	UserGetUserErrors,
	UserGetUserMeData,
	UserGetUserMeErrors,
	UserGetUserMeResponses,
	UserGetUserOauthAccountsData,
	UserGetUserOauthAccountsErrors,
	UserGetUserOauthAccountsResponses,
	UserGetUserResponses,
	UserRemoveOauthAccountData,
	UserRemoveOauthAccountErrors,
	UserRemoveOauthAccountResponses,
	UserUpdateUserData,
	UserUpdateUserErrors,
	UserUpdateUserMeData,
	UserUpdateUserMeErrors,
	UserUpdateUserMeResponses,
	UserUpdateUserResponses,
	WatchlistCreateOrUpdateWatchlistData,
	WatchlistCreateOrUpdateWatchlistErrors,
	WatchlistCreateOrUpdateWatchlistResponses,
	WatchlistCreateWatchlistData,
	WatchlistCreateWatchlistErrors,
	WatchlistCreateWatchlistResponses,
	WatchlistDeleteWatchlistData,
	WatchlistDeleteWatchlistErrors,
	WatchlistDeleteWatchlistResponses,
	WatchlistGetWatchlistCoverageData,
	WatchlistGetWatchlistCoverageErrors,
	WatchlistGetWatchlistCoverageResponses,
	WatchlistGetWatchlistData,
	WatchlistGetWatchlistErrors,
	WatchlistGetWatchlistResponses,
	WatchlistListWatchlistsData,
	WatchlistListWatchlistsErrors,
	WatchlistListWatchlistsResponses,
	WatchlistSetupDefaultWatchlistData,
	WatchlistSetupDefaultWatchlistErrors,
	WatchlistSetupDefaultWatchlistResponses,
	WatchlistUpdateWatchlistData,
	WatchlistUpdateWatchlistErrors,
	WatchlistUpdateWatchlistResponses,
} from "./types.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

export class HealthService {
	/**
	 * Health Check
	 * Get comprehensive health status.
	 */
	public static healthCheck<ThrowOnError extends boolean = false>(
		options?: Options<HealthHealthCheckData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			HealthHealthCheckResponses,
			unknown,
			ThrowOnError
		>({
			url: "/health/",
			...options,
		});
	}

	/**
	 * Liveness Probe
	 * Kubernetes liveness probe endpoint.
	 */
	public static livenessProbe<ThrowOnError extends boolean = false>(
		options?: Options<HealthLivenessProbeData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			HealthLivenessProbeResponses,
			unknown,
			ThrowOnError
		>({
			url: "/health/live",
			...options,
		});
	}

	/**
	 * Readiness Probe
	 * Kubernetes readiness probe endpoint.
	 */
	public static readinessProbe<ThrowOnError extends boolean = false>(
		options?: Options<HealthReadinessProbeData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			HealthReadinessProbeResponses,
			unknown,
			ThrowOnError
		>({
			url: "/health/ready",
			...options,
		});
	}
}

export class AuthService {
	/**
	 * Login
	 */
	public static login<ThrowOnError extends boolean = false>(
		options: Options<AuthLoginData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthLoginResponses,
			AuthLoginErrors,
			ThrowOnError
		>({
			...urlSearchParamsBodySerializer,
			url: "/api/v1/auth/login",
			...options,
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
				...options.headers,
			},
		});
	}

	/**
	 * Logout
	 * 로그아웃 엔드포인트.
	 *
	 * 쿠키에서 토큰을 삭제하고 로그아웃 처리를 합니다.
	 */
	public static logout<ThrowOnError extends boolean = false>(
		options?: Options<AuthLogoutData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			AuthLogoutResponses,
			AuthLogoutErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/auth/logout",
			...options,
		});
	}

	/**
	 * Refresh Token
	 * JWT 토큰 갱신 엔드포인트
	 */
	public static refreshToken<ThrowOnError extends boolean = false>(
		options?: Options<AuthRefreshTokenData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			AuthRefreshTokenResponses,
			AuthRefreshTokenErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/refresh",
			...options,
		});
	}

	/**
	 * Verify Token
	 * 토큰 검증 및 사용자 정보 반환 (디버깅용)
	 */
	public static verifyToken<ThrowOnError extends boolean = false>(
		options?: Options<AuthVerifyTokenData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			AuthVerifyTokenResponses,
			AuthVerifyTokenErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/auth/token/verify",
			...options,
		});
	}

	/**
	 * Register
	 */
	public static register<ThrowOnError extends boolean = false>(
		options: Options<AuthRegisterData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthRegisterResponses,
			AuthRegisterErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/register",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Forgot Password
	 */
	public static forgotPassword<ThrowOnError extends boolean = false>(
		options: Options<AuthForgotPasswordData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthForgotPasswordResponses,
			AuthForgotPasswordErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/forgot-password",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Reset Password
	 */
	public static resetPassword<ThrowOnError extends boolean = false>(
		options: Options<AuthResetPasswordData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthResetPasswordResponses,
			AuthResetPasswordErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/reset-password",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Request Verify Token
	 */
	public static requestVerifyToken<ThrowOnError extends boolean = false>(
		options: Options<AuthRequestVerifyTokenData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthRequestVerifyTokenResponses,
			AuthRequestVerifyTokenErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/request-verify-token",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Verify
	 */
	public static verify<ThrowOnError extends boolean = false>(
		options: Options<AuthVerifyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			AuthVerifyResponses,
			AuthVerifyErrors,
			ThrowOnError
		>({
			url: "/api/v1/auth/verify",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}
}

export class UserService {
	/**
	 * Get User Me
	 */
	public static getUserMe<ThrowOnError extends boolean = false>(
		options?: Options<UserGetUserMeData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			UserGetUserMeResponses,
			UserGetUserMeErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me",
			...options,
		});
	}

	/**
	 * Update User Me
	 */
	public static updateUserMe<ThrowOnError extends boolean = false>(
		options: Options<UserUpdateUserMeData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			UserUpdateUserMeResponses,
			UserUpdateUserMeErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete User
	 */
	public static deleteUser<ThrowOnError extends boolean = false>(
		options: Options<UserDeleteUserData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			UserDeleteUserResponses,
			UserDeleteUserErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{id}",
			...options,
		});
	}

	/**
	 * Get User
	 */
	public static getUser<ThrowOnError extends boolean = false>(
		options: Options<UserGetUserData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			UserGetUserResponses,
			UserGetUserErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{id}",
			...options,
		});
	}

	/**
	 * Update User
	 */
	public static updateUser<ThrowOnError extends boolean = false>(
		options: Options<UserUpdateUserData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			UserUpdateUserResponses,
			UserUpdateUserErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get My Oauth Accounts
	 * 현재 사용자의 연결된 OAuth 계정 목록을 조회합니다.
	 */
	public static getMyOauthAccounts<ThrowOnError extends boolean = false>(
		options?: Options<UserGetMyOauthAccountsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			UserGetMyOauthAccountsResponses,
			UserGetMyOauthAccountsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me/oauth-accounts",
			...options,
		});
	}

	/**
	 * Remove Oauth Account
	 * 특정 OAuth 계정 연결을 해제합니다.
	 */
	public static removeOauthAccount<ThrowOnError extends boolean = false>(
		options: Options<UserRemoveOauthAccountData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			UserRemoveOauthAccountResponses,
			UserRemoveOauthAccountErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/me/oauth-accounts/{oauth_name}/{account_id}",
			...options,
		});
	}

	/**
	 * Get User Oauth Accounts
	 * 특정 사용자의 OAuth 계정 목록을 조회합니다. (관리자 전용)
	 */
	public static getUserOauthAccounts<ThrowOnError extends boolean = false>(
		options: Options<UserGetUserOauthAccountsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			UserGetUserOauthAccountsResponses,
			UserGetUserOauthAccountsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/users/{user_id}/oauth-accounts",
			...options,
		});
	}
}

export class OAuth2Service {
	/**
	 * Authorize
	 * Initiate the OAuth2 authorization process for associating an OAuth account
	 * with the currently authenticated user.
	 */
	public static authorize<ThrowOnError extends boolean = false>(
		options: Options<OAuth2AuthorizeData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			OAuth2AuthorizeResponses,
			OAuth2AuthorizeErrors,
			ThrowOnError
		>({
			url: "/api/v1/oauth2/{provider}/authorize",
			...options,
		});
	}

	/**
	 * Callback
	 * The response varies based on the authentication backend used.
	 */
	public static callback<ThrowOnError extends boolean = false>(
		options: Options<OAuth2CallbackData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			OAuth2CallbackResponses,
			OAuth2CallbackErrors,
			ThrowOnError
		>({
			url: "/api/v1/oauth2/{provider}/callback",
			...options,
		});
	}
}

export class StockService {
	/**
	 * Get Daily Prices
	 * 지정된 종목의 일일 주가 데이터(OHLCV)를 조회합니다.
	 */
	public static getDailyPrices<ThrowOnError extends boolean = false>(
		options: Options<StockGetDailyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetDailyPricesResponses,
			StockGetDailyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/daily/{symbol}",
			...options,
		});
	}

	/**
	 * Get Weekly Prices
	 * 지정된 종목의 주간 주가 데이터(OHLCV)를 조회합니다.
	 */
	public static getWeeklyPrices<ThrowOnError extends boolean = false>(
		options: Options<StockGetWeeklyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetWeeklyPricesResponses,
			StockGetWeeklyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/weekly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Monthly Prices
	 * 지정된 종목의 월간 주가 데이터(OHLCV)를 조회합니다.
	 */
	public static getMonthlyPrices<ThrowOnError extends boolean = false>(
		options: Options<StockGetMonthlyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetMonthlyPricesResponses,
			StockGetMonthlyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/monthly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Quote
	 * 지정된 종목의 실시간 호가 정보를 조회합니다.
	 */
	public static getQuote<ThrowOnError extends boolean = false>(
		options: Options<StockGetQuoteData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetQuoteResponses,
			StockGetQuoteErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/quote/{symbol}",
			...options,
		});
	}

	/**
	 * Get Intraday Data
	 * 지정된 종목의 실시간 또는 분봉 데이터를 조회합니다.
	 */
	public static getIntradayData<ThrowOnError extends boolean = false>(
		options: Options<StockGetIntradayDataData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockGetIntradayDataResponses,
			StockGetIntradayDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/intraday/{symbol}",
			...options,
		});
	}

	/**
	 * Search Stock Symbols
	 * 주식 심볼 검색 (Alpha Vantage의 심볼 서치 기능 활용)
	 */
	public static searchStockSymbols<ThrowOnError extends boolean = false>(
		options: Options<StockSearchStockSymbolsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StockSearchStockSymbolsResponses,
			StockSearchStockSymbolsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/stock/search",
			...options,
		});
	}
}

export class CryptoService {
	/**
	 * Get Exchange Rate
	 * 암호화폐/법정화폐 간의 실시간 환율을 조회합니다.
	 */
	public static getExchangeRate<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetExchangeRateData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetExchangeRateResponses,
			CryptoGetExchangeRateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/exchange-rate/{from_currency}/{to_currency}",
			...options,
		});
	}

	/**
	 * Get Bulk Exchange Rates
	 * 여러 암호화폐의 환율을 일괄 조회합니다.
	 */
	public static getBulkExchangeRates<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetBulkExchangeRatesData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			CryptoGetBulkExchangeRatesResponses,
			CryptoGetBulkExchangeRatesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/exchange-rates/bulk",
			...options,
		});
	}

	/**
	 * Get Daily Prices
	 * 암호화폐의 일일 가격 데이터(OHLCV)를 조회합니다.
	 */
	public static getDailyPrices<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetDailyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetDailyPricesResponses,
			CryptoGetDailyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/daily/{symbol}",
			...options,
		});
	}

	/**
	 * Get Weekly Prices
	 * 암호화폐의 주간 가격 데이터(OHLCV)를 조회합니다.
	 */
	public static getWeeklyPrices<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetWeeklyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetWeeklyPricesResponses,
			CryptoGetWeeklyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/weekly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Monthly Prices
	 * 암호화폐의 월간 가격 데이터(OHLCV)를 조회합니다.
	 */
	public static getMonthlyPrices<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetMonthlyPricesData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetMonthlyPricesResponses,
			CryptoGetMonthlyPricesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/monthly/{symbol}",
			...options,
		});
	}

	/**
	 * Get Bitcoin Price
	 * 비트코인 가격 데이터를 조회합니다.
	 */
	public static getBitcoinPrice<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetBitcoinPriceData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetBitcoinPriceResponses,
			CryptoGetBitcoinPriceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/bitcoin/{period}",
			...options,
		});
	}

	/**
	 * Get Ethereum Price
	 * 이더리움 가격 데이터를 조회합니다.
	 */
	public static getEthereumPrice<ThrowOnError extends boolean = false>(
		options: Options<CryptoGetEthereumPriceData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			CryptoGetEthereumPriceResponses,
			CryptoGetEthereumPriceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/crypto/ethereum/{period}",
			...options,
		});
	}
}

export class FundamentalService {
	/**
	 * Get Company Overview
	 * 지정된 종목의 기업 개요 정보를 조회합니다.
	 */
	public static getCompanyOverview<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetCompanyOverviewData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetCompanyOverviewResponses,
			FundamentalGetCompanyOverviewErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/overview/{symbol}",
			...options,
		});
	}

	/**
	 * Get Income Statement
	 * 지정된 종목의 손익계산서를 조회합니다.
	 */
	public static getIncomeStatement<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetIncomeStatementData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetIncomeStatementResponses,
			FundamentalGetIncomeStatementErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/income-statement/{symbol}",
			...options,
		});
	}

	/**
	 * Get Balance Sheet
	 * 지정된 종목의 재무상태표를 조회합니다.
	 */
	public static getBalanceSheet<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetBalanceSheetData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetBalanceSheetResponses,
			FundamentalGetBalanceSheetErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/balance-sheet/{symbol}",
			...options,
		});
	}

	/**
	 * Get Cash Flow
	 * 지정된 종목의 현금흐름표를 조회합니다.
	 */
	public static getCashFlow<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetCashFlowData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetCashFlowResponses,
			FundamentalGetCashFlowErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/cash-flow/{symbol}",
			...options,
		});
	}

	/**
	 * Get Earnings
	 * 지정된 종목의 실적 데이터를 조회합니다.
	 */
	public static getEarnings<ThrowOnError extends boolean = false>(
		options: Options<FundamentalGetEarningsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FundamentalGetEarningsResponses,
			FundamentalGetEarningsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/fundamental/earnings/{symbol}",
			...options,
		});
	}
}

export class EconomicService {
	/**
	 * Get Gdp Data
	 * 미국 GDP 데이터를 조회합니다.
	 */
	public static getGdpData<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetGdpDataData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetGdpDataResponses,
			EconomicGetGdpDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/gdp",
			...options,
		});
	}

	/**
	 * Get Inflation Data
	 * 미국 인플레이션 지표 데이터를 조회합니다.
	 */
	public static getInflationData<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetInflationDataData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetInflationDataResponses,
			EconomicGetInflationDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/inflation",
			...options,
		});
	}

	/**
	 * Get Interest Rates
	 * 미국 기준금리 및 채권 수익률 데이터를 조회합니다.
	 */
	public static getInterestRates<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetInterestRatesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetInterestRatesResponses,
			EconomicGetInterestRatesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/interest-rates",
			...options,
		});
	}

	/**
	 * Get Employment Data
	 * 미국 실업률 및 고용 관련 지표를 조회합니다.
	 */
	public static getEmploymentData<ThrowOnError extends boolean = false>(
		options?: Options<EconomicGetEmploymentDataData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			EconomicGetEmploymentDataResponses,
			EconomicGetEmploymentDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/economic/employment",
			...options,
		});
	}
}

export class IntelligenceService {
	/**
	 * Get News
	 * 지정된 종목 관련 뉴스를 조회합니다.
	 */
	public static getNews<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetNewsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetNewsResponses,
			IntelligenceGetNewsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/news/{symbol}",
			...options,
		});
	}

	/**
	 * Get Sentiment Analysis
	 * 지정된 종목의 감정 분석 결과를 조회합니다.
	 */
	public static getSentimentAnalysis<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetSentimentAnalysisData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetSentimentAnalysisResponses,
			IntelligenceGetSentimentAnalysisErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/sentiment/{symbol}",
			...options,
		});
	}

	/**
	 * Get Analyst Recommendations
	 * 지정된 종목의 분석가 추천 정보를 조회합니다.
	 */
	public static getAnalystRecommendations<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetAnalystRecommendationsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetAnalystRecommendationsResponses,
			IntelligenceGetAnalystRecommendationsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/analyst-recommendations/{symbol}",
			...options,
		});
	}

	/**
	 * Get Social Sentiment
	 * 지정된 종목의 소셜 미디어 감정 분석을 조회합니다.
	 */
	public static getSocialSentiment<ThrowOnError extends boolean = false>(
		options: Options<IntelligenceGetSocialSentimentData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			IntelligenceGetSocialSentimentResponses,
			IntelligenceGetSocialSentimentErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/intelligence/social-sentiment/{symbol}",
			...options,
		});
	}
}

export class MarketDataService {
	/**
	 * Collect Company Info
	 * 지정된 심볼의 기업 정보를 수집하여 저장
	 *
	 * Alpha Vantage API를 통해 기업의 기본 정보, 재무 지표,
	 * 업종 분류 등을 수집하고 데이터베이스에 저장합니다.
	 */
	public static collectCompanyInfo<ThrowOnError extends boolean = false>(
		options: Options<MarketDataCollectCompanyInfoData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MarketDataCollectCompanyInfoResponses,
			MarketDataCollectCompanyInfoErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/collect/company-info/{symbol}",
			...options,
		});
	}

	/**
	 * Collect Market Data
	 * 지정된 심볼의 주가 데이터를 수집하여 저장
	 *
	 * Alpha Vantage API를 통해 일일 OHLCV 데이터를 수집하고
	 * DuckDB 캐시 및 MongoDB에 저장합니다.
	 */
	public static collectMarketData<ThrowOnError extends boolean = false>(
		options: Options<MarketDataCollectMarketDataData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MarketDataCollectMarketDataResponses,
			MarketDataCollectMarketDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/collect/market-data/{symbol}",
			...options,
		});
	}

	/**
	 * Collect Bulk Data
	 * 여러 심볼의 데이터를 일괄 수집
	 *
	 * 백그라운드 작업으로 처리되며, 대량의 심볼에 대해
	 * 기업 정보와 주가 데이터를 순차적으로 수집합니다.
	 */
	public static collectBulkData<ThrowOnError extends boolean = false>(
		options: Options<MarketDataCollectBulkDataData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MarketDataCollectBulkDataResponses,
			MarketDataCollectBulkDataErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/collect/bulk",
			...options,
		});
	}

	/**
	 * Get Data Coverage
	 * 지정된 심볼의 데이터 커버리지 정보 조회
	 *
	 * 기업 정보, 주가 데이터의 수집 상태와 품질을 확인합니다.
	 */
	public static getDataCoverage<ThrowOnError extends boolean = false>(
		options: Options<MarketDataGetDataCoverageData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MarketDataGetDataCoverageResponses,
			MarketDataGetDataCoverageErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/coverage/{symbol}",
			...options,
		});
	}

	/**
	 * Get System Status
	 * 시장 데이터 시스템의 전반적인 상태 조회
	 *
	 * API 연결 상태, 캐시 성능, 수집 통계 등을 확인합니다.
	 */
	public static getSystemStatus<ThrowOnError extends boolean = false>(
		options?: Options<MarketDataGetSystemStatusData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MarketDataGetSystemStatusResponses,
			MarketDataGetSystemStatusErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/management/status",
			...options,
		});
	}

	/**
	 * Get Market Data Info
	 * 마켓 데이터 API 정보 및 사용 가능한 엔드포인트 목록
	 */
	public static getMarketDataInfo<ThrowOnError extends boolean = false>(
		options?: Options<MarketDataGetMarketDataInfoData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MarketDataGetMarketDataInfoResponses,
			MarketDataGetMarketDataInfoErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/",
			...options,
		});
	}

	/**
	 * Health Check
	 * 마켓 데이터 서비스 상태 확인
	 */
	public static healthCheck<ThrowOnError extends boolean = false>(
		options?: Options<MarketDataHealthCheckData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MarketDataHealthCheckResponses,
			MarketDataHealthCheckErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/health",
			...options,
		});
	}
}

export class TechnicalIndicatorService {
	/**
	 * Get Indicator List
	 * 지원하는 기술적 지표 목록을 조회합니다.
	 */
	public static getIndicatorList<ThrowOnError extends boolean = false>(
		options?: Options<TechnicalIndicatorGetIndicatorListData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TechnicalIndicatorGetIndicatorListResponses,
			TechnicalIndicatorGetIndicatorListErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/indicators",
			...options,
		});
	}

	/**
	 * Get Sma
	 * 단순이동평균(SMA)을 조회합니다.
	 */
	public static getSma<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetSmaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetSmaResponses,
			TechnicalIndicatorGetSmaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/sma",
			...options,
		});
	}

	/**
	 * Get Wma
	 * 가중이동평균(WMA)을 조회합니다.
	 */
	public static getWma<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetWmaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetWmaResponses,
			TechnicalIndicatorGetWmaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/wma",
			...options,
		});
	}

	/**
	 * Get Dema
	 * 이중지수이동평균(DEMA)을 조회합니다.
	 */
	public static getDema<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetDemaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetDemaResponses,
			TechnicalIndicatorGetDemaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/dema",
			...options,
		});
	}

	/**
	 * Get Tema
	 * 삼중지수이동평균(TEMA)을 조회합니다.
	 */
	public static getTema<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetTemaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetTemaResponses,
			TechnicalIndicatorGetTemaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/tema",
			...options,
		});
	}

	/**
	 * Get Ema
	 * 지수이동평균(EMA)을 조회합니다.
	 */
	public static getEma<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetEmaData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetEmaResponses,
			TechnicalIndicatorGetEmaErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/ema",
			...options,
		});
	}

	/**
	 * Get Rsi
	 * 상대강도지수(RSI)를 조회합니다.
	 */
	public static getRsi<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetRsiData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetRsiResponses,
			TechnicalIndicatorGetRsiErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/rsi",
			...options,
		});
	}

	/**
	 * Get Macd
	 * MACD를 조회합니다.
	 */
	public static getMacd<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetMacdData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetMacdResponses,
			TechnicalIndicatorGetMacdErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/macd",
			...options,
		});
	}

	/**
	 * Get Bbands
	 * 볼린저밴드(BBANDS)를 조회합니다.
	 */
	public static getBbands<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetBbandsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetBbandsResponses,
			TechnicalIndicatorGetBbandsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/bbands",
			...options,
		});
	}

	/**
	 * Get Adx
	 * 평균방향지수(ADX)를 조회합니다.
	 */
	public static getAdx<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetAdxData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetAdxResponses,
			TechnicalIndicatorGetAdxErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/adx",
			...options,
		});
	}

	/**
	 * Get Atr
	 * 평균진폭(ATR)을 조회합니다.
	 */
	public static getAtr<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetAtrData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetAtrResponses,
			TechnicalIndicatorGetAtrErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/atr",
			...options,
		});
	}

	/**
	 * Get Stoch
	 * 스토캐스틱 오실레이터(STOCH)를 조회합니다.
	 */
	public static getStoch<ThrowOnError extends boolean = false>(
		options: Options<TechnicalIndicatorGetStochData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TechnicalIndicatorGetStochResponses,
			TechnicalIndicatorGetStochErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/technical-indicators/{symbol}/stoch",
			...options,
		});
	}
}

export class MarketRegimeService {
	/**
	 * Get Market Regime
	 * Return the latest market regime snapshot.
	 */
	public static getMarketRegime<ThrowOnError extends boolean = false>(
		options: Options<MarketRegimeGetMarketRegimeData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MarketRegimeGetMarketRegimeResponses,
			MarketRegimeGetMarketRegimeErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/market-data/regime/",
			...options,
		});
	}
}

export class StrategyService {
	/**
	 * Get Strategies
	 * Get list of strategies
	 */
	public static getStrategies<ThrowOnError extends boolean = false>(
		options?: Options<StrategyGetStrategiesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			StrategyGetStrategiesResponses,
			StrategyGetStrategiesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/",
			...options,
		});
	}

	/**
	 * Create Strategy
	 * Create a new strategy
	 */
	public static createStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyCreateStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			StrategyCreateStrategyResponses,
			StrategyCreateStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Strategy
	 * Delete strategy (soft delete)
	 */
	public static deleteStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyDeleteStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			StrategyDeleteStrategyResponses,
			StrategyDeleteStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}",
			...options,
		});
	}

	/**
	 * Get Strategy
	 * Get strategy by ID
	 */
	public static getStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyGetStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StrategyGetStrategyResponses,
			StrategyGetStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}",
			...options,
		});
	}

	/**
	 * Update Strategy
	 * Update strategy
	 */
	public static updateStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyUpdateStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).put<
			StrategyUpdateStrategyResponses,
			StrategyUpdateStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Execute Strategy
	 * Execute strategy and generate signal
	 */
	public static executeStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyExecuteStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			StrategyExecuteStrategyResponses,
			StrategyExecuteStrategyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}/execute",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Strategy Executions
	 * Get strategy execution history
	 */
	public static getStrategyExecutions<ThrowOnError extends boolean = false>(
		options: Options<StrategyGetStrategyExecutionsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StrategyGetStrategyExecutionsResponses,
			StrategyGetStrategyExecutionsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}/executions",
			...options,
		});
	}

	/**
	 * Get Strategy Performance
	 * Get strategy performance metrics
	 */
	public static getStrategyPerformance<ThrowOnError extends boolean = false>(
		options: Options<StrategyGetStrategyPerformanceData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			StrategyGetStrategyPerformanceResponses,
			StrategyGetStrategyPerformanceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/{strategy_id}/performance",
			...options,
		});
	}
}

export class TemplateService {
	/**
	 * Get Templates
	 * Get list of strategy templates
	 */
	public static getTemplates<ThrowOnError extends boolean = false>(
		options?: Options<TemplateGetTemplatesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TemplateGetTemplatesResponses,
			TemplateGetTemplatesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/",
			...options,
		});
	}

	/**
	 * Create Template
	 * Create a new strategy template (Superuser only)
	 */
	public static createTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateCreateTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			TemplateCreateTemplateResponses,
			TemplateCreateTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Template
	 * Delete template by ID (Superuser only)
	 */
	public static deleteTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateDeleteTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			TemplateDeleteTemplateResponses,
			TemplateDeleteTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}",
			...options,
		});
	}

	/**
	 * Get Template
	 * Get template by ID
	 */
	public static getTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateGetTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			TemplateGetTemplateResponses,
			TemplateGetTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}",
			...options,
		});
	}

	/**
	 * Update Template
	 * Update template by ID (Superuser only)
	 */
	public static updateTemplate<ThrowOnError extends boolean = false>(
		options: Options<TemplateUpdateTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			TemplateUpdateTemplateResponses,
			TemplateUpdateTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Create Strategy From Template
	 * Create a strategy instance from template
	 */
	public static createStrategyFromTemplate<
		ThrowOnError extends boolean = false,
	>(options: Options<TemplateCreateStrategyFromTemplateData, ThrowOnError>) {
		return (options.client ?? client).post<
			TemplateCreateStrategyFromTemplateResponses,
			TemplateCreateStrategyFromTemplateErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/{template_id}/create-strategy",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Template Usage Stats
	 * Get template usage statistics
	 */
	public static getTemplateUsageStats<ThrowOnError extends boolean = false>(
		options?: Options<TemplateGetTemplateUsageStatsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TemplateGetTemplateUsageStatsResponses,
			TemplateGetTemplateUsageStatsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/strategies/templates/analytics/usage-stats",
			...options,
		});
	}
}

export class BacktestService {
	/**
	 * Health Check
	 * 백테스트 시스템 상태 확인 (Phase 2)
	 */
	public static healthCheck<ThrowOnError extends boolean = false>(
		options?: Options<BacktestHealthCheckData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestHealthCheckResponses,
			BacktestHealthCheckErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/health",
			...options,
		});
	}

	/**
	 * Get Backtests
	 * Get list of backtests
	 */
	public static getBacktests<ThrowOnError extends boolean = false>(
		options?: Options<BacktestGetBacktestsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestGetBacktestsResponses,
			BacktestGetBacktestsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/",
			...options,
		});
	}

	/**
	 * Create Backtest
	 * Create a new backtest
	 */
	public static createBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestCreateBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			BacktestCreateBacktestResponses,
			BacktestCreateBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Backtest
	 * Delete backtest
	 */
	public static deleteBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestDeleteBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			BacktestDeleteBacktestResponses,
			BacktestDeleteBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}",
			...options,
		});
	}

	/**
	 * Get Backtest
	 * Get backtest by ID
	 */
	public static getBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetBacktestResponses,
			BacktestGetBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}",
			...options,
		});
	}

	/**
	 * Update Backtest
	 * Update backtest
	 */
	public static updateBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestUpdateBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).put<
			BacktestUpdateBacktestResponses,
			BacktestUpdateBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Execute Backtest
	 * Execute backtest with trading signals (Phase 2)
	 */
	public static executeBacktest<ThrowOnError extends boolean = false>(
		options: Options<BacktestExecuteBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			BacktestExecuteBacktestResponses,
			BacktestExecuteBacktestErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}/execute",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Backtest Executions
	 * Get execution history for a backtest
	 */
	public static getBacktestExecutions<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetBacktestExecutionsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetBacktestExecutionsResponses,
			BacktestGetBacktestExecutionsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}/executions",
			...options,
		});
	}

	/**
	 * Get Performance Analytics
	 * 백테스트 성과 분석 (MongoDB 기반 - Phase 2)
	 */
	public static getPerformanceAnalytics<ThrowOnError extends boolean = false>(
		options?: Options<BacktestGetPerformanceAnalyticsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestGetPerformanceAnalyticsResponses,
			BacktestGetPerformanceAnalyticsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/analytics/performance-stats",
			...options,
		});
	}

	/**
	 * Get Trades Analytics
	 * 거래 기록 분석 (MongoDB 기반)
	 */
	public static getTradesAnalytics<ThrowOnError extends boolean = false>(
		options?: Options<BacktestGetTradesAnalyticsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestGetTradesAnalyticsResponses,
			BacktestGetTradesAnalyticsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/analytics/trades",
			...options,
		});
	}

	/**
	 * Get Portfolio History
	 * 백테스트 포트폴리오 히스토리 조회 (DuckDB)
	 *
	 * P3.2: 고성능 시계열 조회를 위한 DuckDB 조회
	 */
	public static getPortfolioHistory<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetPortfolioHistoryData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetPortfolioHistoryResponses,
			BacktestGetPortfolioHistoryErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}/portfolio-history",
			...options,
		});
	}

	/**
	 * Get Trades History
	 * 백테스트 거래 내역 조회 (DuckDB)
	 *
	 * P3.2: 고성능 거래 내역 조회를 위한 DuckDB 조회
	 */
	public static getTradesHistory<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetTradesHistoryData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetTradesHistoryResponses,
			BacktestGetTradesHistoryErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/{backtest_id}/trades-history",
			...options,
		});
	}

	/**
	 * List Optimization Studies
	 * List optimization studies with optional filters.
	 *
	 * Args:
	 * symbol: Filter by symbol
	 * strategy_name: Filter by strategy name
	 * status: Filter by status (pending/running/completed/failed)
	 * limit: Maximum number of studies to return
	 *
	 * Returns:
	 * StudyListResponse with list of studies
	 */
	public static listOptimizationStudies<ThrowOnError extends boolean = false>(
		options?: Options<BacktestListOptimizationStudiesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestListOptimizationStudiesResponses,
			BacktestListOptimizationStudiesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/",
			...options,
		});
	}

	/**
	 * Create Optimization Study
	 * Create and start a new optimization study.
	 *
	 * Args:
	 * request: Optimization configuration
	 * background_tasks: FastAPI background tasks for async execution
	 *
	 * Returns:
	 * OptimizationResponse with study name and status
	 */
	public static createOptimizationStudy<ThrowOnError extends boolean = false>(
		options: Options<BacktestCreateOptimizationStudyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			BacktestCreateOptimizationStudyResponses,
			BacktestCreateOptimizationStudyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Optimization Progress
	 * Get current progress of an optimization study.
	 *
	 * Args:
	 * study_name: Study identifier
	 *
	 * Returns:
	 * OptimizationResponse with progress information
	 */
	public static getOptimizationProgress<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetOptimizationProgressData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetOptimizationProgressResponses,
			BacktestGetOptimizationProgressErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/{study_name}",
			...options,
		});
	}

	/**
	 * Get Optimization Result
	 * Get final result of a completed optimization study.
	 *
	 * Args:
	 * study_name: Study identifier
	 *
	 * Returns:
	 * OptimizationResponse with optimization result
	 */
	public static getOptimizationResult<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetOptimizationResultData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetOptimizationResultResponses,
			BacktestGetOptimizationResultErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/{study_name}/result",
			...options,
		});
	}
}

export class OptimizationService {
	/**
	 * List Optimization Studies
	 * List optimization studies with optional filters.
	 *
	 * Args:
	 * symbol: Filter by symbol
	 * strategy_name: Filter by strategy name
	 * status: Filter by status (pending/running/completed/failed)
	 * limit: Maximum number of studies to return
	 *
	 * Returns:
	 * StudyListResponse with list of studies
	 */
	public static listOptimizationStudies<ThrowOnError extends boolean = false>(
		options?: Options<BacktestListOptimizationStudiesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			BacktestListOptimizationStudiesResponses,
			BacktestListOptimizationStudiesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/",
			...options,
		});
	}

	/**
	 * Create Optimization Study
	 * Create and start a new optimization study.
	 *
	 * Args:
	 * request: Optimization configuration
	 * background_tasks: FastAPI background tasks for async execution
	 *
	 * Returns:
	 * OptimizationResponse with study name and status
	 */
	public static createOptimizationStudy<ThrowOnError extends boolean = false>(
		options: Options<BacktestCreateOptimizationStudyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			BacktestCreateOptimizationStudyResponses,
			BacktestCreateOptimizationStudyErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Optimization Progress
	 * Get current progress of an optimization study.
	 *
	 * Args:
	 * study_name: Study identifier
	 *
	 * Returns:
	 * OptimizationResponse with progress information
	 */
	public static getOptimizationProgress<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetOptimizationProgressData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetOptimizationProgressResponses,
			BacktestGetOptimizationProgressErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/{study_name}",
			...options,
		});
	}

	/**
	 * Get Optimization Result
	 * Get final result of a completed optimization study.
	 *
	 * Args:
	 * study_name: Study identifier
	 *
	 * Returns:
	 * OptimizationResponse with optimization result
	 */
	public static getOptimizationResult<ThrowOnError extends boolean = false>(
		options: Options<BacktestGetOptimizationResultData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			BacktestGetOptimizationResultResponses,
			BacktestGetOptimizationResultErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/backtests/optimize/{study_name}/result",
			...options,
		});
	}
}

export class WatchlistService {
	/**
	 * List Watchlists
	 * 사용자의 모든 워치리스트 목록 조회
	 *
	 * 사용자에게 속한 모든 워치리스트의 요약 정보를 반환합니다.
	 */
	public static listWatchlists<ThrowOnError extends boolean = false>(
		options?: Options<WatchlistListWatchlistsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			WatchlistListWatchlistsResponses,
			WatchlistListWatchlistsErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/",
			...options,
		});
	}

	/**
	 * Create Or Update Watchlist
	 * 워치리스트 생성 또는 업데이트
	 *
	 * 유연한 워치리스트 관리를 위한 엔드포인트입니다.
	 * - 이름이 없으면 'default' 워치리스트로 처리
	 * - 기존 워치리스트가 있으면 업데이트, 없으면 생성
	 * - 심볼 데이터는 백그라운드에서 자동 수집
	 */
	public static createOrUpdateWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistCreateOrUpdateWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			WatchlistCreateOrUpdateWatchlistResponses,
			WatchlistCreateOrUpdateWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Create Watchlist
	 * 새로운 명명된 워치리스트 생성
	 *
	 * 명시적인 이름을 가진 새 워치리스트를 생성합니다.
	 * 동일한 이름의 워치리스트가 이미 있으면 실패합니다.
	 */
	public static createWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistCreateWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			WatchlistCreateWatchlistResponses,
			WatchlistCreateWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/create",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Watchlist
	 * 워치리스트 삭제
	 */
	public static deleteWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistDeleteWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			WatchlistDeleteWatchlistResponses,
			WatchlistDeleteWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}",
			...options,
		});
	}

	/**
	 * Get Watchlist
	 * 특정 워치리스트의 상세 정보 조회
	 */
	public static getWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistGetWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			WatchlistGetWatchlistResponses,
			WatchlistGetWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}",
			...options,
		});
	}

	/**
	 * Update Watchlist
	 * 기존 워치리스트 업데이트
	 */
	public static updateWatchlist<ThrowOnError extends boolean = false>(
		options: Options<WatchlistUpdateWatchlistData, ThrowOnError>,
	) {
		return (options.client ?? client).put<
			WatchlistUpdateWatchlistResponses,
			WatchlistUpdateWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Watchlist Coverage
	 * 워치리스트의 데이터 커버리지 정보 조회
	 *
	 * 각 심볼별로 수집된 데이터의 상태와 품질을 확인합니다.
	 */
	public static getWatchlistCoverage<ThrowOnError extends boolean = false>(
		options: Options<WatchlistGetWatchlistCoverageData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			WatchlistGetWatchlistCoverageResponses,
			WatchlistGetWatchlistCoverageErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/{name}/coverage",
			...options,
		});
	}

	/**
	 * Setup Default Watchlist
	 * 기본 워치리스트 설정
	 *
	 * 인기 주식들로 구성된 기본 워치리스트를 생성합니다.
	 */
	public static setupDefaultWatchlist<ThrowOnError extends boolean = false>(
		options?: Options<WatchlistSetupDefaultWatchlistData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			WatchlistSetupDefaultWatchlistResponses,
			WatchlistSetupDefaultWatchlistErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/watchlists/setup-default",
			...options,
		});
	}
}

export class DashboardService {
	/**
	 * Get Dashboard Summary
	 * 대시보드 요약 데이터를 조회합니다.
	 *
	 * 사용자의 포트폴리오, 전략, 최근 활동 요약 정보를 반환합니다.
	 */
	public static getDashboardSummary<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetDashboardSummaryData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetDashboardSummaryResponses,
			DashboardGetDashboardSummaryErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/summary",
			...options,
		});
	}

	/**
	 * Get Portfolio Performance
	 * 포트폴리오 성과 차트 데이터를 조회합니다.
	 *
	 * 지정된 기간의 포트폴리오 성과 데이터와 요약 지표를 반환합니다.
	 */
	public static getPortfolioPerformance<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetPortfolioPerformanceData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetPortfolioPerformanceResponses,
			DashboardGetPortfolioPerformanceErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/portfolio/performance",
			...options,
		});
	}

	/**
	 * Get Strategy Comparison
	 * 전략 성과 비교 데이터를 조회합니다.
	 *
	 * 사용자의 전략들을 성과별로 비교한 데이터를 반환합니다.
	 */
	public static getStrategyComparison<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetStrategyComparisonData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetStrategyComparisonResponses,
			DashboardGetStrategyComparisonErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/strategies/comparison",
			...options,
		});
	}

	/**
	 * Get Recent Trades
	 * 최근 거래 내역을 조회합니다.
	 *
	 * 지정된 기간의 최근 거래 내역과 요약 정보를 반환합니다.
	 */
	public static getRecentTrades<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetRecentTradesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetRecentTradesResponses,
			DashboardGetRecentTradesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/trades/recent",
			...options,
		});
	}

	/**
	 * Get Watchlist Quotes
	 * 관심종목 현재가를 조회합니다.
	 *
	 * 사용자의 관심종목의 현재 주가 정보를 반환합니다.
	 */
	public static getWatchlistQuotes<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetWatchlistQuotesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetWatchlistQuotesResponses,
			DashboardGetWatchlistQuotesErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/watchlist/quotes",
			...options,
		});
	}

	/**
	 * Get News Feed
	 * 뉴스 피드를 조회합니다.
	 *
	 * 사용자와 관련된 뉴스 피드를 반환합니다.
	 */
	public static getNewsFeed<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetNewsFeedData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetNewsFeedResponses,
			DashboardGetNewsFeedErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/news/feed",
			...options,
		});
	}

	/**
	 * Get Economic Calendar
	 * 경제 캘린더를 조회합니다.
	 *
	 * 예정된 경제 지표 발표 일정을 반환합니다.
	 */
	public static getEconomicCalendar<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetEconomicCalendarData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetEconomicCalendarResponses,
			DashboardGetEconomicCalendarErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/economic/calendar",
			...options,
		});
	}

	/**
	 * Get Predictive Overview
	 * Predictive intelligence bundle combining signal, regime, and forecast.
	 */
	public static getPredictiveOverview<ThrowOnError extends boolean = false>(
		options: Options<DashboardGetPredictiveOverviewData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			DashboardGetPredictiveOverviewResponses,
			DashboardGetPredictiveOverviewErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/predictive/overview",
			...options,
		});
	}

	/**
	 * Get Portfolio Forecast
	 * 포트폴리오 확률적 예측을 조회합니다.
	 *
	 * 히스토리 기반 Gaussian projection으로 5/50/95 백분위 예측을 생성합니다.
	 *
	 * Args:
	 * horizon_days: 예측 기간 (일)
	 * user: 인증된 사용자
	 *
	 * Returns:
	 * 백분위 예측 분포 (5th, 50th, 95th percentiles)
	 *
	 * Raises:
	 * 400: 포트폴리오 히스토리가 없는 경우
	 * 500: 예측 생성 실패
	 */
	public static getPortfolioForecast<ThrowOnError extends boolean = false>(
		options?: Options<DashboardGetPortfolioForecastData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			DashboardGetPortfolioForecastResponses,
			DashboardGetPortfolioForecastErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/dashboard/portfolio/forecast",
			...options,
		});
	}
}

export class TasksService {
	/**
	 * Run Stock Delta Update
	 * 만료된 주식 데이터를 증분 업데이트합니다.
	 */
	public static runStockDeltaUpdate<ThrowOnError extends boolean = false>(
		options?: Options<TasksRunStockDeltaUpdateData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			TasksRunStockDeltaUpdateResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/tasks/stock-update/delta",
			...options,
		});
	}

	/**
	 * Run Stock Force Update
	 * 모든 활성 심볼의 주식 데이터를 강제 전체 업데이트합니다.
	 */
	public static runStockForceUpdate<ThrowOnError extends boolean = false>(
		options?: Options<TasksRunStockForceUpdateData, ThrowOnError>,
	) {
		return (options?.client ?? client).post<
			TasksRunStockForceUpdateResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/tasks/stock-update/force-all",
			...options,
		});
	}

	/**
	 * Get Stock Update Status
	 * 주식 데이터 업데이트 상태를 조회합니다.
	 */
	public static getStockUpdateStatus<ThrowOnError extends boolean = false>(
		options?: Options<TasksGetStockUpdateStatusData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			TasksGetStockUpdateStatusResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/tasks/stock-update/status",
			...options,
		});
	}
}

export class SignalsService {
	/**
	 * Get Ml Signal
	 * Return ML signal inference for the requested symbol.
	 */
	public static getMlSignal<ThrowOnError extends boolean = false>(
		options: Options<SignalsGetMlSignalData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			SignalsGetMlSignalResponses,
			SignalsGetMlSignalErrors,
			ThrowOnError
		>({
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/v1/signals/{symbol}",
			...options,
		});
	}
}

export class MlService {
	/**
	 * Train Model
	 * Train a new ML model for signal prediction.
	 *
	 * This endpoint trains a LightGBM model on historical price data
	 * and saves it to the model registry. Training runs in the background.
	 *
	 * **Training Process:**
	 * 1. Load historical data for specified symbols
	 * 2. Calculate technical indicators (RSI, MACD, etc.)
	 * 3. Generate buy/hold labels based on future returns
	 * 4. Train LightGBM classifier
	 * 5. Evaluate on test set
	 * 6. Save to model registry with versioning
	 *
	 * **Example:**
	 * ```json
	 * {
	 * "symbols": ["AAPL", "MSFT", "GOOGL"],
	 * "lookback_days": 500,
	 * "test_size": 0.2,
	 * "num_boost_round": 100,
	 * "threshold": 0.02
	 * }
	 * ```
	 */
	public static trainModel<ThrowOnError extends boolean = false>(
		options: Options<MlTrainModelData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlTrainModelResponses,
			MlTrainModelErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/train",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Models
	 * List all trained models.
	 *
	 * Returns a list of all models with their metadata including
	 * version, accuracy, creation date, and feature information.
	 */
	public static listModels<ThrowOnError extends boolean = false>(
		options?: Options<MlListModelsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListModelsResponses,
			MlListModelsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/models",
			...options,
		});
	}

	/**
	 * Delete Model
	 * Delete a specific model version.
	 *
	 * **Warning:** This action cannot be undone.
	 */
	public static deleteModel<ThrowOnError extends boolean = false>(
		options: Options<MlDeleteModelData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			MlDeleteModelResponses,
			MlDeleteModelErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/models/{version}",
			...options,
		});
	}

	/**
	 * Get Model Info
	 * Get detailed information about a specific model version.
	 *
	 * Returns metadata including accuracy, training parameters,
	 * feature names, and creation date.
	 */
	public static getModelInfo<ThrowOnError extends boolean = false>(
		options: Options<MlGetModelInfoData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetModelInfoResponses,
			MlGetModelInfoErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/models/{version}",
			...options,
		});
	}

	/**
	 * Compare Models
	 * Compare multiple model versions by a specific metric.
	 *
	 * **Supported metrics:**
	 * - accuracy
	 * - precision
	 * - recall
	 * - f1_score
	 *
	 * **Example:**
	 * ```
	 * GET /api/v1/ml/models/compare/accuracy?versions=v1,v2,v3
	 * ```
	 */
	public static compareModels<ThrowOnError extends boolean = false>(
		options: Options<MlCompareModelsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlCompareModelsResponses,
			MlCompareModelsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/models/compare/{metric}",
			...options,
		});
	}

	/**
	 * List Experiments
	 */
	public static listExperiments<ThrowOnError extends boolean = false>(
		options?: Options<MlListExperimentsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListExperimentsResponses,
			MlListExperimentsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments",
			...options,
		});
	}

	/**
	 * Create Experiment
	 */
	public static createExperiment<ThrowOnError extends boolean = false>(
		options: Options<MlCreateExperimentData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateExperimentResponses,
			MlCreateExperimentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Experiment
	 * Get experiment by name.
	 */
	public static getExperiment<ThrowOnError extends boolean = false>(
		options: Options<MlGetExperimentData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetExperimentResponses,
			MlGetExperimentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments/{name}",
			...options,
		});
	}

	/**
	 * Update Experiment
	 */
	public static updateExperiment<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateExperimentData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateExperimentResponses,
			MlUpdateExperimentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments/{name}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Runs
	 */
	public static listRuns<ThrowOnError extends boolean = false>(
		options?: Options<MlListRunsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListRunsResponses,
			MlListRunsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs",
			...options,
		});
	}

	/**
	 * Log Run
	 */
	public static logRun<ThrowOnError extends boolean = false>(
		options: Options<MlLogRunData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlLogRunResponses,
			MlLogRunErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Run
	 */
	public static getRun<ThrowOnError extends boolean = false>(
		options: Options<MlGetRunData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetRunResponses,
			MlGetRunErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs/{run_id}",
			...options,
		});
	}

	/**
	 * Update Run
	 */
	public static updateRun<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateRunData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateRunResponses,
			MlUpdateRunErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs/{run_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Model Versions
	 */
	public static listModelVersions<ThrowOnError extends boolean = false>(
		options?: Options<MlListModelVersionsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListModelVersionsResponses,
			MlListModelVersionsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models",
			...options,
		});
	}

	/**
	 * Register Model Version
	 */
	public static registerModelVersion<ThrowOnError extends boolean = false>(
		options: Options<MlRegisterModelVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRegisterModelVersionResponses,
			MlRegisterModelVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Model Version
	 * Get model version by name and version.
	 */
	public static getModelVersion<ThrowOnError extends boolean = false>(
		options: Options<MlGetModelVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetModelVersionResponses,
			MlGetModelVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models/{model_name}/{version}",
			...options,
		});
	}

	/**
	 * Update Model Version
	 */
	public static updateModelVersion<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateModelVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateModelVersionResponses,
			MlUpdateModelVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models/{model_name}/{version}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Compare Model Versions
	 */
	public static compareModelVersions<ThrowOnError extends boolean = false>(
		options: Options<MlCompareModelVersionsData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCompareModelVersionsResponses,
			MlCompareModelVersionsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models/{model_name}/compare",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Drift Events
	 */
	public static listDriftEvents<ThrowOnError extends boolean = false>(
		options?: Options<MlListDriftEventsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListDriftEventsResponses,
			MlListDriftEventsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/drift-events",
			...options,
		});
	}

	/**
	 * Record Drift Event
	 */
	public static recordDriftEvent<ThrowOnError extends boolean = false>(
		options: Options<MlRecordDriftEventData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRecordDriftEventResponses,
			MlRecordDriftEventErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/drift-events",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Deployments
	 * List deployments with optional filters.
	 */
	public static listDeployments<ThrowOnError extends boolean = false>(
		options?: Options<MlListDeploymentsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListDeploymentsResponses,
			MlListDeploymentsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments",
			...options,
		});
	}

	/**
	 * Create Deployment
	 * Create a new deployment.
	 */
	public static createDeployment<ThrowOnError extends boolean = false>(
		options: Options<MlCreateDeploymentData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateDeploymentResponses,
			MlCreateDeploymentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Deployment
	 * Get deployment details.
	 */
	public static getDeployment<ThrowOnError extends boolean = false>(
		options: Options<MlGetDeploymentData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetDeploymentResponses,
			MlGetDeploymentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments/{deployment_id}",
			...options,
		});
	}

	/**
	 * Update Deployment
	 * Update deployment status and metrics.
	 */
	public static updateDeployment<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateDeploymentData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateDeploymentResponses,
			MlUpdateDeploymentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments/{deployment_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Scenarios
	 */
	public static listScenarios<ThrowOnError extends boolean = false>(
		options?: Options<MlListScenariosData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListScenariosResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/scenarios",
			...options,
		});
	}

	/**
	 * Register Scenario
	 */
	public static registerScenario<ThrowOnError extends boolean = false>(
		options: Options<MlRegisterScenarioData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRegisterScenarioResponses,
			MlRegisterScenarioErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/scenarios",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Update Scenario
	 */
	public static updateScenario<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateScenarioData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateScenarioResponses,
			MlUpdateScenarioErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/scenarios/{name}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Evaluation Runs
	 */
	public static listEvaluationRuns<ThrowOnError extends boolean = false>(
		options?: Options<MlListEvaluationRunsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListEvaluationRunsResponses,
			MlListEvaluationRunsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs",
			...options,
		});
	}

	/**
	 * Run Evaluation
	 */
	public static runEvaluation<ThrowOnError extends boolean = false>(
		options: Options<MlRunEvaluationData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRunEvaluationResponses,
			MlRunEvaluationErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Evaluation Report
	 */
	public static getEvaluationReport<ThrowOnError extends boolean = false>(
		options: Options<MlGetEvaluationReportData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetEvaluationReportResponses,
			MlGetEvaluationReportErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs/{run_id}/report",
			...options,
		});
	}

	/**
	 * Get Detailed Metrics
	 * 상세 평가 메트릭 조회 (confusion matrix, ROC curve 등)
	 */
	public static getDetailedMetrics<ThrowOnError extends boolean = false>(
		options: Options<MlGetDetailedMetricsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetDetailedMetricsResponses,
			MlGetDetailedMetricsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs/{run_id}/metrics",
			...options,
		});
	}

	/**
	 * List Benchmarks
	 * 벤치마크 스위트 목록 조회
	 */
	public static listBenchmarks<ThrowOnError extends boolean = false>(
		options?: Options<MlListBenchmarksData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListBenchmarksResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/benchmarks",
			...options,
		});
	}

	/**
	 * Create Benchmark
	 * 벤치마크 스위트 생성
	 */
	public static createBenchmark<ThrowOnError extends boolean = false>(
		options: Options<MlCreateBenchmarkData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateBenchmarkResponses,
			MlCreateBenchmarkErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/benchmarks",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Run Benchmark
	 * 벤치마크 실행
	 */
	public static runBenchmark<ThrowOnError extends boolean = false>(
		options: Options<MlRunBenchmarkData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRunBenchmarkResponses,
			MlRunBenchmarkErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/benchmarks/run",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Ab Tests
	 * A/B 테스트 목록 조회
	 */
	public static listAbTests<ThrowOnError extends boolean = false>(
		options?: Options<MlListAbTestsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListAbTestsResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/ab-tests",
			...options,
		});
	}

	/**
	 * Create Ab Test
	 * A/B 테스트 생성
	 */
	public static createAbTest<ThrowOnError extends boolean = false>(
		options: Options<MlCreateAbTestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateAbTestResponses,
			MlCreateAbTestErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/ab-tests",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Ab Test
	 * A/B 테스트 상세 조회
	 */
	public static getAbTest<ThrowOnError extends boolean = false>(
		options: Options<MlGetAbTestData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetAbTestResponses,
			MlGetAbTestErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/ab-tests/{test_id}",
			...options,
		});
	}

	/**
	 * Request Fairness Audit
	 * 공정성 감사 요청
	 */
	public static requestFairnessAudit<ThrowOnError extends boolean = false>(
		options: Options<MlRequestFairnessAuditData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRequestFairnessAuditResponses,
			MlRequestFairnessAuditErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/fairness/audit",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Fairness Reports
	 * 공정성 감사 보고서 목록 조회
	 */
	public static listFairnessReports<ThrowOnError extends boolean = false>(
		options?: Options<MlListFairnessReportsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListFairnessReportsResponses,
			MlListFairnessReportsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/fairness/reports",
			...options,
		});
	}

	/**
	 * Get Fairness Report
	 * 공정성 감사 보고서 상세 조회
	 */
	public static getFairnessReport<ThrowOnError extends boolean = false>(
		options: Options<MlGetFairnessReportData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetFairnessReportResponses,
			MlGetFairnessReportErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/fairness/reports/{report_id}",
			...options,
		});
	}
}

export class ModelLifecycleService {
	/**
	 * List Experiments
	 */
	public static listExperiments<ThrowOnError extends boolean = false>(
		options?: Options<MlListExperimentsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListExperimentsResponses,
			MlListExperimentsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments",
			...options,
		});
	}

	/**
	 * Create Experiment
	 */
	public static createExperiment<ThrowOnError extends boolean = false>(
		options: Options<MlCreateExperimentData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateExperimentResponses,
			MlCreateExperimentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Experiment
	 * Get experiment by name.
	 */
	public static getExperiment<ThrowOnError extends boolean = false>(
		options: Options<MlGetExperimentData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetExperimentResponses,
			MlGetExperimentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments/{name}",
			...options,
		});
	}

	/**
	 * Update Experiment
	 */
	public static updateExperiment<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateExperimentData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateExperimentResponses,
			MlUpdateExperimentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/experiments/{name}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Runs
	 */
	public static listRuns<ThrowOnError extends boolean = false>(
		options?: Options<MlListRunsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListRunsResponses,
			MlListRunsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs",
			...options,
		});
	}

	/**
	 * Log Run
	 */
	public static logRun<ThrowOnError extends boolean = false>(
		options: Options<MlLogRunData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlLogRunResponses,
			MlLogRunErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Run
	 */
	public static getRun<ThrowOnError extends boolean = false>(
		options: Options<MlGetRunData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetRunResponses,
			MlGetRunErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs/{run_id}",
			...options,
		});
	}

	/**
	 * Update Run
	 */
	public static updateRun<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateRunData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateRunResponses,
			MlUpdateRunErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/runs/{run_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Model Versions
	 */
	public static listModelVersions<ThrowOnError extends boolean = false>(
		options?: Options<MlListModelVersionsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListModelVersionsResponses,
			MlListModelVersionsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models",
			...options,
		});
	}

	/**
	 * Register Model Version
	 */
	public static registerModelVersion<ThrowOnError extends boolean = false>(
		options: Options<MlRegisterModelVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRegisterModelVersionResponses,
			MlRegisterModelVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Model Version
	 * Get model version by name and version.
	 */
	public static getModelVersion<ThrowOnError extends boolean = false>(
		options: Options<MlGetModelVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetModelVersionResponses,
			MlGetModelVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models/{model_name}/{version}",
			...options,
		});
	}

	/**
	 * Update Model Version
	 */
	public static updateModelVersion<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateModelVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateModelVersionResponses,
			MlUpdateModelVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models/{model_name}/{version}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Compare Model Versions
	 */
	public static compareModelVersions<ThrowOnError extends boolean = false>(
		options: Options<MlCompareModelVersionsData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCompareModelVersionsResponses,
			MlCompareModelVersionsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/models/{model_name}/compare",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Drift Events
	 */
	public static listDriftEvents<ThrowOnError extends boolean = false>(
		options?: Options<MlListDriftEventsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListDriftEventsResponses,
			MlListDriftEventsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/drift-events",
			...options,
		});
	}

	/**
	 * Record Drift Event
	 */
	public static recordDriftEvent<ThrowOnError extends boolean = false>(
		options: Options<MlRecordDriftEventData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRecordDriftEventResponses,
			MlRecordDriftEventErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/drift-events",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Deployments
	 * List deployments with optional filters.
	 */
	public static listDeployments<ThrowOnError extends boolean = false>(
		options?: Options<MlListDeploymentsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListDeploymentsResponses,
			MlListDeploymentsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments",
			...options,
		});
	}

	/**
	 * Create Deployment
	 * Create a new deployment.
	 */
	public static createDeployment<ThrowOnError extends boolean = false>(
		options: Options<MlCreateDeploymentData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateDeploymentResponses,
			MlCreateDeploymentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Deployment
	 * Get deployment details.
	 */
	public static getDeployment<ThrowOnError extends boolean = false>(
		options: Options<MlGetDeploymentData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetDeploymentResponses,
			MlGetDeploymentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments/{deployment_id}",
			...options,
		});
	}

	/**
	 * Update Deployment
	 * Update deployment status and metrics.
	 */
	public static updateDeployment<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateDeploymentData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateDeploymentResponses,
			MlUpdateDeploymentErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/lifecycle/deployments/{deployment_id}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}
}

export class EvaluationHarnessService {
	/**
	 * List Scenarios
	 */
	public static listScenarios<ThrowOnError extends boolean = false>(
		options?: Options<MlListScenariosData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListScenariosResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/scenarios",
			...options,
		});
	}

	/**
	 * Register Scenario
	 */
	public static registerScenario<ThrowOnError extends boolean = false>(
		options: Options<MlRegisterScenarioData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRegisterScenarioResponses,
			MlRegisterScenarioErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/scenarios",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Update Scenario
	 */
	public static updateScenario<ThrowOnError extends boolean = false>(
		options: Options<MlUpdateScenarioData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			MlUpdateScenarioResponses,
			MlUpdateScenarioErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/scenarios/{name}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Evaluation Runs
	 */
	public static listEvaluationRuns<ThrowOnError extends boolean = false>(
		options?: Options<MlListEvaluationRunsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListEvaluationRunsResponses,
			MlListEvaluationRunsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs",
			...options,
		});
	}

	/**
	 * Run Evaluation
	 */
	public static runEvaluation<ThrowOnError extends boolean = false>(
		options: Options<MlRunEvaluationData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRunEvaluationResponses,
			MlRunEvaluationErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Evaluation Report
	 */
	public static getEvaluationReport<ThrowOnError extends boolean = false>(
		options: Options<MlGetEvaluationReportData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetEvaluationReportResponses,
			MlGetEvaluationReportErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs/{run_id}/report",
			...options,
		});
	}

	/**
	 * Get Detailed Metrics
	 * 상세 평가 메트릭 조회 (confusion matrix, ROC curve 등)
	 */
	public static getDetailedMetrics<ThrowOnError extends boolean = false>(
		options: Options<MlGetDetailedMetricsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetDetailedMetricsResponses,
			MlGetDetailedMetricsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/runs/{run_id}/metrics",
			...options,
		});
	}

	/**
	 * List Benchmarks
	 * 벤치마크 스위트 목록 조회
	 */
	public static listBenchmarks<ThrowOnError extends boolean = false>(
		options?: Options<MlListBenchmarksData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListBenchmarksResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/benchmarks",
			...options,
		});
	}

	/**
	 * Create Benchmark
	 * 벤치마크 스위트 생성
	 */
	public static createBenchmark<ThrowOnError extends boolean = false>(
		options: Options<MlCreateBenchmarkData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateBenchmarkResponses,
			MlCreateBenchmarkErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/benchmarks",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Run Benchmark
	 * 벤치마크 실행
	 */
	public static runBenchmark<ThrowOnError extends boolean = false>(
		options: Options<MlRunBenchmarkData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRunBenchmarkResponses,
			MlRunBenchmarkErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/benchmarks/run",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Ab Tests
	 * A/B 테스트 목록 조회
	 */
	public static listAbTests<ThrowOnError extends boolean = false>(
		options?: Options<MlListAbTestsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListAbTestsResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/ab-tests",
			...options,
		});
	}

	/**
	 * Create Ab Test
	 * A/B 테스트 생성
	 */
	public static createAbTest<ThrowOnError extends boolean = false>(
		options: Options<MlCreateAbTestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlCreateAbTestResponses,
			MlCreateAbTestErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/ab-tests",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Ab Test
	 * A/B 테스트 상세 조회
	 */
	public static getAbTest<ThrowOnError extends boolean = false>(
		options: Options<MlGetAbTestData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetAbTestResponses,
			MlGetAbTestErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/ab-tests/{test_id}",
			...options,
		});
	}

	/**
	 * Request Fairness Audit
	 * 공정성 감사 요청
	 */
	public static requestFairnessAudit<ThrowOnError extends boolean = false>(
		options: Options<MlRequestFairnessAuditData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			MlRequestFairnessAuditResponses,
			MlRequestFairnessAuditErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/fairness/audit",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Fairness Reports
	 * 공정성 감사 보고서 목록 조회
	 */
	public static listFairnessReports<ThrowOnError extends boolean = false>(
		options?: Options<MlListFairnessReportsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			MlListFairnessReportsResponses,
			MlListFairnessReportsErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/fairness/reports",
			...options,
		});
	}

	/**
	 * Get Fairness Report
	 * 공정성 감사 보고서 상세 조회
	 */
	public static getFairnessReport<ThrowOnError extends boolean = false>(
		options: Options<MlGetFairnessReportData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			MlGetFairnessReportResponses,
			MlGetFairnessReportErrors,
			ThrowOnError
		>({
			url: "/api/v1/ml/evaluation/fairness/reports/{report_id}",
			...options,
		});
	}
}

export class ChatOpsService {
	/**
	 * Execute Chatops
	 * Execute the ChatOps agent with the provided request payload.
	 */
	public static executeChatops<ThrowOnError extends boolean = false>(
		options: Options<ChatOpsExecuteChatopsData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			ChatOpsExecuteChatopsResponses,
			ChatOpsExecuteChatopsErrors,
			ThrowOnError
		>({
			url: "/api/v1/chatops/",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}
}

export class NarrativeService {
	/**
	 * Generate Narrative Report
	 * 백테스트 결과에 대한 LLM 기반 내러티브 리포트 생성
	 */
	public static generateNarrativeReport<ThrowOnError extends boolean = false>(
		options: Options<NarrativeGenerateNarrativeReportData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			NarrativeGenerateNarrativeReportResponses,
			NarrativeGenerateNarrativeReportErrors,
			ThrowOnError
		>({
			url: "/api/v1/narrative/backtests/{backtest_id}/report",
			...options,
		});
	}
}

export class StrategyBuilderService {
	/**
	 * Generate Strategy
	 * 자연어 입력으로 트레이딩 전략 생성
	 *
	 * **워크플로우:**
	 * 1. 자연어 쿼리 → LLM 의도 파싱 (IntentType 분류)
	 * 2. 엔티티 추출 (지표, 파라미터, 심볼 등)
	 * 3. 지표 추천 (임베딩 기반 유사도 매칭)
	 * 4. 파라미터 검증 (범위, 타입 체크)
	 * 5. 전략 설정 생성 (GeneratedStrategyConfig)
	 * 6. 휴먼 승인 필요성 평가
	 *
	 * **예시 요청:**
	 * - "RSI가 30 이하일 때 매수하고, 70 이상일 때 매도하는 전략을 만들어줘"
	 * - "MACD와 Bollinger Bands를 사용한 추세 추종 전략 추천해줘"
	 * - "단기 매매에 적합한 EMA 크로스오버 전략을 테스트하고 싶어"
	 *
	 * **응답:**
	 * - `status`: "success" | "warning" | "error"
	 * - `parsed_intent`: LLM이 파싱한 사용자 의도 (IntentType, 신뢰도, 추출된 엔티티)
	 * - `generated_strategy`: 생성된 전략 설정 (지표, 파라미터, 진입/청산 조건)
	 * - `human_approval`: 승인 필요 여부 + 이유 + 수정 제안
	 * - `overall_confidence`: 전체 신뢰도 (0.0-1.0)
	 *
	 * **주의사항:**
	 * - OpenAI API 키 필요 (`OPENAI_API_KEY` 환경변수)
	 * - 자연어 쿼리는 10-1000자 제한
	 * - 생성된 전략은 기본적으로 승인 필요 (`require_human_approval=True`)
	 * - 낮은 신뢰도 (<0.5) 시 대안 제안 제공
	 */
	public static generateStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyBuilderGenerateStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			StrategyBuilderGenerateStrategyResponses,
			StrategyBuilderGenerateStrategyErrors,
			ThrowOnError
		>({
			url: "/api/v1/strategy-builder",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Approve Strategy
	 * 생성된 전략 승인 처리 (Human-in-the-Loop)
	 *
	 * **워크플로우:**
	 * 1. 생성된 전략 ID 조회 (`strategy_builder_response_id`)
	 * 2. 승인 여부 확인 (`approved`: true/false)
	 * 3. 수정 사항 적용 (`modifications`: Dict)
	 * 4. 실제 전략 생성 (StrategyService)
	 * 5. 승인 로그 기록 (audit trail)
	 *
	 * **승인 시나리오:**
	 * - **승인 (approved=true)**: 수정 없이 전략 생성
	 * - **수정 후 승인 (approved=true + modifications)**: 파라미터 수정 후 생성
	 * - **거부 (approved=false)**: 전략 생성 취소, 사유 기록
	 *
	 * **응답:**
	 * - `status`: "approved" | "modified" | "rejected"
	 * - `message`: 승인 결과 메시지
	 * - `strategy_id`: 생성된 전략 ID (승인 시)
	 * - `approved_at`: 승인 시각 (ISO 8601)
	 *
	 * **예시:**
	 * ```json
	 * {
	 * "strategy_builder_response_id": "abc123",
	 * "approved": true,
	 * "modifications": {
	 * "rsi_period": 21,
	 * "rsi_oversold": 25
	 * },
	 * "approval_notes": "RSI 기간을 21로 조정하여 시장 변동성 반영"
	 * }
	 * ```
	 */
	public static approveStrategy<ThrowOnError extends boolean = false>(
		options: Options<StrategyBuilderApproveStrategyData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			StrategyBuilderApproveStrategyResponses,
			StrategyBuilderApproveStrategyErrors,
			ThrowOnError
		>({
			url: "/api/v1/strategy-builder/approve",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Search Indicators
	 * 임베딩 기반 지표 검색
	 *
	 * **기능:**
	 * - 자연어 쿼리 → 임베딩 변환
	 * - 지표 지식 베이스와 코사인 유사도 계산
	 * - 상위 K개 지표 추천 (기본 5개)
	 *
	 * **사용 사례:**
	 * - "변동성을 측정하는 지표를 찾아줘" → Bollinger Bands, ATR
	 * - "추세 전환을 포착하는 지표" → MACD, EMA Crossover
	 * - "모멘텀 지표" → RSI, Stochastic, CCI
	 *
	 * **응답:**
	 * - `status`: "success" | "error"
	 * - `indicators`: 추천 지표 목록 (유사도 순)
	 * - `total`: 반환된 지표 수
	 * - `query_embedding`: (디버깅용) 쿼리 임베딩 벡터
	 *
	 * **예시:**
	 * ```json
	 * {
	 * "query": "변동성 측정 지표",
	 * "top_k": 3,
	 * "filters": {"type": "volatility"}
	 * }
	 * ```
	 */
	public static searchIndicators<ThrowOnError extends boolean = false>(
		options: Options<StrategyBuilderSearchIndicatorsData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			StrategyBuilderSearchIndicatorsResponses,
			StrategyBuilderSearchIndicatorsErrors,
			ThrowOnError
		>({
			url: "/api/v1/strategy-builder/search-indicators",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}
}

export class ChatOpsAdvancedService {
	/**
	 * Create Chat Session
	 * 새 채팅 세션 생성 (멀티턴 대화용, MongoDB 저장)
	 *
	 * **Phase 3 D3**
	 *
	 * Args:
	 * user_id: 사용자 ID
	 *
	 * Returns:
	 * session_id: 생성된 세션 ID
	 */
	public static createChatSession<ThrowOnError extends boolean = false>(
		options: Options<ChatOpsAdvancedCreateChatSessionData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			ChatOpsAdvancedCreateChatSessionResponses,
			ChatOpsAdvancedCreateChatSessionErrors,
			ThrowOnError
		>({
			url: "/api/v1/chatops-advanced/session/create",
			...options,
		});
	}

	/**
	 * Chat With Session
	 * 멀티턴 대화 (세션 기반)
	 *
	 * **Phase 3 D3**
	 *
	 * Args:
	 * session_id: 세션 ID
	 * request: ChatOps 요청
	 *
	 * Returns:
	 * 응답 메시지 및 메타데이터
	 */
	public static chatWithSession<ThrowOnError extends boolean = false>(
		options: Options<ChatOpsAdvancedChatWithSessionData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			ChatOpsAdvancedChatWithSessionResponses,
			ChatOpsAdvancedChatWithSessionErrors,
			ThrowOnError
		>({
			url: "/api/v1/chatops-advanced/session/{session_id}/chat",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Compare Strategies
	 * 전략 비교 및 LLM 요약
	 *
	 * **Phase 3 D3**
	 *
	 * 자연어 질의를 기반으로 여러 전략을 비교하고 추천을 제공합니다.
	 *
	 * Example:
	 * ```
	 * POST /api/v1/chatops-advanced/strategies/compare
	 * {
	 * "strategy_ids": ["strategy_1", "strategy_2", "strategy_3"],
	 * "metrics": ["total_return", "sharpe_ratio", "max_drawdown"],
	 * "natural_language_query": "가장 안정적인 전략은?"
	 * }
	 * ```
	 *
	 * Args:
	 * request: 전략 비교 요청
	 *
	 * Returns:
	 * StrategyComparisonResult: 비교 결과, 순위, 추천
	 */
	public static compareStrategies<ThrowOnError extends boolean = false>(
		options: Options<ChatOpsAdvancedCompareStrategiesData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			ChatOpsAdvancedCompareStrategiesResponses,
			ChatOpsAdvancedCompareStrategiesErrors,
			ThrowOnError
		>({
			url: "/api/v1/chatops-advanced/strategies/compare",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Debug Compare Strategies
	 * 전략 비교 디버그 (LLM 없이 데이터만 조회)
	 *
	 * **Phase 3 D3 Debug**
	 *
	 * MongoDB에서 실제 데이터를 조회하는 로직을 테스트합니다.
	 * LLM 호출 없이 전략 데이터만 반환합니다.
	 *
	 * Args:
	 * request: 전략 비교 요청
	 *
	 * Returns:
	 * 조회된 전략 데이터 목록
	 */
	public static debugCompareStrategies<ThrowOnError extends boolean = false>(
		options: Options<ChatOpsAdvancedDebugCompareStrategiesData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			ChatOpsAdvancedDebugCompareStrategiesResponses,
			ChatOpsAdvancedDebugCompareStrategiesErrors,
			ThrowOnError
		>({
			url: "/api/v1/chatops-advanced/strategies/compare/debug",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Trigger Auto Backtest
	 * 자동 백테스트 트리거 (백그라운드 실행)
	 *
	 * **Phase 3 D3**
	 *
	 * 전략 빌더 또는 최적화 결과를 기반으로 백테스트를 자동 생성하고 백그라운드에서 실행합니다.
	 *
	 * Example:
	 * ```
	 * POST /api/v1/chatops-advanced/backtest/trigger?user_id=user_123
	 * {
	 * "strategy_config": {
	 * "name": "RSI Strategy",
	 * "symbols": ["AAPL", "MSFT"],
	 * "initial_cash": 100000.0
	 * },
	 * "trigger_reason": "strategy_builder",
	 * "generate_report": true,
	 * "notify_on_completion": true
	 * }
	 * ```
	 *
	 * Args:
	 * request: 자동 백테스트 요청
	 * background_tasks: FastAPI 백그라운드 태스크
	 * user_id: 사용자 ID (기본: system)
	 *
	 * Returns:
	 * AutoBacktestResponse: 백테스트 ID, 상태, 예상 소요 시간
	 */
	public static triggerAutoBacktest<ThrowOnError extends boolean = false>(
		options: Options<ChatOpsAdvancedTriggerAutoBacktestData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			ChatOpsAdvancedTriggerAutoBacktestResponses,
			ChatOpsAdvancedTriggerAutoBacktestErrors,
			ThrowOnError
		>({
			url: "/api/v1/chatops-advanced/backtest/trigger",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}
}

export class FeatureStoreService {
	/**
	 * List Features
	 * 피처 목록 조회 (필터링/페이지네이션)
	 *
	 * - **owner**: 소유자 필터
	 * - **feature_type**: 피처 타입 필터 (RAW, DERIVED, AGGREGATED)
	 * - **status**: 상태 필터 (DRAFT, ACTIVE, DEPRECATED)
	 * - **tags**: 태그 필터 (comma-separated: "financial,risk")
	 * - **skip/limit**: 페이지네이션
	 */
	public static listFeatures<ThrowOnError extends boolean = false>(
		options?: Options<FeatureStoreListFeaturesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			FeatureStoreListFeaturesResponses,
			FeatureStoreListFeaturesErrors,
			ThrowOnError
		>({
			url: "/api/v1/features",
			...options,
		});
	}

	/**
	 * Create Feature
	 * 새 피처 생성
	 *
	 * - **feature_name**: 피처 고유 식별자 (중복 불가)
	 * - **feature_type**: RAW, DERIVED, AGGREGATED
	 * - **data_type**: numeric, categorical, text, datetime, boolean
	 * - **transformation**: 변환 로직 (SQL, Python 등)
	 * - **validation_rules**: 검증 규칙 (타입, 범위, 제약조건)
	 * - **upstream_features**: 의존하는 상위 피처 목록
	 */
	public static createFeature<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreCreateFeatureData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			FeatureStoreCreateFeatureResponses,
			FeatureStoreCreateFeatureErrors,
			ThrowOnError
		>({
			url: "/api/v1/features",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Delete Feature
	 * 피처 삭제 (소프트 삭제)
	 *
	 * - 실제 데이터는 유지되며 상태만 DEPRECATED로 변경
	 * - 하위 피처(downstream_features)가 있으면 삭제 불가
	 */
	public static deleteFeature<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreDeleteFeatureData, ThrowOnError>,
	) {
		return (options.client ?? client).delete<
			FeatureStoreDeleteFeatureResponses,
			FeatureStoreDeleteFeatureErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}",
			...options,
		});
	}

	/**
	 * Get Feature
	 * 피처 상세 조회
	 */
	public static getFeature<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreGetFeatureData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FeatureStoreGetFeatureResponses,
			FeatureStoreGetFeatureErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}",
			...options,
		});
	}

	/**
	 * Update Feature
	 * 피처 업데이트
	 *
	 * - 변환 로직이나 검증 규칙 변경 시 새 버전 생성 권장
	 * - 메타데이터(description, tags)만 업데이트 시 버전 증가 없음
	 */
	public static updateFeature<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreUpdateFeatureData, ThrowOnError>,
	) {
		return (options.client ?? client).put<
			FeatureStoreUpdateFeatureResponses,
			FeatureStoreUpdateFeatureErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Activate Feature
	 * 피처 활성화 (DRAFT → ACTIVE)
	 *
	 * - 검증 규칙을 통과해야 활성화 가능
	 * - 활성화 후 프로덕션 환경에서 사용 가능
	 */
	public static activateFeature<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreActivateFeatureData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			FeatureStoreActivateFeatureResponses,
			FeatureStoreActivateFeatureErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}/activate",
			...options,
		});
	}

	/**
	 * Deprecate Feature
	 * 피처 폐기 (ACTIVE → DEPRECATED)
	 *
	 * - 더 이상 사용하지 않는 피처 표시
	 * - 하위 피처(downstream_features)가 있으면 폐기 불가
	 * - 기존 사용처는 계속 작동하지만 신규 사용 불가
	 */
	public static deprecateFeature<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreDeprecateFeatureData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			FeatureStoreDeprecateFeatureResponses,
			FeatureStoreDeprecateFeatureErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}/deprecate",
			...options,
		});
	}

	/**
	 * Get Feature Versions
	 * 피처의 모든 버전 조회 (최신순)
	 */
	public static getFeatureVersions<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreGetFeatureVersionsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FeatureStoreGetFeatureVersionsResponses,
			FeatureStoreGetFeatureVersionsErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}/versions",
			...options,
		});
	}

	/**
	 * Create Version
	 * 새 버전 생성
	 *
	 * - 변환 로직이나 검증 규칙 변경 시 필수
	 * - Semantic Versioning 권장 (1.0.0 → 1.1.0 → 2.0.0)
	 * - breaking_changes=True면 Major 버전 증가 (1.x.x → 2.0.0)
	 */
	public static createVersion<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreCreateVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			FeatureStoreCreateVersionResponses,
			FeatureStoreCreateVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}/versions",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Rollback Version
	 * 버전 롤백
	 *
	 * - 이전 버전으로 복원 (변환 로직, 검증 규칙 스냅샷 복원)
	 * - 현재 버전에 `is_rolled_back=True` 표시
	 * - 새 버전이 생성되며 current_version 업데이트
	 */
	public static rollbackVersion<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreRollbackVersionData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			FeatureStoreRollbackVersionResponses,
			FeatureStoreRollbackVersionErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}/rollback",
			...options,
		});
	}

	/**
	 * Get Feature Lineage
	 * 피처 계보 추적
	 *
	 * - upstream_features: 이 피처가 의존하는 상위 피처들
	 * - downstream_features: 이 피처를 사용하는 하위 피처들
	 * - recursive=True: 재귀적으로 전체 의존성 트리 추적
	 */
	public static getFeatureLineage<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreGetFeatureLineageData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FeatureStoreGetFeatureLineageResponses,
			FeatureStoreGetFeatureLineageErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}/lineage",
			...options,
		});
	}

	/**
	 * Record Feature Usage
	 * 피처 사용 기록
	 *
	 * - 모델이 피처를 사용할 때마다 호출
	 * - feature_importance: 모델에서의 중요도 (0.0 ~ 1.0)
	 * - correlation_with_target: 타겟과의 상관관계 (-1.0 ~ 1.0)
	 */
	public static recordFeatureUsage<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreRecordFeatureUsageData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			FeatureStoreRecordFeatureUsageResponses,
			FeatureStoreRecordFeatureUsageErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/usage",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Get Feature Statistics
	 * 피처 사용 통계 조회
	 *
	 * - total_usage: 총 사용 횟수
	 * - unique_models: 사용한 고유 모델 수
	 * - environments: 사용 환경 분포 (dev, staging, production)
	 * - avg_importance: 평균 feature importance
	 * - avg_correlation: 평균 상관관계
	 * - last_used_at: 마지막 사용 시각
	 */
	public static getFeatureStatistics<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreGetFeatureStatisticsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FeatureStoreGetFeatureStatisticsResponses,
			FeatureStoreGetFeatureStatisticsErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/{feature_name}/statistics",
			...options,
		});
	}

	/**
	 * List Datasets
	 * 데이터셋 목록 조회
	 *
	 * MongoDB에 저장된 데이터셋 메타데이터 목록 반환
	 */
	public static listDatasets<ThrowOnError extends boolean = false>(
		options?: Options<FeatureStoreListDatasetsData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			FeatureStoreListDatasetsResponses,
			unknown,
			ThrowOnError
		>({
			url: "/api/v1/features/datasets",
			...options,
		});
	}

	/**
	 * Get Dataset
	 * 데이터셋 상세 조회
	 *
	 * Args:
	 * dataset_id: Dataset ID (MongoDB ObjectId)
	 *
	 * Returns:
	 * Dataset 상세 정보 (마지막 접근 시간 자동 업데이트)
	 */
	public static getDataset<ThrowOnError extends boolean = false>(
		options: Options<FeatureStoreGetDatasetData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			FeatureStoreGetDatasetResponses,
			FeatureStoreGetDatasetErrors,
			ThrowOnError
		>({
			url: "/api/v1/features/datasets/{dataset_id}",
			...options,
		});
	}
}

export class PromptGovernanceService {
	/**
	 * List Prompt Templates
	 */
	public static listPromptTemplates<ThrowOnError extends boolean = false>(
		options?: Options<PromptGovernanceListPromptTemplatesData, ThrowOnError>,
	) {
		return (options?.client ?? client).get<
			PromptGovernanceListPromptTemplatesResponses,
			PromptGovernanceListPromptTemplatesErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates",
			...options,
		});
	}

	/**
	 * Create Prompt Template
	 */
	public static createPromptTemplate<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceCreatePromptTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			PromptGovernanceCreatePromptTemplateResponses,
			PromptGovernanceCreatePromptTemplateErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Update Prompt Template
	 */
	public static updatePromptTemplate<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceUpdatePromptTemplateData, ThrowOnError>,
	) {
		return (options.client ?? client).patch<
			PromptGovernanceUpdatePromptTemplateResponses,
			PromptGovernanceUpdatePromptTemplateErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates/{prompt_id}/{version}",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Submit Prompt For Review
	 */
	public static submitPromptForReview<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceSubmitPromptForReviewData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			PromptGovernanceSubmitPromptForReviewResponses,
			PromptGovernanceSubmitPromptForReviewErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates/{prompt_id}/{version}/submit",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Approve Prompt
	 */
	public static approvePrompt<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceApprovePromptData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			PromptGovernanceApprovePromptResponses,
			PromptGovernanceApprovePromptErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates/{prompt_id}/{version}/approve",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Reject Prompt
	 */
	public static rejectPrompt<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceRejectPromptData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			PromptGovernanceRejectPromptResponses,
			PromptGovernanceRejectPromptErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates/{prompt_id}/{version}/reject",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Evaluate Prompt
	 */
	public static evaluatePrompt<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceEvaluatePromptData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			PromptGovernanceEvaluatePromptResponses,
			PromptGovernanceEvaluatePromptErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/evaluate",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * Log Prompt Usage
	 */
	public static logPromptUsage<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceLogPromptUsageData, ThrowOnError>,
	) {
		return (options.client ?? client).post<
			PromptGovernanceLogPromptUsageResponses,
			PromptGovernanceLogPromptUsageErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates/{prompt_id}/{version}/usage",
			...options,
			headers: {
				"Content-Type": "application/json",
				...options.headers,
			},
		});
	}

	/**
	 * List Prompt Audit Logs
	 */
	public static listPromptAuditLogs<ThrowOnError extends boolean = false>(
		options: Options<PromptGovernanceListPromptAuditLogsData, ThrowOnError>,
	) {
		return (options.client ?? client).get<
			PromptGovernanceListPromptAuditLogsResponses,
			PromptGovernanceListPromptAuditLogsErrors,
			ThrowOnError
		>({
			url: "/api/v1/prompt-governance/prompts/templates/{prompt_id}/{version}/audit",
			...options,
		});
	}
}
