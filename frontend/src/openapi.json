{
  "openapi": "3.1.0",
  "info": {
    "title": "Quant Platform - Quant-Service [Development]",
    "description": "Data Service API",
    "version": "v1"
  },
  "paths": {
    "/health/": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "description": "Get comprehensive health status.",
        "operationId": "Health-health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health/live": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Liveness Probe",
        "description": "Kubernetes liveness probe endpoint.",
        "operationId": "Health-liveness_probe",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Readiness Probe",
        "description": "Kubernetes readiness probe endpoint.",
        "operationId": "Health-readiness_probe",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health-Readiness Probe"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "operationId": "Auth-login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_Auth-login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "로그아웃 엔드포인트.\n\n쿠키에서 토큰을 삭제하고 로그아웃 처리를 합니다.",
        "operationId": "Auth-logout",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh Token",
        "description": "JWT 토큰 갱신 엔드포인트",
        "operationId": "Auth-refresh_token",
        "parameters": [
          {
            "name": "X-Refresh-Token",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Refresh-Token"
            }
          },
          {
            "name": "refresh_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Refresh Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/token/verify": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify Token",
        "description": "토큰 검증 및 사용자 정보 반환 (디버깅용)",
        "operationId": "Auth-verify_token",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Auth-Verify Token"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register",
        "operationId": "Auth-register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset:Forgot Password",
        "operationId": "Auth-reset:forgot_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_Auth-reset_forgot_password"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset:Reset Password",
        "operationId": "Auth-reset:reset_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_Auth-reset_reset_password"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/request-verify-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request Verify Token",
        "operationId": "Auth-request_verify_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_Auth-request_verify_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/verify": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify",
        "operationId": "Auth-verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_Auth-verify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/{provider}/authorize": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Authorize",
        "description": "Initiate the OAuth2 authorization process for associating an OAuth account\nwith the currently authenticated user.",
        "operationId": "Auth-authorize",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Redirect Url"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2AuthorizeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/{provider}/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Callback",
        "description": "The response varies based on the authentication backend used.",
        "operationId": "Auth-callback",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User Me",
        "operationId": "User-get_user_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update User Me",
        "operationId": "User-update_user_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User",
        "operationId": "User-get_user",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PydanticObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "operationId": "User-update_user",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PydanticObjectId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "operationId": "User-delete_user",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PydanticObjectId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me/oauth-accounts": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "내 OAuth 계정 목록 조회",
        "description": "현재 사용자의 연결된 OAuth 계정 목록을 조회합니다.",
        "operationId": "User-get_my_oauth_accounts",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response User-Get My Oauth Accounts"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/me/oauth-accounts/{oauth_name}/{account_id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "OAuth 계정 연결 해제",
        "description": "특정 OAuth 계정 연결을 해제합니다.",
        "operationId": "User-remove_oauth_account",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "oauth_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Oauth Name"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/users/{user_id}/oauth-accounts": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "사용자 OAuth 계정 목록 조회 (관리자용)",
        "description": "특정 사용자의 OAuth 계정 목록을 조회합니다. (관리자 전용)",
        "operationId": "User-get_user_oauth_accounts",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PydanticObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response User-Get User Oauth Accounts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/market-data/symbols": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Available Symbols",
        "description": "Get list of all available symbols",
        "operationId": "Market Data-get_available_symbols",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Market Data-Get Available Symbols"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/market-data/data/{symbol}": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Market Data",
        "description": "Get market data for a specific symbol and date range",
        "operationId": "Market Data-get_market_data",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Symbol"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Start date (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "End date (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date (YYYY-MM-DD)"
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force refresh from external API",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force refresh from external API"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketDataResponse"
                  },
                  "title": "Response Market Data-Get Market Data"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/market-data/data/bulk": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Request Bulk Data",
        "description": "Request bulk market data for multiple symbols",
        "operationId": "Market Data-request_bulk_data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataRequestStatus"
                  },
                  "type": "array",
                  "title": "Response Market Data-Request Bulk Data"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/market-data/coverage/{symbol}": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Data Coverage",
        "description": "Get data coverage information for a symbol",
        "operationId": "Market Data-get_data_coverage",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Symbol"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/market-data/quality/{symbol}": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Analyze Data Quality",
        "description": "Analyze data quality for a symbol and date range",
        "operationId": "Market Data-analyze_data_quality",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Symbol"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Start date (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "End date (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date (YYYY-MM-DD)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/market-data/analytics/cache-performance": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Cache Performance Stats",
        "description": "DuckDB 캐시 성능 통계 조회",
        "operationId": "Market Data-get_cache_performance_stats",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/market-data/analytics/symbol-coverage": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Symbols Coverage Analytics",
        "description": "심볼별 데이터 커버리지 분석",
        "operationId": "Market Data-get_symbols_coverage_analytics",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/market-data/health/": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Service Health Check",
        "description": "Health check endpoint",
        "operationId": "Market Data-service_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/pipeline/watchlists/watchlist": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Update Watchlist",
        "description": "Create or update a watchlist with flexible naming support.\n\nThis endpoint provides a convenient way to create new watchlists or update\nexisting ones. If no name is provided, it defaults to the 'default' watchlist\nwhich is used by the pipeline for automated updates. This endpoint combines\ncreation and update functionality for ease of use.\n\nArgs:\n    request: Watchlist configuration containing:\n        - symbols: List of stock symbols to include\n        - name: Optional watchlist name (defaults to 'default')\n        - description: Optional description of the watchlist\n\nReturns:\n    dict: Operation result containing:\n        - message: Success message indicating action taken\n        - name: Watchlist name that was processed\n        - symbols: List of symbols in the watchlist\n        - count: Number of symbols in the watchlist\n        - action: Either 'created' or 'updated'\n\nRaises:\n    HTTPException: 400 if watchlist creation fails\n    HTTPException: 500 if operation fails\n\nNote:\n    Updates to the 'default' watchlist automatically update pipeline symbols.\n    This affects which symbols are processed during automated updates.",
        "operationId": "Pipeline-update_watchlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/pipeline/watchlists/watchlists": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "List Watchlists",
        "description": "Retrieve a comprehensive list of all watchlists.\n\nReturns summary information for all watchlists in the system, including\nmetadata like symbol counts, update settings, and timestamps. This is\nuseful for dashboard displays and watchlist management interfaces.\n\nReturns:\n    dict: All watchlists summary containing:\n        - watchlists: List of watchlist summaries with:\n            - name: Watchlist name\n            - description: Watchlist description\n            - symbol_count: Number of symbols in the watchlist\n            - auto_update: Whether automatic updates are enabled\n            - last_updated: Timestamp of last modification\n            - created_at: Timestamp of creation\n        - total_count: Total number of watchlists in the system\n\nRaises:\n    HTTPException: 500 if retrieval fails\n\nNote:\n    This endpoint returns summary data only. Use GET /watchlists/{name}\n    for detailed information including full symbol lists.",
        "operationId": "Pipeline-list_watchlists",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Create Watchlist",
        "description": "Create a new named watchlist with validation.\n\nThis endpoint is specifically for creating new watchlists with explicit\nnaming requirements. Unlike the /watchlist endpoint, this requires a name\nand will fail if a watchlist with the same name already exists.\n\nArgs:\n    request: Watchlist creation parameters containing:\n        - name: Required unique name for the watchlist\n        - symbols: List of stock symbols to include\n        - description: Optional description of the watchlist purpose\n\nReturns:\n    dict: Creation result containing:\n        - message: Success confirmation message\n        - name: Name of the created watchlist\n        - symbols: List of symbols in the watchlist\n        - description: Watchlist description\n        - created_at: UTC timestamp of creation\n\nRaises:\n    HTTPException: 400 if watchlist creation fails or name conflicts\n    HTTPException: 500 if database operation fails\n\nNote:\n    Watchlist names must be unique. Use PUT /watchlists/{name} to update existing ones.",
        "operationId": "Pipeline-create_watchlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/pipeline/watchlists/{name}": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Get Watchlist",
        "description": "Retrieve complete information for a specific watchlist.\n\nReturns detailed information about a named watchlist including the full\nlist of symbols, configuration settings, and all metadata. This provides\nall information needed to display or modify a specific watchlist.\n\nArgs:\n    name: Name of the watchlist to retrieve (case-sensitive)\n\nReturns:\n    dict: Complete watchlist information containing:\n        - name: Watchlist name\n        - description: Detailed description\n        - symbols: Complete list of stock symbols\n        - auto_update: Automatic update configuration\n        - update_interval: Update frequency in seconds\n        - last_updated: Timestamp of last symbol update\n        - created_at: Timestamp of watchlist creation\n\nRaises:\n    HTTPException: 404 if watchlist with specified name not found\n    HTTPException: 500 if retrieval operation fails\n\nNote:\n    Watchlist names are case-sensitive. Use GET /watchlists to see all available names.",
        "operationId": "Pipeline-get_watchlist",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Update Watchlist By Name",
        "description": "Update an existing watchlist with new symbols and settings.\n\nModifies the symbols and metadata of an existing watchlist. This endpoint\nrequires the watchlist to exist and will fail if the specified name is\nnot found. Use POST /watchlists to create new watchlists.\n\nArgs:\n    name: Name of the existing watchlist to update\n    request: Update parameters containing:\n        - symbols: New list of symbols (replaces current list)\n        - description: Optional new description (if provided)\n\nReturns:\n    dict: Update confirmation containing:\n        - message: Success confirmation message\n        - name: Name of the updated watchlist\n        - symbols: New symbols list\n        - description: Current description (updated if provided)\n        - count: Number of symbols in updated watchlist\n        - updated_at: Timestamp of the update\n\nRaises:\n    HTTPException: 404 if watchlist with specified name not found\n    HTTPException: 500 if update operation fails\n\nNote:\n    Updates to the 'default' watchlist automatically update pipeline symbols.\n    Symbol list is completely replaced, not merged with existing symbols.",
        "operationId": "Pipeline-update_watchlist_by_name",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Delete Watchlist",
        "description": "Delete a named watchlist from the system.\n\nPermanently removes a watchlist and all associated metadata. This action\ncannot be undone. The 'default' watchlist cannot be deleted as it is\nrequired for pipeline operations.\n\nArgs:\n    name: Name of the watchlist to delete\n\nReturns:\n    dict: Deletion confirmation containing:\n        - message: Success confirmation message\n        - name: Name of the deleted watchlist\n\nRaises:\n    HTTPException: 400 if attempting to delete the 'default' watchlist\n    HTTPException: 404 if watchlist with specified name not found\n    HTTPException: 500 if deletion operation fails\n\nNote:\n    Deletion is permanent and cannot be undone. Consider backing up\n    important watchlists before deletion.",
        "operationId": "Pipeline-delete_watchlist",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipeline/companies/collect-info/{symbol}": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Collect Stock Info",
        "description": "Collect and store basic company information for a specific symbol.\n\nRetrieves fundamental company data from external APIs (Alpha Vantage)\nincluding company name, sector, industry, market cap, and key financial\nratios. This information is stored in the database for future reference\nand analysis.\n\nArgs:\n    symbol: Stock symbol (e.g., 'AAPL', 'MSFT') - automatically converted to uppercase\n\nReturns:\n    dict: Collection result containing:\n        - message: Success/failure message\n        - symbol: Processed symbol (uppercase)\n        - success: Boolean indicating operation success\n\nRaises:\n    HTTPException: 500 if data collection fails\n\nNote:\n    Respects Alpha Vantage API rate limits (5 calls/min, 500 calls/day).\n    Duplicate requests for same symbol within 24 hours may return cached data.",
        "operationId": "Pipeline-collect_stock_info",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Symbol"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipeline/companies/collect-data/{symbol}": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Collect Daily Data",
        "description": "Collect historical daily price data for a specific symbol.\n\nRetrieves OHLCV (Open, High, Low, Close, Volume) daily price data\nfor the specified symbol and date range. If no dates are provided,\ncollects maximum available historical data. Data is validated,\nadjusted for splits/dividends, and stored in DuckDB for fast access.\n\nArgs:\n    symbol: Stock symbol (e.g., 'AAPL') - automatically converted to uppercase\n    start_date: Optional start date for data collection (defaults to earliest available)\n    end_date: Optional end date for data collection (defaults to latest available)\n\nReturns:\n    dict: Collection result containing:\n        - message: Detailed success/failure message\n        - symbol: Processed symbol (uppercase)\n        - start_date: Actual start date used\n        - end_date: Actual end date used\n        - success: Boolean indicating operation success\n\nRaises:\n    HTTPException: 500 if data collection fails\n\nNote:\n    Large date ranges may take several minutes to complete.\n    Data is automatically cached to minimize API calls.",
        "operationId": "Pipeline-collect_daily_data",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Symbol"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipeline/companies/coverage/{symbol}": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Get Symbol Coverage",
        "description": "Get detailed data coverage information for a specific symbol.\n\nReturns comprehensive information about the availability and quality\nof data for the specified symbol, including date ranges, data gaps,\nlast update timestamps, and data quality metrics.\n\nArgs:\n    symbol: Stock symbol to check coverage for (automatically converted to uppercase)\n\nReturns:\n    dict: Coverage information containing:\n        - symbol: Processed symbol\n        - date_range: Start and end dates of available data\n        - total_records: Number of data points available\n        - gaps: List of date ranges with missing data\n        - last_updated: Timestamp of most recent data update\n        - data_quality: Quality metrics (completeness, accuracy scores)\n\nRaises:\n    HTTPException: 500 if coverage check fails\n    HTTPException: 404 if symbol not found in database",
        "operationId": "Pipeline-get_symbol_coverage",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Symbol"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipeline/companies/company/{symbol}": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Get Company Info",
        "description": "Retrieve stored company information for a specific symbol.\n\nReturns comprehensive company fundamentals and metadata previously\ncollected and stored in the database. This includes financial ratios,\ncompany description, sector classification, and market data.\n\nArgs:\n    symbol: Stock symbol (automatically converted to uppercase)\n\nReturns:\n    dict: Company information containing:\n        - symbol: Stock symbol\n        - name: Company name\n        - description: Business description\n        - sector: Industry sector classification\n        - industry: Specific industry classification\n        - country: Country of incorporation\n        - currency: Reporting currency\n        - market_cap: Market capitalization (if available)\n        - pe_ratio: Price-to-earnings ratio (if available)\n        - dividend_yield: Annual dividend yield (if available)\n        - updated_at: Last information update timestamp\n\nRaises:\n    HTTPException: 404 if company information not found\n    HTTPException: 500 if retrieval fails\n\nNote:\n    If company info not found, use POST /collect-info/{symbol} first.",
        "operationId": "Pipeline-get_company_info",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Symbol"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipeline/companies/": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "List Companies",
        "description": "Retrieve information for all companies in the database.\n\nReturns a comprehensive list of all companies for which information\nhas been collected and stored. Useful for portfolio analysis,\nscreening, and getting an overview of available data.\n\nReturns:\n    dict: All companies data containing:\n        - companies: List of company objects with key information:\n            - symbol: Stock symbol\n            - name: Company name\n            - sector: Industry sector\n            - industry: Specific industry\n            - market_cap: Market capitalization\n            - updated_at: Last update timestamp\n        - total_count: Total number of companies in database\n\nRaises:\n    HTTPException: 500 if retrieval fails\n\nNote:\n    Large datasets may take time to load. Consider pagination for production use.",
        "operationId": "Pipeline-list_companies",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/pipeline/status/": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Get Pipeline Status",
        "description": "Get comprehensive pipeline status and health information.\n\nReturns detailed information about the current state of the data pipeline,\nincluding data coverage statistics, update timestamps, and system health metrics.\nThis endpoint is essential for monitoring the overall health of the data\ncollection and processing system.\n\nReturns:\n    dict: Pipeline status containing:\n        - overall_status: Current pipeline health status\n        - last_update: Timestamp of last successful update\n        - coverage_stats: Data coverage statistics per symbol\n        - active_symbols: Currently monitored symbols count\n        - error_count: Number of recent errors\n\nRaises:\n    HTTPException: 500 if status retrieval fails",
        "operationId": "Pipeline-get_pipeline_status",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/pipeline/status/setup-defaults": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Setup Default Symbols",
        "description": "Initialize default watchlist with standard symbols.\n\nSets up the pipeline with a predefined set of popular stock symbols\nfor immediate use. This is typically called during initial system setup\nor when resetting the pipeline to defaults. Creates the 'default' watchlist\nif it doesn't exist.\n\nDefault symbols include major tech stocks: AAPL, MSFT, GOOGL, AMZN, etc.\n\nReturns:\n    dict: Setup confirmation containing:\n        - message: Success confirmation message\n        - symbols: List of symbols that were set up\n\nRaises:\n    HTTPException: 500 if default setup fails",
        "operationId": "Pipeline-setup_default_symbols",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/pipeline/status/update": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Run Pipeline Update",
        "description": "Execute comprehensive data pipeline update for specified symbols.\n\nInitiates a full data collection and update process for the specified\nsymbols or the default watchlist. The update runs asynchronously in the\nbackground to avoid blocking the API response. Includes company information\nretrieval, historical price data collection, and data validation.\n\nArgs:\n    request: Update configuration containing:\n        - symbols: Optional list of symbols to update (uses default if None)\n        - start_date: Optional start date for data collection\n        - end_date: Optional end date for data collection\n    background_tasks: FastAPI background task manager\n\nReturns:\n    dict: Update initiation confirmation containing:\n        - message: Update start confirmation\n        - symbols: Symbols being updated\n        - started_at: UTC timestamp when update began\n\nRaises:\n    HTTPException: 500 if update initiation fails\n\nNote:\n    This is an asynchronous operation. Use /status endpoint to monitor progress.",
        "operationId": "Pipeline-run_pipeline_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/strategies/": {
      "post": {
        "tags": [
          "Strategy"
        ],
        "summary": "Create Strategy",
        "description": "Create a new strategy",
        "operationId": "Strategy-create_strategy",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StrategyCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Strategy"
        ],
        "summary": "Get Strategies",
        "description": "Get list of strategies",
        "operationId": "Strategy-get_strategies",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StrategyType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "전략 타입 필터",
              "title": "Strategy Type"
            },
            "description": "전략 타입 필터"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "활성화 상태 필터",
              "title": "Is Active"
            },
            "description": "활성화 상태 필터"
          },
          {
            "name": "is_template",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "템플릿 여부 필터",
              "title": "Is Template"
            },
            "description": "템플릿 여부 필터"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "description": "결과 수 제한",
              "default": 50,
              "title": "Limit"
            },
            "description": "결과 수 제한"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/{strategy_id}": {
      "get": {
        "tags": [
          "Strategy"
        ],
        "summary": "Get Strategy",
        "description": "Get strategy by ID",
        "operationId": "Strategy-get_strategy",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Strategy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Strategy"
        ],
        "summary": "Update Strategy",
        "description": "Update strategy",
        "operationId": "Strategy-update_strategy",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Strategy Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StrategyUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Strategy"
        ],
        "summary": "Delete Strategy",
        "description": "Delete strategy (soft delete)",
        "operationId": "Strategy-delete_strategy",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Strategy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/{strategy_id}/execute": {
      "post": {
        "tags": [
          "Strategy"
        ],
        "summary": "Execute Strategy",
        "description": "Execute strategy and generate signal",
        "operationId": "Strategy-execute_strategy",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Strategy Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StrategyExecuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/{strategy_id}/executions": {
      "get": {
        "tags": [
          "Strategy"
        ],
        "summary": "Get Strategy Executions",
        "description": "Get strategy execution history",
        "operationId": "Strategy-get_strategy_executions",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Strategy Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "결과 수 제한",
              "default": 100,
              "title": "Limit"
            },
            "description": "결과 수 제한"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/{strategy_id}/performance": {
      "get": {
        "tags": [
          "Strategy"
        ],
        "summary": "Get Strategy Performance",
        "description": "Get strategy performance metrics",
        "operationId": "Strategy-get_strategy_performance",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Strategy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/templates/": {
      "post": {
        "tags": [
          "Strategy"
        ],
        "summary": "Create Template",
        "description": "Create a new strategy template (Superuser only)",
        "operationId": "Strategy-create_template",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Strategy"
        ],
        "summary": "Get Templates",
        "description": "Get list of strategy templates",
        "operationId": "Strategy-get_templates",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "strategy_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StrategyType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "전략 타입 필터",
              "title": "Strategy Type"
            },
            "description": "전략 타입 필터"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/templates/{template_id}": {
      "get": {
        "tags": [
          "Strategy"
        ],
        "summary": "Get Template",
        "description": "Get template by ID",
        "operationId": "Strategy-get_template",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Strategy"
        ],
        "summary": "Update Template",
        "description": "Update template by ID (Superuser only)",
        "operationId": "Strategy-update_template",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Template Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Strategy"
        ],
        "summary": "Delete Template",
        "description": "Delete template by ID (Superuser only)",
        "operationId": "Strategy-delete_template",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/templates/{template_id}/create-strategy": {
      "post": {
        "tags": [
          "Strategy"
        ],
        "summary": "Create Strategy From Template",
        "description": "Create a strategy instance from template",
        "operationId": "Strategy-create_strategy_from_template",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Template Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StrategyFromTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/strategies/templates/analytics/usage-stats": {
      "get": {
        "tags": [
          "Strategy"
        ],
        "summary": "Get Template Usage Stats",
        "description": "Get template usage statistics",
        "operationId": "Strategy-get_template_usage_stats",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/backtests/": {
      "post": {
        "tags": [
          "Backtests"
        ],
        "summary": "Create Backtest",
        "description": "Create a new backtest",
        "operationId": "Backtests-create_backtest",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BacktestCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Get Backtests",
        "description": "Get list of backtests",
        "operationId": "Backtests-get_backtests",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BacktestStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "실행 상태 필터",
              "title": "Status"
            },
            "description": "실행 상태 필터"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "건너뛸 개수",
              "default": 0,
              "title": "Skip"
            },
            "description": "건너뛸 개수"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "조회할 개수",
              "default": 100,
              "title": "Limit"
            },
            "description": "조회할 개수"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/backtests/{backtest_id}": {
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Get Backtest",
        "description": "Get backtest by ID",
        "operationId": "Backtests-get_backtest",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "backtest_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Backtests"
        ],
        "summary": "Update Backtest",
        "description": "Update backtest",
        "operationId": "Backtests-update_backtest",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "backtest_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BacktestUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Backtests"
        ],
        "summary": "Delete Backtest",
        "description": "Delete backtest",
        "operationId": "Backtests-delete_backtest",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "backtest_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/backtests/{backtest_id}/execute": {
      "post": {
        "tags": [
          "Backtests"
        ],
        "summary": "Execute Backtest",
        "description": "Execute backtest with trading signals",
        "operationId": "Backtests-execute_backtest",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "backtest_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BacktestExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestExecutionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/backtests/{backtest_id}/executions": {
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Get Backtest Executions",
        "description": "Get execution history for a backtest",
        "operationId": "Backtests-get_backtest_executions",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "backtest_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backtest Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "건너뛸 개수",
              "default": 0,
              "title": "Skip"
            },
            "description": "건너뛸 개수"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "조회할 개수",
              "default": 100,
              "title": "Limit"
            },
            "description": "조회할 개수"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacktestExecutionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/backtests/results/": {
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Get Backtest Results",
        "description": "Get backtest results from DuckDB (고성능 분석용)",
        "operationId": "Backtests-get_backtest_results",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "backtest_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "백테스트 ID 필터",
              "title": "Backtest Id"
            },
            "description": "백테스트 ID 필터"
          },
          {
            "name": "execution_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "실행 ID 필터",
              "title": "Execution Id"
            },
            "description": "실행 ID 필터"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "건너뛸 개수",
              "default": 0,
              "title": "Skip"
            },
            "description": "건너뛸 개수"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "조회할 개수",
              "default": 100,
              "title": "Limit"
            },
            "description": "조회할 개수"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Backtests-Get Backtest Results"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/backtests/integrated": {
      "post": {
        "tags": [
          "Backtests"
        ],
        "summary": "Create And Run Integrated Backtest",
        "description": "통합 백테스트 생성 및 실행 - 모든 서비스 연동",
        "operationId": "Backtests-create_and_run_integrated_backtest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedBacktestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedBacktestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/backtests/health": {
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Health Check",
        "description": "백테스트 시스템 상태 확인 (DuckDB + MongoDB 통합 상태)",
        "operationId": "Backtests-health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/backtests/analytics/performance-stats": {
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Get Performance Analytics",
        "description": "백테스트 성과 분석 (DuckDB 고성능 분석)",
        "operationId": "Backtests-get_performance_analytics",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/backtests/analytics/trades": {
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Get Trades Analytics",
        "description": "거래 기록 분석 (DuckDB 고성능 쿼리)",
        "operationId": "Backtests-get_trades_analytics",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "execution_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "특정 실행 ID 필터",
              "title": "Execution Id"
            },
            "description": "특정 실행 ID 필터"
          },
          {
            "name": "symbol",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "심볼 필터",
              "title": "Symbol"
            },
            "description": "심볼 필터"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/backtests/analytics/summary": {
      "get": {
        "tags": [
          "Backtests"
        ],
        "summary": "Get Backtest Summary Analytics",
        "description": "백테스트 결과 요약 분석 (DuckDB 기반)",
        "operationId": "Backtests-get_backtest_summary_analytics",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BacktestConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "백테스트 이름"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "백테스트 설명",
            "default": ""
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date",
            "description": "시작일"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date",
            "description": "종료일"
          },
          "symbols": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Symbols",
            "description": "대상 심볼 목록"
          },
          "initial_cash": {
            "type": "number",
            "title": "Initial Cash",
            "description": "초기 자본금",
            "default": 100000.0
          },
          "max_position_size": {
            "type": "number",
            "title": "Max Position Size",
            "description": "최대 포지션 크기 (비율)",
            "default": 0.2
          },
          "commission_rate": {
            "type": "number",
            "title": "Commission Rate",
            "description": "수수료율",
            "default": 0.001
          },
          "slippage_rate": {
            "type": "number",
            "title": "Slippage Rate",
            "description": "슬리피지율",
            "default": 0.0005
          },
          "rebalance_frequency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rebalance Frequency",
            "description": "리밸런싱 주기 (daily, weekly, monthly)"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "태그"
          }
        },
        "type": "object",
        "required": [
          "name",
          "start_date",
          "end_date",
          "symbols"
        ],
        "title": "BacktestConfig",
        "description": "백테스트 설정 내장 모델"
      },
      "BacktestCreateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "백테스트 이름"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "백테스트 설명",
            "default": ""
          },
          "config": {
            "$ref": "#/components/schemas/BacktestConfig",
            "description": "백테스트 설정"
          }
        },
        "type": "object",
        "required": [
          "name",
          "config"
        ],
        "title": "BacktestCreateRequest",
        "description": "백테스트 생성 요청"
      },
      "BacktestExecutionListResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "executions": {
            "items": {
              "$ref": "#/components/schemas/BacktestExecutionResponse"
            },
            "type": "array",
            "title": "Executions",
            "description": "실행 목록"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "총 개수"
          }
        },
        "type": "object",
        "required": [
          "executions",
          "total"
        ],
        "title": "BacktestExecutionListResponse",
        "description": "백테스트 실행 목록 응답"
      },
      "BacktestExecutionRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "signals": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Signals",
            "description": "트레이딩 시그널 목록"
          }
        },
        "type": "object",
        "required": [
          "signals"
        ],
        "title": "BacktestExecutionRequest",
        "description": "백테스트 실행 요청",
        "example": {
          "signals": [
            {
              "action": "BUY",
              "quantity": 10,
              "symbol": "AAPL",
              "timestamp": "2023-01-01T00:00:00"
            },
            {
              "action": "SELL",
              "quantity": 5,
              "symbol": "AAPL",
              "timestamp": "2023-01-02T00:00:00"
            }
          ]
        }
      },
      "BacktestExecutionResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "실행 ID"
          },
          "backtest_id": {
            "type": "string",
            "title": "Backtest Id",
            "description": "백테스트 ID"
          },
          "execution_id": {
            "type": "string",
            "title": "Execution Id",
            "description": "실행 ID"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "description": "실행 시작 시간"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "실행 종료 시간"
          },
          "status": {
            "$ref": "#/components/schemas/BacktestStatus",
            "description": "실행 상태"
          },
          "portfolio_values": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Portfolio Values",
            "description": "포트폴리오 가치 히스토리"
          },
          "trades": {
            "items": {
              "$ref": "#/components/schemas/Trade"
            },
            "type": "array",
            "title": "Trades",
            "description": "거래 내역"
          },
          "positions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Position"
            },
            "type": "object",
            "title": "Positions",
            "description": "최종 포지션"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message",
            "description": "오류 메시지"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "생성 시간"
          }
        },
        "type": "object",
        "required": [
          "id",
          "backtest_id",
          "execution_id",
          "start_time",
          "status",
          "portfolio_values",
          "trades",
          "positions",
          "created_at"
        ],
        "title": "BacktestExecutionResponse",
        "description": "백테스트 실행 응답"
      },
      "BacktestListResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "backtests": {
            "items": {
              "$ref": "#/components/schemas/BacktestResponse"
            },
            "type": "array",
            "title": "Backtests",
            "description": "백테스트 목록"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "총 개수"
          }
        },
        "type": "object",
        "required": [
          "backtests",
          "total"
        ],
        "title": "BacktestListResponse",
        "description": "백테스트 목록 응답"
      },
      "BacktestResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "백테스트 ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "백테스트 이름"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "백테스트 설명"
          },
          "config": {
            "$ref": "#/components/schemas/BacktestConfig",
            "description": "백테스트 설정"
          },
          "status": {
            "$ref": "#/components/schemas/BacktestStatus",
            "description": "실행 상태"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time",
            "description": "실행 시작 시간"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "실행 종료 시간"
          },
          "duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Seconds",
            "description": "실행 시간(초)"
          },
          "performance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PerformanceMetrics"
              },
              {
                "type": "null"
              }
            ],
            "description": "성과 지표"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "생성 시간"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "수정 시간"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "config",
          "status",
          "created_at"
        ],
        "title": "BacktestResponse",
        "description": "백테스트 응답"
      },
      "BacktestStatus": {
        "type": "string",
        "enum": [
          "pending",
          "running",
          "completed",
          "failed",
          "cancelled"
        ],
        "title": "BacktestStatus",
        "description": "백테스트 상태"
      },
      "BacktestUpdateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "백테스트 이름"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "백테스트 설명"
          },
          "config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BacktestConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "백테스트 설정"
          }
        },
        "type": "object",
        "title": "BacktestUpdateRequest",
        "description": "백테스트 수정 요청"
      },
      "Body_Auth-login": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_Auth-login"
      },
      "Body_Auth-request_verify_token": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_Auth-request_verify_token"
      },
      "Body_Auth-reset_forgot_password": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_Auth-reset:forgot_password"
      },
      "Body_Auth-reset_reset_password": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "password"
        ],
        "title": "Body_Auth-reset:reset_password"
      },
      "Body_Auth-verify": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "Body_Auth-verify"
      },
      "BulkDataRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "symbols": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Symbols",
            "description": "List of symbols"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date",
            "description": "Start date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date",
            "description": "End date"
          },
          "interval": {
            "type": "string",
            "title": "Interval",
            "description": "Data interval",
            "default": "daily"
          }
        },
        "type": "object",
        "required": [
          "symbols",
          "start_date",
          "end_date"
        ],
        "title": "BulkDataRequest",
        "description": "Request model for bulk data operations"
      },
      "DataQualityResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "date_range_start": {
            "type": "string",
            "format": "date-time",
            "title": "Date Range Start"
          },
          "date_range_end": {
            "type": "string",
            "format": "date-time",
            "title": "Date Range End"
          },
          "total_records": {
            "type": "integer",
            "title": "Total Records"
          },
          "missing_days": {
            "type": "integer",
            "title": "Missing Days"
          },
          "duplicate_records": {
            "type": "integer",
            "title": "Duplicate Records"
          },
          "price_anomalies": {
            "type": "integer",
            "title": "Price Anomalies"
          },
          "quality_score": {
            "type": "number",
            "title": "Quality Score"
          },
          "analyzed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Analyzed At"
          }
        },
        "type": "object",
        "required": [
          "symbol",
          "date_range_start",
          "date_range_end",
          "total_records",
          "missing_days",
          "duplicate_records",
          "price_anomalies",
          "quality_score",
          "analyzed_at"
        ],
        "title": "DataQualityResponse",
        "description": "Response model for data quality metrics"
      },
      "DataRequestStatus": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "records_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Records Count"
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "title": "Requested At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "symbol",
          "start_date",
          "end_date",
          "status",
          "requested_at"
        ],
        "title": "DataRequestStatus",
        "description": "Response model for data request status"
      },
      "ExecutionListResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "executions": {
            "items": {
              "$ref": "#/components/schemas/ExecutionResponse"
            },
            "type": "array",
            "title": "Executions",
            "description": "실행 목록"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "총 개수"
          }
        },
        "type": "object",
        "required": [
          "executions",
          "total"
        ],
        "title": "ExecutionListResponse",
        "description": "Execution list response"
      },
      "ExecutionResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "실행 ID"
          },
          "strategy_id": {
            "type": "string",
            "title": "Strategy Id",
            "description": "전략 ID"
          },
          "strategy_name": {
            "type": "string",
            "title": "Strategy Name",
            "description": "전략 이름"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol",
            "description": "심볼"
          },
          "signal_type": {
            "$ref": "#/components/schemas/SignalType"
          },
          "signal_strength": {
            "type": "number",
            "title": "Signal Strength",
            "description": "신호 강도"
          },
          "price": {
            "type": "number",
            "title": "Price",
            "description": "가격"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "실행 시간"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "메타데이터"
          },
          "backtest_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Backtest Id",
            "description": "백테스트 ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "생성 시간"
          }
        },
        "type": "object",
        "required": [
          "id",
          "strategy_id",
          "strategy_name",
          "symbol",
          "signal_type",
          "signal_strength",
          "price",
          "timestamp",
          "created_at"
        ],
        "title": "ExecutionResponse",
        "description": "Execution response"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "database_connected": {
            "type": "boolean",
            "title": "Database Connected"
          },
          "alpha_vantage_available": {
            "type": "boolean",
            "title": "Alpha Vantage Available"
          },
          "total_symbols": {
            "type": "integer",
            "title": "Total Symbols"
          },
          "last_update": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Update"
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "database_connected",
          "alpha_vantage_available",
          "total_symbols"
        ],
        "title": "HealthCheckResponse",
        "description": "Health check response model"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "service": {
            "type": "string",
            "title": "Service"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "uptime": {
            "type": "number",
            "title": "Uptime"
          },
          "checks": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Checks"
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "service",
          "version",
          "uptime",
          "checks"
        ],
        "title": "HealthResponse",
        "description": "Health check response model."
      },
      "IntegratedBacktestRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "백테스트 이름"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "백테스트 설명",
            "default": ""
          },
          "symbols": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Symbols",
            "description": "심볼 목록"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date",
            "description": "시작일"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date",
            "description": "종료일"
          },
          "strategy_type": {
            "type": "string",
            "title": "Strategy Type",
            "description": "전략 타입"
          },
          "strategy_params": {
            "additionalProperties": true,
            "type": "object",
            "title": "Strategy Params",
            "description": "전략 매개변수"
          },
          "initial_capital": {
            "type": "number",
            "title": "Initial Capital",
            "description": "초기 자본",
            "default": 100000.0
          }
        },
        "type": "object",
        "required": [
          "name",
          "symbols",
          "start_date",
          "end_date",
          "strategy_type"
        ],
        "title": "IntegratedBacktestRequest",
        "description": "통합 백테스트 요청"
      },
      "IntegratedBacktestResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "backtest_id": {
            "type": "string",
            "title": "Backtest Id",
            "description": "백테스트 ID"
          },
          "execution_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Execution Id",
            "description": "실행 ID"
          },
          "result_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result Id",
            "description": "결과 ID"
          },
          "status": {
            "$ref": "#/components/schemas/BacktestStatus",
            "description": "상태"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "메시지"
          },
          "performance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PerformanceMetrics"
              },
              {
                "type": "null"
              }
            ],
            "description": "성과 지표"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time",
            "description": "시작 시간"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "종료 시간"
          }
        },
        "type": "object",
        "required": [
          "backtest_id",
          "status",
          "message"
        ],
        "title": "IntegratedBacktestResponse",
        "description": "통합 백테스트 응답"
      },
      "LoginResponse": {
        "properties": {
          "access_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Token"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "token_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Type"
          },
          "user_info": {
            "$ref": "#/components/schemas/UserResponse"
          }
        },
        "type": "object",
        "required": [
          "user_info"
        ],
        "title": "LoginResponse",
        "example": {
          "access_token": "string",
          "refresh_token": "string",
          "token_type": "bearer",
          "user_info": {
            "email": "user@example.com",
            "full_name": "string",
            "id": "string",
            "is_active": true,
            "is_superuser": false,
            "is_verified": false
          }
        }
      },
      "MarketDataResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "open": {
            "type": "number",
            "title": "Open"
          },
          "high": {
            "type": "number",
            "title": "High"
          },
          "low": {
            "type": "number",
            "title": "Low"
          },
          "close": {
            "type": "number",
            "title": "Close"
          },
          "volume": {
            "type": "integer",
            "title": "Volume"
          },
          "adjusted_close": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Adjusted Close"
          },
          "dividend_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dividend Amount"
          },
          "split_coefficient": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Split Coefficient"
          }
        },
        "type": "object",
        "required": [
          "symbol",
          "date",
          "open",
          "high",
          "low",
          "close",
          "volume"
        ],
        "title": "MarketDataResponse",
        "description": "Response model for market data"
      },
      "OAuth2AuthorizeResponse": {
        "properties": {
          "authorization_url": {
            "type": "string",
            "title": "Authorization Url"
          }
        },
        "type": "object",
        "required": [
          "authorization_url"
        ],
        "title": "OAuth2AuthorizeResponse",
        "example": {
          "authorization_url": "https://example.com/oauth/authorize?response_type=code&client_id=your_client_id&redirect_uri=your_redirect_uri&scope=your_scope"
        }
      },
      "OAuthAccount": {
        "properties": {
          "oauth_name": {
            "type": "string",
            "title": "Oauth Name"
          },
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email"
          }
        },
        "type": "object",
        "required": [
          "oauth_name",
          "access_token",
          "account_id",
          "account_email"
        ],
        "title": "OAuthAccount",
        "description": "Base OAuth account model.",
        "example": {
          "_id": "string",
          "access_token": "string",
          "account_email": "user@example.com",
          "account_id": "string",
          "expires_at": 1234567890,
          "oauth_name": "string",
          "refresh_token": "string"
        }
      },
      "OrderType": {
        "type": "string",
        "enum": [
          "MARKET",
          "LIMIT",
          "STOP",
          "STOP_LIMIT"
        ],
        "title": "OrderType",
        "description": "주문 타입"
      },
      "PerformanceMetrics": {
        "properties": {
          "total_return": {
            "type": "number",
            "title": "Total Return",
            "description": "총 수익률"
          },
          "annualized_return": {
            "type": "number",
            "title": "Annualized Return",
            "description": "연환산 수익률"
          },
          "volatility": {
            "type": "number",
            "title": "Volatility",
            "description": "변동성"
          },
          "sharpe_ratio": {
            "type": "number",
            "title": "Sharpe Ratio",
            "description": "샤프 비율"
          },
          "max_drawdown": {
            "type": "number",
            "title": "Max Drawdown",
            "description": "최대 낙폭"
          },
          "total_trades": {
            "type": "integer",
            "title": "Total Trades",
            "description": "총 거래 수"
          },
          "winning_trades": {
            "type": "integer",
            "title": "Winning Trades",
            "description": "승리 거래 수"
          },
          "losing_trades": {
            "type": "integer",
            "title": "Losing Trades",
            "description": "패배 거래 수"
          },
          "win_rate": {
            "type": "number",
            "title": "Win Rate",
            "description": "승률"
          }
        },
        "type": "object",
        "required": [
          "total_return",
          "annualized_return",
          "volatility",
          "sharpe_ratio",
          "max_drawdown",
          "total_trades",
          "winning_trades",
          "losing_trades",
          "win_rate"
        ],
        "title": "PerformanceMetrics",
        "description": "성과 지표 내장 모델"
      },
      "PerformanceResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "성과 ID"
          },
          "strategy_id": {
            "type": "string",
            "title": "Strategy Id",
            "description": "전략 ID"
          },
          "strategy_name": {
            "type": "string",
            "title": "Strategy Name",
            "description": "전략 이름"
          },
          "total_signals": {
            "type": "integer",
            "title": "Total Signals",
            "description": "총 신호 수"
          },
          "buy_signals": {
            "type": "integer",
            "title": "Buy Signals",
            "description": "매수 신호 수"
          },
          "sell_signals": {
            "type": "integer",
            "title": "Sell Signals",
            "description": "매도 신호 수"
          },
          "hold_signals": {
            "type": "integer",
            "title": "Hold Signals",
            "description": "보유 신호 수"
          },
          "total_return": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Return",
            "description": "총 수익률"
          },
          "win_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Win Rate",
            "description": "승률"
          },
          "avg_return_per_trade": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avg Return Per Trade",
            "description": "거래당 평균 수익률"
          },
          "max_drawdown": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Drawdown",
            "description": "최대 낙폭"
          },
          "sharpe_ratio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sharpe Ratio",
            "description": "샤프 비율"
          },
          "calmar_ratio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Calmar Ratio",
            "description": "칼마 비율"
          },
          "volatility": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Volatility",
            "description": "변동성"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date",
            "description": "시작일"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date",
            "description": "종료일"
          },
          "accuracy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accuracy",
            "description": "정확도"
          },
          "avg_signal_strength": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avg Signal Strength",
            "description": "평균 신호 강도"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "생성 시간"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "수정 시간"
          }
        },
        "type": "object",
        "required": [
          "id",
          "strategy_id",
          "strategy_name",
          "total_signals",
          "buy_signals",
          "sell_signals",
          "hold_signals",
          "created_at",
          "updated_at"
        ],
        "title": "PerformanceResponse",
        "description": "Performance response"
      },
      "Position": {
        "properties": {
          "symbol": {
            "type": "string",
            "title": "Symbol",
            "description": "심볼"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity",
            "description": "보유 수량"
          },
          "avg_price": {
            "type": "number",
            "title": "Avg Price",
            "description": "평균 단가"
          },
          "current_price": {
            "type": "number",
            "title": "Current Price",
            "description": "현재 가격"
          },
          "unrealized_pnl": {
            "type": "number",
            "title": "Unrealized Pnl",
            "description": "미실현 손익"
          },
          "realized_pnl": {
            "type": "number",
            "title": "Realized Pnl",
            "description": "실현 손익",
            "default": 0.0
          },
          "first_buy_date": {
            "type": "string",
            "format": "date-time",
            "title": "First Buy Date",
            "description": "최초 매수일"
          },
          "last_update": {
            "type": "string",
            "format": "date-time",
            "title": "Last Update",
            "description": "마지막 업데이트"
          }
        },
        "type": "object",
        "required": [
          "symbol",
          "quantity",
          "avg_price",
          "current_price",
          "unrealized_pnl",
          "first_buy_date"
        ],
        "title": "Position",
        "description": "포지션 정보 내장 모델"
      },
      "PydanticObjectId": {
        "type": "string",
        "maxLength": 24,
        "minLength": 24,
        "pattern": "^[0-9a-f]{24}$",
        "example": "5eb7cf5a86d9755df3a6c593"
      },
      "SignalType": {
        "type": "string",
        "enum": [
          "BUY",
          "SELL",
          "HOLD"
        ],
        "title": "SignalType",
        "description": "신호 타입"
      },
      "StrategyCreateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "전략 이름"
          },
          "strategy_type": {
            "$ref": "#/components/schemas/StrategyType",
            "description": "전략 타입"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "전략 설명"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters",
            "description": "전략 파라미터"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "태그"
          }
        },
        "type": "object",
        "required": [
          "name",
          "strategy_type"
        ],
        "title": "StrategyCreateRequest",
        "description": "Strategy creation request"
      },
      "StrategyExecuteRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol",
            "description": "대상 심볼"
          },
          "market_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Market Data",
            "description": "시장 데이터"
          }
        },
        "type": "object",
        "required": [
          "symbol",
          "market_data"
        ],
        "title": "StrategyExecuteRequest",
        "description": "Strategy execution request"
      },
      "StrategyFromTemplateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "전략 이름"
          },
          "parameter_overrides": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {},
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameter Overrides",
            "description": "파라미터 오버라이드"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "StrategyFromTemplateRequest",
        "description": "Create strategy from template request"
      },
      "StrategyListResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "strategies": {
            "items": {
              "$ref": "#/components/schemas/StrategyResponse"
            },
            "type": "array",
            "title": "Strategies",
            "description": "전략 목록"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "총 개수"
          }
        },
        "type": "object",
        "required": [
          "strategies",
          "total"
        ],
        "title": "StrategyListResponse",
        "description": "Strategy list response"
      },
      "StrategyResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "전략 ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "전략 이름"
          },
          "strategy_type": {
            "$ref": "#/components/schemas/StrategyType",
            "description": "전략 타입"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "전략 설명"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters",
            "description": "전략 파라미터"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "활성화 상태"
          },
          "is_template": {
            "type": "boolean",
            "title": "Is Template",
            "description": "템플릿 여부"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By",
            "description": "생성자"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "생성 시간"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "수정 시간"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "태그"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "strategy_type",
          "is_active",
          "is_template",
          "created_at",
          "updated_at"
        ],
        "title": "StrategyResponse",
        "description": "Strategy response"
      },
      "StrategyType": {
        "type": "string",
        "enum": [
          "sma_crossover",
          "rsi_mean_reversion",
          "momentum",
          "buy_and_hold"
        ],
        "title": "StrategyType",
        "description": "지원되는 전략 타입"
      },
      "StrategyUpdateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "전략 이름"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "전략 설명"
          },
          "parameters": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {},
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "description": "전략 파라미터"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "description": "활성화 상태"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "태그"
          }
        },
        "type": "object",
        "title": "StrategyUpdateRequest",
        "description": "Strategy update request"
      },
      "TemplateCreateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "템플릿 이름"
          },
          "strategy_type": {
            "$ref": "#/components/schemas/StrategyType",
            "description": "전략 타입"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "템플릿 설명"
          },
          "default_parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Default Parameters",
            "description": "기본 파라미터"
          },
          "parameter_schema": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {},
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameter Schema",
            "description": "파라미터 스키마"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "태그"
          }
        },
        "type": "object",
        "required": [
          "name",
          "strategy_type",
          "description"
        ],
        "title": "TemplateCreateRequest",
        "description": "Template creation request"
      },
      "TemplateListResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "templates": {
            "items": {
              "$ref": "#/components/schemas/TemplateResponse"
            },
            "type": "array",
            "title": "Templates",
            "description": "템플릿 목록"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "총 개수"
          }
        },
        "type": "object",
        "required": [
          "templates",
          "total"
        ],
        "title": "TemplateListResponse",
        "description": "Template list response"
      },
      "TemplateResponse": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "템플릿 ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "템플릿 이름"
          },
          "strategy_type": {
            "$ref": "#/components/schemas/StrategyType",
            "description": "전략 타입"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "템플릿 설명"
          },
          "default_parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Default Parameters",
            "description": "기본 파라미터"
          },
          "parameter_schema": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {},
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameter Schema",
            "description": "파라미터 스키마"
          },
          "usage_count": {
            "type": "integer",
            "title": "Usage Count",
            "description": "사용 횟수"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "생성 시간"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "수정 시간"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "태그"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "strategy_type",
          "description",
          "usage_count",
          "created_at",
          "updated_at"
        ],
        "title": "TemplateResponse",
        "description": "Template response"
      },
      "TemplateUpdateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "템플릿 이름"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "템플릿 설명"
          },
          "default_parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Parameters",
            "description": "기본 파라미터"
          },
          "parameter_schema": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {},
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameter Schema",
            "description": "파라미터 스키마"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "태그"
          }
        },
        "type": "object",
        "title": "TemplateUpdateRequest",
        "description": "Template update request"
      },
      "Trade": {
        "properties": {
          "trade_id": {
            "type": "string",
            "title": "Trade Id",
            "description": "거래 ID"
          },
          "symbol": {
            "type": "string",
            "title": "Symbol",
            "description": "심볼"
          },
          "trade_type": {
            "$ref": "#/components/schemas/TradeType"
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType",
            "default": "MARKET"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity",
            "description": "수량"
          },
          "price": {
            "type": "number",
            "title": "Price",
            "description": "체결 가격"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "거래 시간"
          },
          "commission": {
            "type": "number",
            "title": "Commission",
            "description": "수수료",
            "default": 0.0
          },
          "slippage": {
            "type": "number",
            "title": "Slippage",
            "description": "슬리피지",
            "default": 0.0
          },
          "strategy_signal_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Strategy Signal Id",
            "description": "전략 신호 ID"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "메모"
          }
        },
        "type": "object",
        "required": [
          "trade_id",
          "symbol",
          "trade_type",
          "quantity",
          "price",
          "timestamp"
        ],
        "title": "Trade",
        "description": "거래 기록 내장 모델"
      },
      "TradeType": {
        "type": "string",
        "enum": [
          "BUY",
          "SELL"
        ],
        "title": "TradeType",
        "description": "거래 타입"
      },
      "UpdateRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "symbols": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Symbols"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          }
        },
        "type": "object",
        "title": "UpdateRequest",
        "description": "Update request model"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "default": true
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser",
            "default": false
          },
          "is_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Verified",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "UserCreate",
        "example": {
          "email": "user@example.com",
          "full_name": "string",
          "is_active": true,
          "is_superuser": false,
          "is_verified": false,
          "password": "string"
        }
      },
      "UserResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Is Superuser",
            "default": false
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "default": false
          },
          "oauth_accounts": {
            "items": {
              "$ref": "#/components/schemas/OAuthAccount"
            },
            "type": "array",
            "title": "Oauth Accounts"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UserResponse",
        "description": "Base User model.",
        "example": {
          "_id": "string",
          "email": "user@example.com",
          "full_name": "string",
          "is_active": true,
          "is_superuser": false,
          "is_verified": false,
          "oauth_accounts": [
            {
              "_id": "string",
              "access_token": "string",
              "account_email": "user@example.com",
              "account_id": "string",
              "expires_at": 1234567890,
              "oauth_name": "string",
              "refresh_token": "string"
            }
          ]
        }
      },
      "UserUpdate": {
        "properties": {
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser"
          },
          "is_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Verified"
          }
        },
        "type": "object",
        "title": "UserUpdate",
        "example": {
          "email": "user@example.com",
          "full_name": "string",
          "is_active": true,
          "is_superuser": false,
          "is_verified": false,
          "password": "string"
        }
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WatchlistCreate": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "symbols": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Symbols"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "name",
          "symbols"
        ],
        "title": "WatchlistCreate",
        "description": "Watchlist creation model"
      },
      "WatchlistUpdate": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "symbols": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Symbols"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "default": "default"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "symbols"
        ],
        "title": "WatchlistUpdate",
        "description": "Watchlist update model"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/v1/auth/login"
          }
        }
      }
    }
  }
}
