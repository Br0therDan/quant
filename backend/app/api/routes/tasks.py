"""
Task management API endpoints
ÏûëÏóÖ Í¥ÄÎ¶¨ API ÏóîÎìúÌè¨Ïù∏Ìä∏
"""

import logging
from fastapi import APIRouter, HTTPException, BackgroundTasks
from pydantic import BaseModel

from app.tasks.stock_update import (
    update_stock_data_coverage,
    force_update_all_active_symbols,
)


router = APIRouter()
logger = logging.getLogger(__name__)


class TaskResult(BaseModel):
    """ÏûëÏóÖ Ïã§Ìñâ Í≤∞Í≥º"""

    status: str
    message: str
    total: int = 0
    success: int = 0
    failed: int = 0
    errors: list[str] = []


@router.post(
    "/stock-update/delta",
    response_model=TaskResult,
    description="ÎßåÎ£åÎêú Ï£ºÏãù Îç∞Ïù¥ÌÑ∞Î•º Ï¶ùÎ∂Ñ ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.",
)
async def run_stock_delta_update(background_tasks: BackgroundTasks):
    """
    StockDataCoverageÏùò next_update_dueÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÎßåÎ£åÎêú Îç∞Ïù¥ÌÑ∞Îßå ÏóÖÎç∞Ïù¥Ìä∏

    - Daily: ÏµúÍ∑º 100Í∞ú Îç∞Ïù¥ÌÑ∞ (compact)
    - Weekly/Monthly: Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ (full)
    """
    try:
        logger.info("üì° Triggering stock delta update task...")

        # Î∞±Í∑∏ÎùºÏö¥Îìú ÏûëÏóÖÏúºÎ°ú Ïã§Ìñâ
        result = await update_stock_data_coverage()

        return TaskResult(
            status="completed",
            message=f"Delta update completed: {result['success']} success, {result['failed']} failed",
            total=result["total"],
            success=result["success"],
            failed=result["failed"],
            errors=result["errors"][:10],  # ÏµúÎåÄ 10Í∞ú ÏóêÎü¨Îßå Î∞òÌôò
        )

    except Exception as e:
        logger.error(f"‚ùå Stock delta update failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=500, detail=f"Failed to run stock delta update: {str(e)}"
        )


@router.post(
    "/stock-update/force-all",
    response_model=TaskResult,
    description="Î™®Îì† ÌôúÏÑ± Ïã¨Î≥ºÏùò Ï£ºÏãù Îç∞Ïù¥ÌÑ∞Î•º Í∞ïÏ†ú Ï†ÑÏ≤¥ ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.",
)
async def run_stock_force_update(background_tasks: BackgroundTasks):
    """
    Î™®Îì† ÌôúÏÑ± Ïã¨Î≥ºÏùò Îç∞Ïù¥ÌÑ∞Î•º Full update

    ‚ö†Ô∏è Ï£ºÏùò: ÎßéÏùÄ Alpha Vantage API Ìò∏Ï∂úÏùÑ Î∞úÏÉùÏãúÌÇµÎãàÎã§!
    ÏùºÏùº API ÌïúÎèÑ(500 calls)Î•º Í≥†Î†§ÌïòÏó¨ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.
    """
    try:
        logger.info("üì° Triggering forced full update task...")

        # Î∞±Í∑∏ÎùºÏö¥Îìú ÏûëÏóÖÏúºÎ°ú Ïã§Ìñâ
        result = await force_update_all_active_symbols()

        return TaskResult(
            status="completed",
            message=f"Forced full update completed: {result['success']} success, {result['failed']} failed",
            total=result.get("total_symbols", 0),
            success=result["success"],
            failed=result["failed"],
            errors=result["errors"][:10],  # ÏµúÎåÄ 10Í∞ú ÏóêÎü¨Îßå Î∞òÌôò
        )

    except Exception as e:
        logger.error(f"‚ùå Forced full update failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=500, detail=f"Failed to run forced full update: {str(e)}"
        )


@router.get(
    "/stock-update/status",
    description="Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.",
)
async def get_stock_update_status():
    """
    ÌòÑÏû¨ ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÌïÑÏöîÌïú Coverage Ïàò Ï°∞Ìöå
    """
    try:
        from datetime import datetime
        from app.models.market_data.stock import StockDataCoverage

        now = datetime.utcnow()

        # ÎßåÎ£åÎêú Coverage Ïàò
        expired_count = await StockDataCoverage.find(
            {"is_active": True, "next_update_due": {"$lte": now}}
        ).count()

        # Ï†ÑÏ≤¥ ÌôúÏÑ± Coverage Ïàò
        total_count = await StockDataCoverage.find({"is_active": True}).count()

        return {
            "status": "ok",
            "total_active_coverages": total_count,
            "expired_coverages": expired_count,
            "update_needed": expired_count > 0,
            "timestamp": now.isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå Failed to get update status: {e}", exc_info=True)
        raise HTTPException(
            status_code=500, detail=f"Failed to get update status: {str(e)}"
        )
